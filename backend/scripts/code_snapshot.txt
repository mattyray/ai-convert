

# ==== accounts/models.py ====

from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager


class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        if not extra_fields.get("is_staff") or not extra_fields.get("is_superuser"):
            raise ValueError("Superuser must have is_staff=True and is_superuser=True.")
        return self.create_user(email, password, **extra_fields)


class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email




# ==== accounts/serializers.py ====

from rest_framework import serializers
from django.contrib.auth import get_user_model

User = get_user_model()


class CustomUserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, min_length=8)

    class Meta:
        model = User
        fields = ["id", "email", "first_name", "last_name", "password"]
        read_only_fields = ["id"]

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data["email"],
            password=validated_data["password"],
            first_name=validated_data.get("first_name", ""),
            last_name=validated_data.get("last_name", "")
        )
        return user

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            if attr == "password":
                instance.set_password(value)
            else:
                setattr(instance, attr, value)
        instance.save()
        return instance




# ==== accounts/__init__.py ====





# ==== accounts/apps.py ====

from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'




# ==== accounts/forms.py ====

from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'




# ==== accounts/admin.py ====

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser

    list_display = ("email", "first_name", "last_name", "is_staff", "is_active")
    list_filter = ("is_staff", "is_active")
    ordering = ("email",)

    fieldsets = (
        (None, {"fields": ("email", "password")}),
        ("Personal Info", {"fields": ("first_name", "last_name")}),
        ("Permissions", {"fields": ("is_staff", "is_active", "groups", "user_permissions")}),
        ("Important dates", {"fields": ("last_login", "date_joined")}),
    )

    add_fieldsets = (
        (None, {
            "classes": ("wide",),
            "fields": ("email", "password1", "password2", "is_staff", "is_active"),
        }),
    )




# ==== accounts/api_auth.py ====

from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth import authenticate
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny


class CustomAuthToken(APIView):
    permission_classes = [AllowAny]

    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, username=email, password=password)

        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_400_BAD_REQUEST)

        token, _ = Token.objects.get_or_create(user=user)
        return Response({
            "token": token.key,
            "user_id": user.id,
            "email": user.email,
        })




# ==== accounts/tests.py ====

from django.test import TestCase

# Create your tests here.




# ==== accounts/urls.py ====

from django.urls import path
from .views import SignupAPIView, UserProfileAPIView, CustomAuthToken

app_name = "accounts"

urlpatterns = [
    path("signup/", SignupAPIView.as_view(), name="signup"),
    path("me/", UserProfileAPIView.as_view(), name="user-profile"),
    path("login/", CustomAuthToken.as_view(), name="token-login"),
]




# ==== accounts/views.py ====

from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from django.contrib.auth import authenticate, get_user_model

from .serializers import CustomUserSerializer

User = get_user_model()


class SignupAPIView(generics.CreateAPIView):
    """
    POST /api/accounts/signup/
    """
    queryset = User.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = [permissions.AllowAny]


class UserProfileAPIView(APIView):
    """
    GET, PUT /api/accounts/me/
    """
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request):
        serializer = CustomUserSerializer(request.user)
        return Response(serializer.data)

    def put(self, request):
        serializer = CustomUserSerializer(request.user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class CustomAuthToken(ObtainAuthToken):
    """
    POST /api/accounts/login/
    Authenticates using email and password.
    """
    def post(self, request, *args, **kwargs):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response({"error": "Email and password are required."}, status=status.HTTP_400_BAD_REQUEST)

        user = authenticate(request, email=email, password=password)
        if not user:
            return Response({"error": "Invalid credentials."}, status=status.HTTP_401_UNAUTHORIZED)

        token, created = Token.objects.get_or_create(user=user)
        return Response({"token": token.key})




# ==== accounts/tests/test_placeholder.py ====





# ==== accounts/tests/__init__.py ====





# ==== chat/knowledge_base.py ====

# chat/knowledge_base.py

KNOWLEDGE_BASE = """
About Matthew:
- Matthew Raynor is a C5–C6 quadriplegic living in a nursing home, working toward independent living.
- He’s a former deep-sea fisherman turned web developer, author, and artist.
- He offers services including: custom website development, drone photography, and motivational content.

Web Development:
- Matthew builds full-stack apps using Django, React, PostgreSQL, and Docker.
- Visit the Portfolio to see his projects and the Store to buy his visual memoir.

Drone Services:
- Matthew offers custom drone photography and aerial video shoots.
- Ideal for real estate, landscapes, art installations, and events.

Support:
- Users can support Matthew by donating to his fundraiser, sharing his story, or helping him find housing and caregiving.
- Visit the Contact page to get in touch.

Using the Website:
- Log in or sign up with email or Google.
- Visit the Store to view and purchase artwork or his book.
- Use the Contact form for questions or project inquiries.
- The blog contains reflections, updates, and inspirational writing.

AI Assistant:
- This assistant can help answer questions about Matthew, his journey, services, store, or how to help.
"""




# ==== chat/models.py ====

from django.db import models

# Create your models here.




# ==== chat/__init__.py ====





# ==== chat/apps.py ====

#chat/apps.py
from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'chat'




# ==== chat/openai_utils.py ====

from pathlib import Path
import json
from django.conf import settings
from openai import OpenAI

client = OpenAI(api_key=settings.OPENAI_API_KEY)

def load_knowledge_base():
    """
    Loads all JSON files from chat/data/ into a combined list.
    Each file should contain either a list or a single dict.
    """
    base_path = Path(settings.BASE_DIR) / "chat" / "data"
    knowledge = []

    for file in base_path.glob("*.json"):
        try:
            data = json.load(file.open())
            if isinstance(data, list):
                knowledge.extend(data)
            elif isinstance(data, dict):
                knowledge.append(data)
        except Exception as e:
            print(f"Error loading {file.name}: {e}")
    return knowledge

def get_openai_response(user_message):
    """
    Constructs a system prompt using the loaded knowledge base
    and sends a user message to OpenAI.
    """
    context_blocks = load_knowledge_base()
    system_content = "You are a helpful assistant on MatthewRaynor.com. Use the following context when answering questions:\n\n"

    for block in context_blocks:
        title = block.get('title') or 'Untitled'
        content = block.get('content') or ''
        system_content += f"- {title}: {content}\n"

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_content},
            {"role": "user", "content": user_message}
        ]
    )
    return response.choices[0].message.content.strip()




# ==== chat/admin.py ====

from django.contrib import admin

# Register your models here.




# ==== chat/tests.py ====

from django.test import TestCase

# Create your tests here.




# ==== chat/urls.py ====

from django.urls import path
from .views import ChatAPIView

app_name = "chat"

urlpatterns = [
    path("ask/", ChatAPIView.as_view(), name="ask"),
]




# ==== chat/views.py ====

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.conf import settings
from openai import OpenAI
from .openai_utils import get_openai_response

client = OpenAI(api_key=settings.OPENAI_API_KEY)


class ChatAPIView(APIView):
    """
    POST /api/chat/ask/
    Accepts a user message and returns an AI-generated reply using OpenAI.
    """

    def post(self, request, *args, **kwargs):
        message = request.data.get("message", "")
        if not message:
            return Response({"error": "Message is required"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            reply = get_openai_response(message)
            return Response({"reply": reply}, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)




# ==== chat/tests/__init__.py ====





# ==== imagegen/models.py ====

from django.db import models

# Create your models here.




# ==== imagegen/__init__.py ====





# ==== imagegen/apps.py ====

from django.apps import AppConfig


class ImagegenConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'imagegen'




# ==== imagegen/admin.py ====

from django.contrib import admin

# Register your models here.




# ==== imagegen/tests.py ====

from django.test import TestCase

# Create your tests here.




# ==== imagegen/urls.py ====

from django.urls import path
from .views import GenerateImageView, ImageStatusView

urlpatterns = [
    path("generate/", GenerateImageView.as_view(), name="generate-image"),
    path("status/<str:prediction_id>/", ImageStatusView.as_view(), name="image-status"),
]




# ==== imagegen/replicate_utils.py ====

import requests
import os
import time

REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN", "")
MODEL_VERSION = "6f7a773af6fc3e8de9d5a3c00be77c17308914bf67772726aff83496ba1e3bbe"

HEADERS = {
    "Authorization": f"Token {REPLICATE_API_TOKEN}",
    "Content-Type": "application/json"
}

def generate_image_from_prompt(prompt):
    """Creates a prediction and returns its status URL."""
    if not REPLICATE_API_TOKEN:
        raise ValueError("Missing Replicate API token.")
    url = "https://api.replicate.com/v1/predictions"
    response = requests.post(url, headers=HEADERS, json={
        "version": MODEL_VERSION,
        "input": {"prompt": prompt}
    })
    data = response.json()
    if response.status_code != 201:
        return {"error": f"Failed to create prediction: {data}"}
    return {"prediction_id": data["id"], "status": data["status"], "get_url": data["urls"]["get"]}

def get_prediction_status(prediction_id_or_url):
    """Polls prediction for completion and returns output URLs."""
    url = prediction_id_or_url if prediction_id_or_url.startswith("http") else f"https://api.replicate.com/v1/predictions/{prediction_id_or_url}"
    response = requests.get(url, headers=HEADERS)
    data = response.json()
    if response.status_code != 200:
        return {"error": f"Status check failed: {data}"}
    if data["status"] == "succeeded":
        return {"output": data["output"]}
    elif data["status"] in ("failed", "canceled"):
        return {"error": f"Prediction {data['status']}: {data.get('error', '')}"}
    else:
        return {"status": data["status"]}




# ==== imagegen/views.py ====

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .replicate_utils import generate_image_from_prompt, get_prediction_status

class GenerateImageView(APIView):
    def post(self, request):
        prompt = request.data.get("prompt")
        if not prompt:
            return Response({"error": "Prompt is required."}, status=status.HTTP_400_BAD_REQUEST)
        result = generate_image_from_prompt(prompt)
        return Response(result)

class ImageStatusView(APIView):
    def get(self, request, prediction_id):
        result = get_prediction_status(prediction_id)
        return Response(result)




# ==== django_project/asgi.py ====

"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_asgi_application()




# ==== django_project/__init__.py ====





# ==== django_project/urls.py ====

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.http import JsonResponse

def api_root(request):
    return JsonResponse({"message": "API is running!"})

urlpatterns = [
    path("", api_root),  # ✅ Root path now responds
    path("admin/", admin.site.urls),
    path("api/accounts/", include(("accounts.urls", "accounts"), namespace="accounts")),
    path("api/chat/", include(("chat.urls", "chat"), namespace="chat")),
    path("api/image/", include("imagegen.urls")),

]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)




# ==== django_project/wsgi.py ====

"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_wsgi_application()




# ==== django_project/settings/__init__.py ====





# ==== django_project/settings/test.py ====

from .base import *

DEBUG = False
SECRET_KEY = "test-secret-key"

STRIPE_PUBLISHABLE_KEY = "pk_test_dummy"
STRIPE_SECRET_KEY = "sk_test_dummy"
STRIPE_WEBHOOK_SECRET = "whsec_dummy"
stripe.api_key = STRIPE_SECRET_KEY



EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
EMAIL_HOST = "localhost"
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
DEFAULT_FROM_EMAIL = "test@example.com"


# In-memory test DB
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test.sqlite3",
    }
}

RECAPTCHA_PUBLIC_KEY = "test"
RECAPTCHA_PRIVATE_KEY = "test"

# 👇 Google SSO override here only for tests
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': 'test-client-id',
            'secret': 'test-secret',
            'key': ''
        }
    }
}

SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False




# ==== django_project/settings/dev.py ====

from .base import *

DEBUG = True

# Use Stripe test key or fallback
STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY", default="pk_test_dummy")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY", default="sk_test_dummy")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET", default="whsec_dummy")

stripe.api_key = STRIPE_SECRET_KEY




# ==== django_project/settings/prod.py ====

from .base import *

DEBUG = False

STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET")

stripe.api_key = STRIPE_SECRET_KEY




# ==== django_project/settings/base.py ====

from environ import Env
from pathlib import Path
import stripe
import os

print("💥 settings.py loaded from latest build")

# Initialize environment variables
env = Env()
Env.read_env()

# Stripe
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default='pk_test_dummy')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default='sk_test_dummy')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='whsec_dummy')
stripe.api_key = STRIPE_SECRET_KEY

OPENAI_API_KEY = env("OPENAI_API_KEY", default="")

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost", "127.0.0.1", "0.0.0.0", "web"
])

# Installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',

    # Custom apps
    'accounts.apps.AccountsConfig',
    'chat.apps.ChatConfig',

    # Third-party
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'imagegen',


    'rest_framework',
    'rest_framework.authtoken', 
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}

# Auth
AUTH_USER_MODEL = 'accounts.CustomUser'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth
SITE_ID = env.int("DJANGO_SITE_ID", default=1)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'
LOGIN_REDIRECT_URL = '/accounts/dashboard/'
LOGOUT_REDIRECT_URL = '/'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID', default='test-client-id'),
            'secret': env('GOOGLE_CLIENT_SECRET', default='test-secret'),
            'key': ''
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR.parent / "static"]
STATIC_ROOT = BASE_DIR.parent / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Staticfiles finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Email
EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.locmem.EmailBackend")
EMAIL_HOST = env("EMAIL_HOST", default="smtp.test.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="test@test.com")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="testpassword")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="noreply@test.com")

# Security
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Other
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}




# ==== scripts/export_code_snapshot.py ====

import os

# Directories to include
INCLUDE_DIRS = [
    "accounts", "chat", "imagegen", "django_project", "scripts"
]

# File extensions to include
INCLUDE_EXTENSIONS = [".py", ".json", ".html", ".js", ".ts", ".css"]

# Directories to exclude
EXCLUDE_DIRS = {"__pycache__", "migrations", "venv", "env", "node_modules", "media", "static", ".git"}

# Output file
OUTPUT_PATH = os.path.join("scripts", "code_snapshot.txt")

def should_include(file_path):
    return any(file_path.endswith(ext) for ext in INCLUDE_EXTENSIONS)

def walk_and_collect():
    collected = []

    for base_dir in INCLUDE_DIRS:
        for root, dirs, files in os.walk(base_dir):
            dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]
            for file in files:
                full_path = os.path.join(root, file)
                rel_path = os.path.relpath(full_path)
                if should_include(full_path):
                    with open(full_path, "r", encoding="utf-8", errors="ignore") as f:
                        content = f.read()
                    collected.append((rel_path, content))

    return collected

def write_snapshot(files):
    with open(OUTPUT_PATH, "w", encoding="utf-8") as out:
        for path, code in files:
            out.write(f"\n\n# ==== {path} ====\n\n")
            out.write(code)
            out.write("\n\n")

if __name__ == "__main__":
    collected_files = walk_and_collect()
    write_snapshot(collected_files)
    print(f"✅ Snapshot created: {OUTPUT_PATH} ({len(collected_files)} files)")




# ==== scripts/embed_historical_faces.py ====

import face_recognition
import os
import json
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
input_dir = BASE_DIR / "imagegen" / "historical_faces"
output_file = BASE_DIR / "face_data" / "embeddings.json"

embeddings = []

for filename in os.listdir(input_dir):
    if filename.endswith((".jpg", ".jpeg", ".png")):
        image_path = input_dir / filename
        image = face_recognition.load_image_file(image_path)
        face_locations = face_recognition.face_locations(image)
        if not face_locations:
            print(f"No face found in {filename}, skipping.")
            continue
        encoding = face_recognition.face_encodings(image, known_face_locations=face_locations)[0]
        embeddings.append({
            "name": filename.rsplit(".", 1)[0],
            "embedding": encoding.tolist(),
        })

# Save to JSON
with open(output_file, "w") as f:
    json.dump(embeddings, f)

print(f"✅ Saved {len(embeddings)} embeddings to {output_file}")


