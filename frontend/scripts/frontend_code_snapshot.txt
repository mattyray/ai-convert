# FRONTEND CODE SNAPSHOT
# Generated for AI Face Swap App
# Total files: 26



# ==================== Configuration Files ====================



# ==== src/vite-env.d.ts ====

/// <reference types="vite/client" />




# ==== src/types/index.ts ====

export interface FaceSwapResult {
  id: number;
  match_name: string;
  match_score: number;
  message: string;
  output_image_url: string;
  original_selfie_url: string;
  historical_figure_url: string;
}

export interface ApiError {
  error: string;
}

export interface UploadProgress {
  step: 'uploading' | 'analyzing' | 'matching' | 'swapping' | 'complete';
  progress: number;
  message: string;
}

export interface HistoricalFigure {
  name: string;
  description: string;
  imageUrl: string;
  confidence?: number;
}



# ==== src/services/api.ts ====

import axios from 'axios';
import { FaceSwapResult, ApiError } from '../types';

// Use environment variables or fallback to dev defaults
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://127.0.0.1:8002/api';
const API_TOKEN = import.meta.env.VITE_API_TOKEN || '90cc43ca30091f85a96b4ce3647ffa7b0f46e8f3';

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Token ${API_TOKEN}`,
  },
  timeout: 300000, // 5 minutes for face swap processing
});

// Add request interceptor for debugging
api.interceptors.request.use((config) => {
  console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);
  return config;
});

// Add response interceptor for error handling
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error(`‚ùå API Error: ${error.response?.status} ${error.config?.url}`, error.response?.data);
    return Promise.reject(error);
  }
);

export class FaceSwapAPI {
  static async generateFaceSwap(
    selfieFile: File,
    onProgress?: (progress: number) => void
  ): Promise<FaceSwapResult> {
    const formData = new FormData();
    formData.append('selfie', selfieFile);

    try {
      console.log(`üì§ Uploading file: ${selfieFile.name} (${(selfieFile.size / 1024 / 1024).toFixed(1)}MB)`);
      
      const response = await api.post<FaceSwapResult>('/imagegen/generate/', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          if (progressEvent.total && onProgress) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });

      console.log('‚úÖ Face swap successful:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Face swap failed:', error);
      
      if (axios.isAxiosError(error)) {
        if (error.code === 'ECONNREFUSED') {
          throw new Error('Cannot connect to server. Make sure the backend is running on port 8002.');
        }
        
        if (error.response?.status === 401) {
          throw new Error('Authentication failed. Please check your API token.');
        }
        
        if (error.response?.status === 413) {
          throw new Error('File too large. Please use an image under 10MB.');
        }
        
        if (error.response?.data) {
          const apiError = error.response.data as ApiError;
          throw new Error(apiError.error || `Server error: ${error.response.status}`);
        }
      }
      
      throw new Error('Network error. Please check your connection and try again.');
    }
  }

  static async getImageStatus(id: number): Promise<FaceSwapResult> {
    try {
      const response = await api.get<FaceSwapResult>(`/imagegen/status/${id}/`);
      return response.data;
    } catch (error) {
      console.error('‚ùå Status check failed:', error);
      throw new Error('Failed to check image status');
    }
  }

  static async testConnection(): Promise<boolean> {
    try {
      await api.get('/');
      return true;
    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return false;
    }
  }
}

export default api;



# ==== ./tsconfig.node.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}




# ==== ./tailwind.config.js ====

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}



# ==== ./tsconfig.app.json ====

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}




# ==== ./package.json ====

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "lucide-react": "^0.516.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-dropzone": "^14.3.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@flydotio/dockerfile": "^0.7.10",
    "@tailwindcss/postcss": "^4.1.10",
    "@tailwindcss/postcss7-compat": "^2.2.17",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.10",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1",
    "vite": "^6.3.5"
  }
}




# ==== ./fly.toml ====

# fly.toml app configuration file generated for frontend-delicate-pine-6591 on 2025-06-17T18:14:08-04:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = 'frontend-delicate-pine-6591'
primary_region = 'ewr'

[build]

[http_service]
  internal_port = 80
  force_https = true
  auto_stop_machines = 'stop'
  auto_start_machines = true
  min_machines_running = 0
  processes = ['app']

[[vm]]
  memory = '1gb'
  cpu_kind = 'shared'
  cpus = 1




# ==== ./tsconfig.json ====

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}




# ==== ./eslint.config.js ====

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)




# ==== ./vite.config.ts ====

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})




# ==== ./postcss.config.js ====

export default {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}



# ==================== React Components & Logic ====================



# ==== src/components/ProcessingStatus.tsx ====

import React from 'react';
import { Loader2, Search, Users, Sparkles, CheckCircle } from 'lucide-react';

interface ProcessingStatusProps {
  step: 'uploading' | 'analyzing' | 'matching' | 'swapping' | 'complete';
  progress: number;
  message: string;
  matchedFigure?: string;
}

const ProcessingStatus: React.FC<ProcessingStatusProps> = ({
  step,
  progress,
  message,
  matchedFigure
}) => {
  const steps = [
    {
      key: 'uploading',
      label: 'Uploading',
      icon: Loader2,
      description: 'Securely uploading your photo'
    },
    {
      key: 'analyzing',
      label: 'Analyzing',
      icon: Search,
      description: 'AI analyzing facial features'
    },
    {
      key: 'matching',
      label: 'Matching',
      icon: Users,
      description: 'Finding historical matches'
    },
    {
      key: 'swapping',
      label: 'Transforming',
      icon: Sparkles,
      description: 'Creating your transformation'
    },
  ];

  const getStepStatus = (stepKey: string) => {
    const stepIndex = steps.findIndex(s => s.key === stepKey);
    const currentStepIndex = steps.findIndex(s => s.key === step);
    
    if (stepIndex < currentStepIndex) return 'completed';
    if (stepIndex === currentStepIndex) return 'active';
    return 'pending';
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-8">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mb-4">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-full p-3">
            <Sparkles className="w-8 h-8 text-white" />
          </div>
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Creating Your Transformation
        </h2>
        <p className="text-gray-600">
          {message}
        </p>
        {matchedFigure && (
          <div className="mt-4 inline-block bg-green-50 border border-green-200 rounded-lg px-4 py-2">
            <p className="text-green-800 font-medium">
              ‚ú® Matched with {matchedFigure}!
            </p>
          </div>
        )}
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
          <span>Progress</span>
          <span>{progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500 ease-out"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Steps */}
      <div className="space-y-4">
        {steps.map((stepItem, index) => {
          const status = getStepStatus(stepItem.key);
          const Icon = stepItem.icon;
          
          return (
            <div
              key={stepItem.key}
              className={`flex items-center p-4 rounded-lg transition-all duration-300 ${
                status === 'active'
                  ? 'bg-blue-50 border border-blue-200'
                  : status === 'completed'
                  ? 'bg-green-50 border border-green-200'
                  : 'bg-gray-50 border border-gray-200'
              }`}
            >
              <div
                className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center mr-4 ${
                  status === 'active'
                    ? 'bg-blue-500 text-white'
                    : status === 'completed'
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-300 text-gray-600'
                }`}
              >
                {status === 'completed' ? (
                  <CheckCircle size={20} />
                ) : status === 'active' ? (
                  <Icon size={20} className="animate-spin" />
                ) : (
                  <Icon size={20} />
                )}
              </div>
              
              <div className="flex-grow">
                <div
                  className={`font-medium ${
                    status === 'active'
                      ? 'text-blue-900'
                      : status === 'completed'
                      ? 'text-green-900'
                      : 'text-gray-600'
                  }`}
                >
                  {stepItem.label}
                </div>
                <div
                  className={`text-sm ${
                    status === 'active'
                      ? 'text-blue-700'
                      : status === 'completed'
                      ? 'text-green-700'
                      : 'text-gray-500'
                  }`}
                >
                  {stepItem.description}
                </div>
              </div>
              
              <div className="flex-shrink-0">
                {status === 'active' && (
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" />
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                  </div>
                )}
                {status === 'completed' && (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Fun fact while waiting */}
      <div className="mt-8 p-4 bg-purple-50 border border-purple-200 rounded-lg">
        <p className="text-purple-800 text-sm text-center">
          üí° <strong>Did you know?</strong> Our AI analyzes over 100 facial landmarks to find your perfect historical match!
        </p>
      </div>
    </div>
  );
};

export default ProcessingStatus;



# ==== src/components/ResultDisplay.tsx ====

import React from 'react';
import { Download, RefreshCw, Share2, Star } from 'lucide-react';
import { FaceSwapResult } from '../types';

interface ResultDisplayProps {
  result: FaceSwapResult;
  onTryAgain: () => void;
}

const ResultDisplay: React.FC<ResultDisplayProps> = ({ result, onTryAgain }) => {
  const handleDownload = () => {
    const link = document.createElement('a');
    link.href = result.output_image_url;
    link.download = `faceswap_${result.match_name.replace(' ', '_')}.jpg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `I transformed into ${result.match_name}!`,
          text: `Check out my AI transformation into ${result.match_name}`,
          url: window.location.href,
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      alert('Link copied to clipboard!');
    }
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.9) return 'text-green-600 bg-green-50';
    if (score >= 0.8) return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  return (
    <div className="space-y-8">
      {/* Success Message */}
      <div className="text-center bg-green-50 border border-green-200 rounded-xl p-6">
        <div className="flex items-center justify-center mb-4">
          <Star className="w-8 h-8 text-yellow-500 fill-current" />
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Transformation Complete! ‚ú®
        </h2>
        <p className="text-gray-600">
          {result.message}
        </p>
        <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium mt-3 ${getConfidenceColor(result.match_score)}`}>
          {(result.match_score * 100).toFixed(1)}% match confidence
        </div>
      </div>

      {/* Image Comparison */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Original Selfie */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            üì∏ Your Original
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-gray-200">
            <img
              src={result.original_selfie_url}
              alt="Your original selfie"
              className="w-full h-64 object-cover"
            />
          </div>
        </div>

        {/* Historical Figure */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            üëë {result.match_name}
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-yellow-300">
            <img
              src={result.historical_figure_url}
              alt={result.match_name}
              className="w-full h-64 object-cover"
            />
          </div>
        </div>

        {/* Final Result */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            ‚ú® Your Transformation
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-green-300">
            <img
              src={result.output_image_url}
              alt="Face swap result"
              className="w-full h-64 object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
            <div className="absolute bottom-3 left-3 right-3">
              <p className="text-white text-sm font-medium bg-black/50 rounded px-2 py-1">
                You as {result.match_name}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button
          onClick={handleDownload}
          className="btn-primary flex items-center justify-center gap-2"
        >
          <Download size={20} />
          Download Result
        </button>
        
        <button
          onClick={handleShare}
          className="btn-secondary flex items-center justify-center gap-2"
        >
          <Share2 size={20} />
          Share Transformation
        </button>
        
        <button
          onClick={onTryAgain}
          className="btn-secondary flex items-center justify-center gap-2"
        >
          <RefreshCw size={20} />
          Try Another Photo
        </button>
      </div>

      {/* Technical Details */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h4 className="font-semibold text-gray-900 mb-3">Transformation Details</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
          <div>
            <span className="font-medium text-gray-700">Historical Match:</span>
            <span className="ml-2 text-gray-600">{result.match_name}</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Confidence Score:</span>
            <span className="ml-2 text-gray-600">{(result.match_score * 100).toFixed(1)}%</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Transformation ID:</span>
            <span className="ml-2 text-gray-600">#{result.id}</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Processing Time:</span>
            <span className="ml-2 text-gray-600">~30 seconds</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultDisplay;



# ==== src/components/FileUpload.tsx ====

import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, X, Image as ImageIcon } from 'lucide-react';

interface FileUploadProps {
  onFileSelect: (file: File) => void;
  selectedFile: File | null;
  onClear: () => void;
  disabled?: boolean;
}

const FileUpload: React.FC<FileUploadProps> = ({
  onFileSelect,
  selectedFile,
  onClear,
  disabled = false
}) => {
  const [preview, setPreview] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      onFileSelect(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  }, [onFileSelect]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.webp']
    },
    maxFiles: 1,
    disabled
  });

  const handleClear = () => {
    onClear();
    setPreview(null);
  };

  if (selectedFile && preview) {
    return (
      <div className="relative">
        <div className="relative overflow-hidden rounded-xl border-2 border-gray-200">
          <img
            src={preview}
            alt="Selected selfie"
            className="w-full h-64 object-cover"
          />
          {!disabled && (
            <button
              onClick={handleClear}
              className="absolute top-3 right-3 bg-red-500 hover:bg-red-600 text-white rounded-full p-2 transition-colors"
            >
              <X size={16} />
            </button>
          )}
        </div>
        <div className="mt-3 text-center">
          <p className="text-sm text-gray-600">
            üì∏ <strong>{selectedFile.name}</strong>
          </p>
          <p className="text-xs text-gray-500">
            {(selectedFile.size / 1024 / 1024).toFixed(1)} MB
          </p>
        </div>
      </div>
    );
  }

  return (
    <div
      {...getRootProps()}
      className={`
        border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all duration-200
        ${isDragActive 
          ? 'border-primary-500 bg-primary-50' 
          : 'border-gray-300 hover:border-primary-400 hover:bg-gray-50'
        }
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      <input {...getInputProps()} />
      
      <div className="space-y-4">
        <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
          {isDragActive ? (
            <Upload className="w-8 h-8 text-primary-500" />
          ) : (
            <ImageIcon className="w-8 h-8 text-gray-400" />
          )}
        </div>
        
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            {isDragActive ? 'Drop your selfie here!' : 'Upload Your Selfie'}
          </h3>
          <p className="text-gray-500 mb-4">
            Drag and drop your photo, or click to browse
          </p>
          <div className="text-xs text-gray-400">
            Supports: JPG, PNG, WebP ‚Ä¢ Max size: 10MB
          </div>
        </div>
      </div>
    </div>
  );
};

export default FileUpload;



# ==== src/components/ErrorBoundary.tsx ====

import React, { Component, ErrorInfo, ReactNode } from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="flex items-center justify-center mb-6">
              <AlertTriangle className="w-16 h-16 text-red-500" />
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We encountered an unexpected error. Don't worry, your data is safe.
            </p>
            
            <div className="space-y-4">
              <button
                onClick={this.handleReset}
                className="btn-primary w-full flex items-center justify-center gap-2"
              >
                <RefreshCw size={20} />
                Try Again
              </button>
              
              <button
                onClick={() => window.location.reload()}
                className="btn-secondary w-full"
              >
                Reload Page
              </button>
            </div>
            
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700">
                  Technical Details
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-3 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;



# ==================== Assets & Styles ====================



# ==== src/App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Expose port
EXPOSE 5173

# Start development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

