

  const handleLogout = async () => {
    try {
      await FaceSwapAPI.logout();
      setUser(null);
      setIsOpen(false);
      
      // Notify parent about user state change
      if (onUserStateChange) {
        onUserStateChange();
      }
      
      // Refresh page to reset any cached user data
      window.location.reload();
    } catch (error) {
      console.error('Logout error:', error);
      // Force logout even if API call fails
      localStorage.removeItem('authToken');
      setUser(null);
      window.location.reload();
    }
  };

  const getUserInitials = (user: UserData): string => {
    const first = user.first_name?.charAt(0) || '';
    const last = user.last_name?.charAt(0) || '';
    return (first + last).toUpperCase() || user.email?.charAt(0).toUpperCase() || '?';
  };

  const getUserDisplayName = (user: UserData): string => {
    if (user.first_name && user.last_name) {
      return `${user.first_name} ${user.last_name}`;
    }
    if (user.first_name) {
      return user.first_name;
    }
    return user.email;
  };

  // Loading state
  if (loading) {
    return (
      <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse"></div>
    );
  }

  // Logged out state
  if (!user) {
    return (
      <button
        onClick={handleSignIn}
        className="bg-white hover:bg-gray-50 text-gray-700 font-semibold py-2 px-4 rounded-lg border border-gray-300 hover:border-gray-400 transition-all duration-200 text-sm"
      >
        Sign In
      </button>
    );
  }

  // Logged in state
  return (
    <div className="relative" ref={dropdownRef}>
      {/* User Avatar Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold text-sm">
          {getUserInitials(user)}
        </div>
        <ChevronDown 
          size={16} 
          className={`text-gray-500 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          {/* User Info */}
          <div className="px-4 py-3 border-b border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-semibold">
                {getUserInitials(user)}
              </div>
              <div>
                <div className="font-medium text-gray-900">{getUserDisplayName(user)}</div>
                <div className="text-sm text-gray-500">{user.email}</div>
              </div>
            </div>
          </div>

          {/* Menu Items */}
          <div className="py-1">
            <button
              onClick={() => {
                setIsOpen(false);
                // TODO: Navigate to account settings
                alert('Account settings coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <Settings size={16} />
              Account Settings
            </button>
            
            <button
              onClick={() => {
                setIsOpen(false);
                // TODO: Navigate to transformation history
                alert('Transformation history coming soon!');
              }}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors"
            >
              <History size={16} />
              My Transformations
            </button>
          </div>

          {/* Logout */}
          <div className="border-t border-gray-100 py-1">
            <button
              onClick={handleLogout}
              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors"
            >
              <LogOut size={16} />
              Sign Out
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserMenu;



# ==== src/components/HistoricalPreview.tsx ====

const HistoricalPreview: React.FC = () => {
  const figures = [
    { name: 'Napoleon', emoji: 'üëë' },
    { name: 'Cleopatra', emoji: 'üè∫' },
    { name: 'Leonardo da Vinci', emoji: 'üé®' },
    { name: 'Marie Antoinette', emoji: 'üë∏' },
    { name: 'JFK', emoji: 'üá∫üá∏' },
    { name: 'Frida Kahlo', emoji: 'üå∫' },
  ];

  return (
    <div className="mt-12 text-center">
      <h3 className="text-lg font-semibold text-gray-900 mb-6">
        Meet Some Historical Figures
      </h3>
      <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4">
        {figures.map((figure) => (
          <div key={figure.name} className="text-center p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors">
            <div className="text-2xl mb-2">{figure.emoji}</div>
            <div className="text-xs text-gray-600 font-medium">{figure.name}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default HistoricalPreview;



# ==== src/components/ProcessingStatus.tsx ====

import { Loader2, Search, Users, Sparkles, CheckCircle } from 'lucide-react';
import type { ProgressStep } from '../types/index';

interface ProcessingStatusProps {
  step: ProgressStep;
  progress: number;
  message: string;
  matchedFigure?: string;
}

const ProcessingStatus: React.FC<ProcessingStatusProps> = ({
  step,
  progress,
  message,
  matchedFigure
}) => {
  const steps = [
    {
      key: 'uploading',
      label: 'Uploading',
      icon: Loader2,
      description: 'Securely uploading your photo'
    },
    {
      key: 'analyzing',
      label: 'Analyzing',
      icon: Search,
      description: 'AI analyzing facial features'
    },
    {
      key: 'matching',
      label: 'Matching',
      icon: Users,
      description: 'Finding historical matches'
    },
    {
      key: 'swapping',
      label: 'Transforming',
      icon: Sparkles,
      description: 'Creating your transformation'
    },
  ];

  const getStepStatus = (stepKey: string) => {
    const stepIndex = steps.findIndex(s => s.key === stepKey);
    const currentStepIndex = steps.findIndex(s => s.key === step);
    
    if (stepIndex < currentStepIndex) return 'completed';
    if (stepIndex === currentStepIndex) return 'active';
    return 'pending';
  };

  return (
    <div className="bg-white rounded-xl shadow-lg p-8">
      {/* Header */}
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mb-4">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-full p-3">
            <Sparkles className="w-8 h-8 text-white" />
          </div>
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Creating Your Transformation
        </h2>
        <p className="text-gray-600">
          {message}
        </p>
        {matchedFigure && (
          <div className="mt-4 inline-block bg-green-50 border border-green-200 rounded-lg px-4 py-2">
            <p className="text-green-800 font-medium">
              ‚ú® Matched with {matchedFigure}!
            </p>
          </div>
        )}
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex items-center justify-between text-sm text-gray-600 mb-2">
          <span>Progress</span>
          <span>{progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <div
            className="bg-gradient-to-r from-blue-500 to-purple-500 h-3 rounded-full transition-all duration-500 ease-out"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Steps */}
      <div className="space-y-4">
        {steps.map((stepItem) => {
          const status = getStepStatus(stepItem.key);
          const Icon = stepItem.icon;
          
          return (
            <div
              key={stepItem.key}
              className={`flex items-center p-4 rounded-lg transition-all duration-300 ${
                status === 'active'
                  ? 'bg-blue-50 border border-blue-200'
                  : status === 'completed'
                  ? 'bg-green-50 border border-green-200'
                  : 'bg-gray-50 border border-gray-200'
              }`}
            >
              <div
                className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center mr-4 ${
                  status === 'active'
                    ? 'bg-blue-500 text-white'
                    : status === 'completed'
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-300 text-gray-600'
                }`}
              >
                {status === 'completed' ? (
                  <CheckCircle size={20} />
                ) : status === 'active' ? (
                  <Icon size={20} className="animate-spin" />
                ) : (
                  <Icon size={20} />
                )}
              </div>
              
              <div className="flex-grow">
                <div
                  className={`font-medium ${
                    status === 'active'
                      ? 'text-blue-900'
                      : status === 'completed'
                      ? 'text-green-900'
                      : 'text-gray-600'
                  }`}
                >
                  {stepItem.label}
                </div>
                <div
                  className={`text-sm ${
                    status === 'active'
                      ? 'text-blue-700'
                      : status === 'completed'
                      ? 'text-green-700'
                      : 'text-gray-500'
                  }`}
                >
                  {stepItem.description}
                </div>
              </div>
              
              <div className="flex-shrink-0">
                {status === 'active' && (
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" />
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                  </div>
                )}
                {status === 'completed' && (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Fun fact while waiting */}
      <div className="mt-8 p-4 bg-purple-50 border border-purple-200 rounded-lg">
        <p className="text-purple-800 text-sm text-center">
          üí° <strong>Did you know?</strong> Our AI analyzes over 100 facial landmarks to find your perfect historical match!
        </p>
      </div>
    </div>
  );
};

export default ProcessingStatus;



# ==== src/components/UsageIndicator.tsx ====

import type { UsageData, UsageLimitError } from '../types/index';

interface UsageIndicatorProps {
  usage: UsageData;
  onShowRegistrationGate: (error: UsageLimitError) => void;
}

const UsageIndicator: React.FC<UsageIndicatorProps> = ({ usage, onShowRegistrationGate }) => {
  if (usage.unlimited) return null;

  return (
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <h3 className="font-medium text-blue-900 mb-2">Your Free Usage</h3>
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div className="text-center">
          <div className={`text-lg font-bold ${usage.can_match ? 'text-green-600' : 'text-red-600'}`}>
            {usage.matches_used}/{usage.matches_limit}
          </div>
          <div className="text-gray-600">Face Matches</div>
        </div>
        <div className="text-center">
          <div className={`text-lg font-bold ${usage.can_randomize ? 'text-green-600' : 'text-red-600'}`}>
            {usage.randomizes_used}/{usage.randomizes_limit}
          </div>
          <div className="text-gray-600">Randomizes</div>
        </div>
      </div>
      {usage.is_limited && (
        <div className="mt-3 text-center">
          <button
            onClick={() => onShowRegistrationGate({ 
              feature_type: 'match', 
              usage, 
              registration_required: true,
              error: 'Usage limit reached',
              message: 'Get unlimited access'
            })}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
          >
            Get unlimited access ‚Üí
          </button>
        </div>
      )}
    </div>
  );
};

export default UsageIndicator;



# ==== src/components/ResultDisplay.tsx ====

import React, { useState } from 'react';
import { Download, RefreshCw, Share2, Star, Loader2, CheckCircle, Copy } from 'lucide-react';
import type { FaceSwapResult } from '../types/index';
import FacebookShareButton from './FacebookShareButton';

interface ResultDisplayProps {
  result: FaceSwapResult;
  onTryAgain: () => void;
}

const ResultDisplay: React.FC<ResultDisplayProps> = ({ result, onTryAgain }) => {
  const [downloadState, setDownloadState] = useState<'idle' | 'downloading' | 'success' | 'error'>('idle');

  const handleDownload = async () => {
    try {
      setDownloadState('downloading');
      console.log('üîΩ Starting download for:', result.output_image_url);
      
      // Fetch the image as a blob to bypass CORS restrictions
      const response = await fetch(result.output_image_url);
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${response.status}`);
      }
      
      const blob = await response.blob();
      console.log('‚úÖ Image fetched as blob:', blob.size, 'bytes');
      
      // Create a temporary URL for the blob
      const blobUrl = URL.createObjectURL(blob);
      
      // Create download link
      const link = document.createElement('a');
      link.href = blobUrl;
      link.download = `historyface_${result.match_name.replace(/[^a-zA-Z0-9]/g, '_')}_transformation.jpg`;
      
      // Trigger download
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up the blob URL to free memory
      URL.revokeObjectURL(blobUrl);
      
      setDownloadState('success');
      console.log('‚úÖ Download completed');
      
      // Reset state after 2 seconds
      setTimeout(() => setDownloadState('idle'), 2000);
      
    } catch (error) {
      console.error('‚ùå Download failed:', error);
      setDownloadState('error');
      
      // Reset state after 3 seconds
      setTimeout(() => setDownloadState('idle'), 3000);
      
      // Fallback: open in new tab
      setTimeout(() => {
        window.open(result.output_image_url, '_blank');
      }, 1000);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `I transformed into ${result.match_name}!`,
          text: `Check out my AI transformation into ${result.match_name}`,
          url: window.location.href,
        });
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(window.location.href);
        alert('Link copied to clipboard!');
      } catch (error) {
        alert('Could not copy link');
      }
    }
  };

  const handleCopyImageUrl = async () => {
    try {
      await navigator.clipboard.writeText(result.output_image_url);
      alert('‚úÖ Image URL copied! Paste it into any social media post.');
    } catch (error) {
      alert('üìã Copy this URL: ' + result.output_image_url);
    }
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.9) return 'text-green-600 bg-green-50';
    if (score >= 0.8) return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  const getDownloadButtonContent = () => {
    switch (downloadState) {
      case 'downloading':
        return (
          <>
            <Loader2 className="animate-spin" size={20} />
            Downloading...
          </>
        );
      case 'success':
        return (
          <>
            <CheckCircle size={20} />
            Downloaded!
          </>
        );
      case 'error':
        return (
          <>
            <Download size={20} />
            Failed - Try Again
          </>
        );
      default:
        return (
          <>
            <Download size={20} />
            Download Result
          </>
        );
    }
  };

  return (
    <div className="space-y-8">
      {/* Success Message */}
      <div className="text-center bg-green-50 border border-green-200 rounded-xl p-6">
        <div className="flex items-center justify-center mb-4">
          <Star className="w-8 h-8 text-yellow-500 fill-current" />
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          Transformation Complete! ‚ú®
        </h2>
        <p className="text-gray-600">
          {result.message}
        </p>
        <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium mt-3 ${getConfidenceColor(result.match_score)}`}>
          {(result.match_score * 100).toFixed(1)}% match confidence
        </div>
      </div>

      {/* Image Comparison */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Original Selfie */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            üì∏ Your Original
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-gray-200">
            <img
              src={result.original_selfie_url}
              alt="Your original selfie"
              className="w-full h-64 object-cover"
            />
          </div>
        </div>

        {/* Historical Figure */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            üëë {result.match_name}
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-yellow-300">
            <img
              src={result.historical_figure_url}
              alt={result.match_name}
              className="w-full h-64 object-cover"
            />
          </div>
        </div>

        {/* Final Result */}
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-center text-gray-900">
            ‚ú® Your Transformation
          </h3>
          <div className="relative overflow-hidden rounded-xl border-2 border-green-300">
            <img
              src={result.output_image_url}
              alt="Face swap result"
              className="w-full h-64 object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent" />
            <div className="absolute bottom-3 left-3 right-3">
              <p className="text-white text-sm font-medium bg-black/50 rounded px-2 py-1">
                You as {result.match_name}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <button
          onClick={handleDownload}
          disabled={downloadState === 'downloading'}
          className={`btn-primary flex items-center justify-center gap-2 ${
            downloadState === 'success' ? 'bg-green-500 hover:bg-green-600' : 
            downloadState === 'error' ? 'bg-red-500 hover:bg-red-600' : ''
          }`}
        >
          {getDownloadButtonContent()}
        </button>
        
        <button
          onClick={handleCopyImageUrl}
          className="btn-secondary flex items-center justify-center gap-2"
        >
          <Copy size={20} />
          Copy Image Link
        </button>
        
        <button
          onClick={handleShare}
          className="btn-secondary flex items-center justify-center gap-2"
        >
          <Share2 size={20} />
          Share Transformation
        </button>

        <FacebookShareButton 
          result={result}
          className="w-full sm:w-auto"
        />
        
        <button
          onClick={onTryAgain}
          className="btn-secondary flex items-center justify-center gap-2"
        >
          <RefreshCw size={20} />
          Try Another Photo
        </button>
      </div>

      {/* Download Error Message */}
      {downloadState === 'error' && (
        <div className="text-center">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-700">
            Download failed. Opening image in new tab instead...
          </div>
        </div>
      )}

      {/* Technical Details */}
      <div className="bg-gray-50 rounded-xl p-6">
        <h4 className="font-semibold text-gray-900 mb-3">Transformation Details</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
          <div>
            <span className="font-medium text-gray-700">Historical Match:</span>
            <span className="ml-2 text-gray-600">{result.match_name}</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Confidence Score:</span>
            <span className="ml-2 text-gray-600">{(result.match_score * 100).toFixed(1)}%</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Transformation ID:</span>
            <span className="ml-2 text-gray-600">#{result.id}</span>
          </div>
          <div>
            <span className="font-medium text-gray-700">Processing Time:</span>
            <span className="ml-2 text-gray-600">~30 seconds</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultDisplay;



# ==== src/components/ErrorDisplay.tsx ====

import { AlertCircle } from 'lucide-react';

interface ErrorDisplayProps {
  error: string;
  onTryAgain: () => void;
}

const ErrorDisplay: React.FC<ErrorDisplayProps> = ({ error, onTryAgain }) => {
  return (
    <div className="max-w-xl mx-auto">
      <div className="bg-red-50 border border-red-200 rounded-xl p-8 text-center">
        <div className="flex items-center justify-center mb-4">
          <AlertCircle className="w-12 h-12 text-red-500" />
        </div>
        <h3 className="text-xl font-semibold text-red-900 mb-4">
          Oops! Something went wrong
        </h3>
        <p className="text-red-700 mb-6">
          {error}
        </p>
        <div className="space-y-3">
          <button
            onClick={onTryAgain}
            className="btn-primary w-full"
          >
            Try Again
          </button>
          <p className="text-sm text-red-600">
            Make sure your photo shows a clear face and is under 10MB
          </p>
        </div>
      </div>
    </div>
  );
};

export default ErrorDisplay;



# ==== src/components/FileUpload.tsx ====

import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, X, Image as ImageIcon } from 'lucide-react';

interface FileUploadProps {
  onFileSelect: (file: File) => void;
  selectedFile: File | null;
  onClear: () => void;
  disabled?: boolean;
}

const FileUpload: React.FC<FileUploadProps> = ({
  onFileSelect,
  selectedFile,
  onClear,
  disabled = false
}) => {
  const [preview, setPreview] = useState<string | null>(null);

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0];
    if (file) {
      onFileSelect(file);
      
      // Create preview
      const reader = new FileReader();
      reader.onload = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  }, [onFileSelect]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.webp']
    },
    maxFiles: 1,
    disabled
  });

  const handleClear = () => {
    onClear();
    setPreview(null);
  };

  if (selectedFile && preview) {
    return (
      <div className="relative">
        <div className="relative overflow-hidden rounded-xl border-2 border-gray-200">
          <img
            src={preview}
            alt="Selected selfie"
            className="w-full h-64 object-cover"
          />
          {!disabled && (
            <button
              onClick={handleClear}
              className="absolute top-3 right-3 bg-red-500 hover:bg-red-600 text-white rounded-full p-2 transition-colors"
            >
              <X size={16} />
            </button>
          )}
        </div>
        <div className="mt-3 text-center">
          <p className="text-sm text-gray-600">
            üì∏ <strong>{selectedFile.name}</strong>
          </p>
          <p className="text-xs text-gray-500">
            {(selectedFile.size / 1024 / 1024).toFixed(1)} MB
          </p>
        </div>
      </div>
    );
  }

  return (
    <div
      {...getRootProps()}
      className={`
        border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all duration-200
        ${isDragActive 
          ? 'border-blue-500 bg-blue-50' 
          : 'border-gray-300 hover:border-blue-400 hover:bg-gray-50'
        }
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      <input {...getInputProps()} />
      
      <div className="space-y-4">
        <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
          {isDragActive ? (
            <Upload className="w-8 h-8 text-blue-500" />
          ) : (
            <ImageIcon className="w-8 h-8 text-gray-400" />
          )}
        </div>
        
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            {isDragActive ? 'Drop your selfie here!' : 'Upload Your Selfie'}
          </h3>
          <p className="text-gray-500 mb-4">
            Drag and drop your photo, or click to browse
          </p>
          <div className="text-xs text-gray-400">
            Supports: JPG, PNG, WebP ‚Ä¢ Max size: 10MB
          </div>
        </div>
      </div>
    </div>
  );
};

export default FileUpload;



# ==== src/components/SocialAuth.tsx ====

import React, { useEffect, useRef, useState } from 'react';

declare global {
  interface Window {
    google: any;
    FB: any;
    fbReady?: boolean;
    fbSkipped?: boolean;
  }
}

interface SocialAuthProps {
  onGoogleSuccess: (token: string, userInfo: any) => void;
  onFacebookSuccess: (token: string, userInfo: any) => void;
  onError: (error: string) => void;
  disabled?: boolean;
}

const SocialAuth: React.FC<SocialAuthProps> = ({ 
  onGoogleSuccess, 
  onFacebookSuccess, 
  onError,
  disabled = false
}) => {
  const googleButtonRef = useRef<HTMLDivElement>(null);
  const [googleReady, setGoogleReady] = useState(false);
  const [facebookReady, setFacebookReady] = useState(false);
  const [loadingGoogle, setLoadingGoogle] = useState(true);

  // üî• FIXED: Proper VITE_ prefix
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;
  const FACEBOOK_APP_ID = import.meta.env.VITE_FACEBOOK_APP_ID;
  
  const isLocalhost = window.location.hostname === 'localhost';
  const isHTTPS = window.location.protocol === 'https:';
  const facebookAllowed = isHTTPS || isLocalhost;

  console.log('üîß SSO Debug:', {
    googleClientId: GOOGLE_CLIENT_ID ? `${GOOGLE_CLIENT_ID.substring(0, 20)}...` : 'MISSING',
    facebookAppId: FACEBOOK_APP_ID || 'MISSING',
    protocol: window.location.protocol,
    facebookAllowed,
    googleButtonRef: !!googleButtonRef.current
  });

  // üî• FIXED: Better Google initialization
  useEffect(() => {
    if (!GOOGLE_CLIENT_ID) {
      console.error('‚ùå VITE_GOOGLE_CLIENT_ID missing');
      setLoadingGoogle(false);
      return;
    }

    let attempts = 0;
    const maxAttempts = 50;

    const initGoogle = () => {
      attempts++;
      
      if (window.google?.accounts?.id) {
        try {
          console.log('üîß Initializing Google OAuth...');
          
          window.google.accounts.id.initialize({
            client_id: GOOGLE_CLIENT_ID,
            callback: handleGoogleResponse,
            auto_select: false,
            cancel_on_tap_outside: true,
          });

          // üî• FIXED: Force render after a delay to ensure DOM is ready
          setTimeout(() => {
            if (googleButtonRef.current) {
              try {
                window.google.accounts.id.renderButton(googleButtonRef.current, {
                  theme: 'outline',
                  size: 'large',
                  width: '100%',
                  text: 'continue_with',
                  shape: 'rectangular',
                  logo_alignment: 'left'
                });
                setGoogleReady(true);
                setLoadingGoogle(false);
                console.log('‚úÖ Google button rendered');
              } catch (renderError) {
                console.error('‚ùå Google button render error:', renderError);
                setLoadingGoogle(false);
              }
            } else {
              console.error('‚ùå Google button ref not available');
              setLoadingGoogle(false);
            }
          }, 100);

          console.log('‚úÖ Google OAuth initialized');
          return;
        } catch (error) {
          console.error('‚ùå Google init error:', error);
          setLoadingGoogle(false);
        }
      }

      if (attempts < maxAttempts) {
        setTimeout(initGoogle, 100);
      } else {
        console.error('‚ùå Google SDK failed to load after 5 seconds');
        setLoadingGoogle(false);
        onError('Google authentication unavailable');
      }
    };

    initGoogle();
  }, [GOOGLE_CLIENT_ID]);

  // Initialize Facebook
  useEffect(() => {
    if (!facebookAllowed) {
      console.log('‚ö†Ô∏è Facebook disabled - requires HTTPS');
      return;
    }

    let attempts = 0;
    const checkFB = () => {
      attempts++;
      
      if (window.fbReady && window.FB) {
        setFacebookReady(true);
        console.log('‚úÖ Facebook ready');
        return;
      }

      if (window.fbSkipped) {
        console.log('‚ö†Ô∏è Facebook SDK was skipped');
        return;
      }

      if (attempts < 50) {
        setTimeout(checkFB, 100);
      }
    };

    checkFB();
  }, [facebookAllowed]);

  const handleGoogleResponse = (response: any) => {
    try {
      console.log('üîë Google response:', response);
      
      if (!response.credential) {
        throw new Error('No credential from Google');
      }

      // Parse JWT payload
      const payload = JSON.parse(
        atob(response.credential.split('.')[1].replace(/-/g, '+').replace(/_/g, '/'))
      );
      
      console.log('üë§ Google user:', payload);
      onGoogleSuccess(response.credential, payload);
    } catch (error) {
      console.error('‚ùå Google auth error:', error);
      onError('Google authentication failed');
    }
  };

  const handleGoogleClick = () => {
    if (disabled) return;
    
    try {
      if (window.google?.accounts?.id) {
        window.google.accounts.id.prompt();
      } else {
        throw new Error('Google SDK not loaded');
      }
    } catch (error) {
      console.error('‚ùå Google prompt error:', error);
      onError('Failed to show Google login');
    }
  };

  const handleFacebookClick = () => {
    if (disabled || !facebookReady) return;
    
    if (!facebookAllowed) {
      onError('Facebook login requires HTTPS. Please use Google login instead.');
      return;
    }

    try {
      window.FB.login((response: any) => {
        console.log('üîë Facebook response:', response);
        
        if (response.authResponse) {
          window.FB.api('/me', { fields: 'name,email,first_name,last_name' }, (userInfo: any) => {
            console.log('üë§ Facebook user:', userInfo);
            onFacebookSuccess(response.authResponse.accessToken, userInfo);
          });
        } else {
          console.log('‚ùå Facebook login cancelled or failed');
          onError('Facebook login cancelled');
        }
      }, { scope: 'email,public_profile' });
    } catch (error) {
      console.error('‚ùå Facebook error:', error);
      onError('Facebook authentication failed');
    }
  };

  if (!GOOGLE_CLIENT_ID && !FACEBOOK_APP_ID) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-yellow-800 text-sm">
          ‚ö†Ô∏è Social authentication not configured
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      {/* Google Login */}
      {GOOGLE_CLIENT_ID && (
        <div className={disabled ? 'opacity-50 pointer-events-none' : ''}>
          {/* üî• FIXED: Always show the div, but conditionally render Google button or fallback */}
          <div ref={googleButtonRef} className="w-full min-h-[48px]" />
          
          {/* üî• FIXED: Fallback button if Google button doesn't render */}
          {!googleReady && !loadingGoogle && (
            <button
              onClick={handleGoogleClick}
              className="w-full flex items-center justify-center gap-3 bg-white border border-gray-300 hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg transition-colors"
            >
              <svg className="w-5 h-5" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Continue with Google
            </button>
          )}

          {/* Loading state */}
          {loadingGoogle && (
            <div className="w-full flex items-center justify-center py-3 text-gray-500">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-400 mr-2"></div>
              Loading Google...
            </div>
          )}
        </div>
      )}
      
      {/* Facebook Login - Simplified */}
      {FACEBOOK_APP_ID && (
        <button
          onClick={handleFacebookClick}
          disabled={!facebookAllowed || disabled}
          className="w-full flex items-center justify-center gap-3 bg-[#1877F2] hover:bg-[#166FE5] text-white font-semibold py-3 px-6 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
          </svg>
          {!facebookAllowed ? 'Facebook (HTTPS Required)' : 'Continue with Facebook'}
        </button>
      )}

      {/* Development warning */}
      {!facebookAllowed && (
        <p className="text-xs text-amber-600 text-center">
          ‚ö†Ô∏è Facebook requires HTTPS. Google login works on localhost.
        </p>
      )}
    </div>
  );
};

export default SocialAuth;



# ==== src/components/RegistrationGate.tsx ====

import React from 'react';
import { X, Crown, Sparkles, Users, Infinity } from 'lucide-react';
import type { UsageData } from '../types/index';
import SocialAuth from './SocialAuth';
import { FaceSwapAPI } from '../services/api';
import { useAuth } from '../hooks/useAuth';