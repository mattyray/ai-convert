

interface RegistrationGateProps {
  isOpen: boolean;
  onClose: () => void;
  onSignUp: () => void;
  onLogin: () => void;
  usage?: UsageData | null;
  lastFeatureAttempted?: 'match' | 'randomize';
}

const RegistrationGate: React.FC<RegistrationGateProps> = ({
  isOpen,
  onClose,
  usage,
  lastFeatureAttempted
}) => {
  const { login } = useAuth();

  if (!isOpen) return null;

  const getFeatureIcon = (feature?: string) => {
    switch (feature) {
      case 'match': return <Users className="w-6 h-6" />;
      case 'randomize': return <Sparkles className="w-6 h-6" />;
      default: return <Crown className="w-6 h-6" />;
    }
  };

  const handleGoogleSuccess = async (credential: string, userInfo: any) => {
    try {
      console.log('🔑 Google auth success:', userInfo);
      const response = await FaceSwapAPI.googleAuth(credential, userInfo);
      
      // 🔥 FIXED: Store token and update auth state
      localStorage.setItem('authToken', response.token);
      login(response.token, response.user);
      
      // 🔥 FIXED: Close modal and show success
      onClose();
      
      // 🔥 FIXED: Reload page to refresh all state
      window.location.reload();
      
    } catch (error) {
      console.error('Google auth failed:', error);
      alert('Google authentication failed. Please try again.');
    }
  };

  const handleFacebookSuccess = async (accessToken: string, userInfo: any) => {
    try {
      console.log('🔑 Facebook auth success:', userInfo);
      const response = await FaceSwapAPI.facebookAuth(accessToken, userInfo);
      
      // 🔥 FIXED: Store token and update auth state
      localStorage.setItem('authToken', response.token);
      login(response.token, response.user);
      
      // 🔥 FIXED: Close modal and show success
      onClose();
      
      // 🔥 FIXED: Reload page to refresh all state
      window.location.reload();
      
    } catch (error) {
      console.error('Facebook auth failed:', error);
      alert('Facebook authentication failed. Please try again.');
    }
  };

  const handleSocialAuthError = (error: string) => {
    console.error('Social auth error:', error);
    alert(`Authentication error: ${error}`);
  };

  const handleEmailSignup = () => {
    alert('Email signup coming soon! For now, please use Google.');
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="relative bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 rounded-t-2xl">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 text-white hover:text-gray-200 transition-colors"
          >
            <X size={24} />
          </button>
          
          <div className="text-center">
            <div className="flex items-center justify-center mb-3">
              <Crown className="w-8 h-8 text-yellow-300 mr-2" />
              <h2 className="text-2xl font-bold">Unlock Full Access</h2>
            </div>
            <p className="text-blue-100">
              Join to get unlimited transformations!
            </p>
          </div>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Usage Status */}
          {usage && (
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                {getFeatureIcon(lastFeatureAttempted)}
                Your Usage Summary
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Face Matches:</span>
                  <span className={`font-medium ${usage.can_match ? 'text-green-600' : 'text-red-600'}`}>
                    {usage.matches_used}/{usage.matches_limit}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Randomizes:</span>
                  <span className={`font-medium ${usage.can_randomize ? 'text-green-600' : 'text-red-600'}`}>
                    {usage.randomizes_used}/{usage.randomizes_limit}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Benefits */}
          <div className="mb-6">
            <h3 className="font-semibold text-gray-900 mb-4 text-center">
              ✨ What you'll get with an account:
            </h3>
            <div className="space-y-3">
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <Infinity className="w-4 h-4 text-green-600" />
                </div>
                <span>Unlimited face matching</span>
              </div>
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                  <Sparkles className="w-4 h-4 text-purple-600" />
                </div>
                <span>Unlimited randomize feature</span>
              </div>
              <div className="flex items-center gap-3 text-gray-700">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <Users className="w-4 h-4 text-blue-600" />
                </div>
                <span>Access to all historical figures</span>
              </div>
            </div>
          </div>

          {/* Social Auth Buttons */}
          <div className="space-y-4">
            <SocialAuth 
              onGoogleSuccess={handleGoogleSuccess}
              onFacebookSuccess={handleFacebookSuccess}
              onError={handleSocialAuthError}
            />
            
            <div className="text-center">
              <div className="text-sm text-gray-500 mb-2">or</div>
              <button
                onClick={handleEmailSignup}
                className="text-blue-600 hover:text-blue-800 text-sm font-medium"
              >
                Create account with email
              </button>
            </div>
          </div>

          {/* Footer */}
          <div className="text-center mt-6 pt-4 border-t border-gray-200">
            <p className="text-xs text-gray-500">
              Free to join • No credit card required • Start creating immediately
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegistrationGate;



# ==== src/components/FacebookShareButton.tsx ====

import React, { useState } from 'react';
import { Share2, CheckCircle } from 'lucide-react';
import type { FaceSwapResult } from '../types/index';

interface FacebookShareButtonProps {
  result: FaceSwapResult;
  className?: string;
}

const FacebookShareButton: React.FC<FacebookShareButtonProps> = ({ 
  result, 
  className = "" 
}) => {
  const [copyState, setCopyState] = useState<'idle' | 'copying' | 'copied'>('idle');

  const shareText = result.is_randomized 
    ? `🎭 I just transformed into ${result.match_name} using AI! Check out HistoryFace and see which historical figure you become! ✨`
    : `🎭 AI matched my face with ${result.match_name} (${(result.match_score * 100).toFixed(0)}% confidence)! Try HistoryFace and discover your historical twin! ✨`;

  const shareUrl = window.location.origin;
  const fullShareText = `${shareText}\n\n🌐 Try it: ${shareUrl}\n📸 My result: ${result.output_image_url}`;

  const handleShare = async () => {
    // 🔥 METHOD 1: Try Web Share API first (modern, works great on mobile)
    if (navigator.share) {
      try {
        await navigator.share({
          title: `I transformed into ${result.match_name}!`,
          text: shareText,
          url: shareUrl,
        });
        return; // Success, we're done
      } catch (error) {
        console.log('Web Share cancelled or failed, trying fallback');
      }
    }

    // 🔥 METHOD 2: Copy comprehensive text + open Facebook
    try {
      setCopyState('copying');
      await navigator.clipboard.writeText(fullShareText);
      setCopyState('copied');
      
      // Open Facebook after brief delay
      setTimeout(() => {
        const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
        window.open(facebookUrl, '_blank', 'width=600,height=500');
      }, 500);
      
      // Reset after 3 seconds
      setTimeout(() => setCopyState('idle'), 3000);
      
    } catch (error) {
      // 🔥 METHOD 3: Fallback - just open Facebook
      console.error('Clipboard failed, opening Facebook directly');
      const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
      window.open(facebookUrl, '_blank');
    }
  };

  const getButtonContent = () => {
    switch (copyState) {
      case 'copying':
        return (
          <>
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
            Preparing...
          </>
        );
      case 'copied':
        return (
          <>
            <CheckCircle size={20} />
            Text Copied! Opening Facebook...
          </>
        );
      default:
        return (
          <>
            <Share2 size={20} />
            Share to Facebook
          </>
        );
    }
  };

  return (
    <div className="space-y-2">
      <button
        onClick={handleShare}
        disabled={copyState === 'copying'}
        className={`flex items-center justify-center gap-2 bg-[#1877F2] hover:bg-[#166FE5] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-75 disabled:hover:scale-100 ${className}`}
      >
        {getButtonContent()}
      </button>
      
      {copyState === 'copied' && (
        <div className="text-xs text-gray-600 text-center animate-pulse">
          📋 Share text copied! Paste it in Facebook and add your image.
        </div>
      )}
    </div>
  );
};

export default FacebookShareButton;




# ==== src/components/UploadSection.tsx ====

import { Sparkles } from 'lucide-react';
import FileUpload from './FileUpload';
import RandomizeButton from './RandomizeButton';
import UsageIndicator from './UsageIndicator';
import HistoricalPreview from './HistoricalPreview';
import type { UsageData, UsageLimitError } from '../types/index';

interface UploadSectionProps {
  selectedFile: File | null;
  onFileSelect: (file: File) => void;
  onClearFile: () => void;
  onRegularMatch: () => void;
  onRandomize: () => void;
  onShowRegistrationGate: (error: UsageLimitError) => void;
  canUseMatch: boolean;
  usage: UsageData | null;
  usageLoading: boolean;
}

const UploadSection: React.FC<UploadSectionProps> = ({
  selectedFile,
  onFileSelect,
  onClearFile,
  onRegularMatch,
  onRandomize,
  onShowRegistrationGate,
  canUseMatch,
  usage,
  usageLoading
}) => {
  return (
    <div className="max-w-2xl mx-auto">
      <div className="text-center mb-8">
        <div className="flex items-center justify-center mb-4">
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 rounded-full p-3">
            <Sparkles className="w-8 h-8 text-white" />
          </div>
        </div>
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          AI Historical Face Swap
        </h1>
        <p className="text-xl text-gray-600 mb-6">
          Discover which historical figure you resemble and see yourself transformed!
        </p>
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-8">
          <p className="text-blue-800 text-sm">
            🎭 Our AI will analyze your facial features and match you with historical figures like Napoleon, Cleopatra, Leonardo da Vinci, and more!
          </p>
        </div>
      </div>

      {/* Usage Indicator */}
      {!usageLoading && usage && !usage.unlimited && (
        <UsageIndicator 
          usage={usage} 
          onShowRegistrationGate={onShowRegistrationGate} 
        />
      )}

      <FileUpload
        onFileSelect={onFileSelect}
        selectedFile={selectedFile}
        onClear={onClearFile}
      />

      {selectedFile && (
        <div className="mt-8 space-y-4">
          {/* Regular Match Button */}
          <div className="text-center">
            <button
              onClick={onRegularMatch}
              disabled={!canUseMatch}
              className={`text-lg px-8 py-4 rounded-lg font-semibold transition-all duration-200 flex items-center justify-center gap-3 mx-auto ${
                canUseMatch
                  ? 'btn-primary'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              <Sparkles size={20} />
              🔮 Find My Historical Twin
            </button>
            <p className="text-sm text-gray-500 mt-2">
              AI analyzes your face to find the best match
            </p>
          </div>

          {/* OR Divider */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">OR</span>
            </div>
          </div>

          {/* Randomize Button */}
          <RandomizeButton
            onRandomize={onRandomize}
            hasSelectedFile={!!selectedFile}
            usage={usage}
          />
        </div>
      )}

      <HistoricalPreview />
    </div>
  );
};

export default UploadSection;



# ==== src/components/ErrorBoundary.tsx ====

import { Component, type ErrorInfo, type ReactNode } from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
  }

  private handleReset = () => {
    this.setState({ hasError: false, error: undefined });
  };

  public render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
          <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8 text-center">
            <div className="flex items-center justify-center mb-6">
              <AlertTriangle className="w-16 h-16 text-red-500" />
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Something went wrong
            </h2>
            
            <p className="text-gray-600 mb-6">
              We encountered an unexpected error. Don't worry, your data is safe.
            </p>
            
            <div className="space-y-4">
              <button
                onClick={this.handleReset}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center gap-2"
              >
                <RefreshCw size={20} />
                Try Again
              </button>
              
              <button
                onClick={() => window.location.reload()}
                className="w-full bg-white hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg border border-gray-300 hover:border-gray-400 transition-colors"
              >
                Reload Page
              </button>
            </div>
            
            {import.meta.env.DEV && this.state.error && (
              <details className="mt-6 text-left">
                <summary className="text-sm text-gray-500 cursor-pointer hover:text-gray-700">
                  Technical Details
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-3 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;



# ==================== Assets & Styles ====================



# ==== src/App.css ====

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}




# ==== src/index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Reset and base styles */
* {
  box-sizing: border-box;
}

html, body, #root {
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Custom component classes */
@layer components {
  .btn-primary {
    @apply bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100;
  }
  
  .btn-secondary {
    @apply bg-white hover:bg-gray-50 text-gray-700 font-semibold py-3 px-6 rounded-lg border border-gray-300 hover:border-gray-400 transition-all duration-200 shadow-sm hover:shadow-md;
  }
  
  .btn-danger {
    @apply bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 shadow-lg hover:shadow-xl;
  }
}

/* Custom animations */
@keyframes pulse-slow {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-pulse-slow {
  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}



# ==== src/assets/react.svg ====

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>



# ==== public/vite.svg ====

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>



# ==== ./index.html ====

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HistoryFace - AI Historical Transformation</title>
    
    <!-- 🔥 UPDATED: Latest Open Graph Meta Tags -->
    <meta property="og:title" content="HistoryFace - AI Historical Transformation" />
    <meta property="og:description" content="Transform into historical figures with AI! See which historical personality you resemble most." />
    <meta property="og:image" content="https://ai-convert.netlify.app/og-preview.jpg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:url" content="https://ai-convert.netlify.app" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="HistoryFace" />
    <meta property="fb:app_id" content="1430950704695809" />
    
    <!-- Twitter Cards -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="HistoryFace - AI Historical Transformation" />
    <meta name="twitter:description" content="Transform into historical figures with AI!" />
    <meta name="twitter:image" content="https://ai-convert.netlify.app/og-preview.jpg" />
    
    <!-- Google Identity Services -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    
    <!-- 🔥 UPDATED: Facebook SDK v20.0 (Latest) -->
    <script>
      window.fbAsyncInit = function() {
        try {
          FB.init({
            appId: '1430950704695809',
            cookie: true,
            xfbml: true,
            version: 'v20.0'
          });
          window.fbReady = true;
          console.log('✅ Facebook SDK v20.0 initialized');
        } catch (error) {
          console.error('❌ Facebook SDK error:', error);
          window.fbSkipped = true;
        }
      };

      (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s); 
        js.id = id;
        
        const isSecure = location.protocol === 'https:' || location.hostname === 'localhost';
        if (isSecure) {
          js.src = "https://connect.facebook.net/en_US/sdk.js";
          js.onerror = () => { window.fbSkipped = true; };
          fjs.parentNode.insertBefore(js, fjs);
        } else {
          window.fbSkipped = true;
        }
      }(document, 'script', 'facebook-jssdk'));
    </script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



# ==================== Other Files ====================



# ==== ./Dockerfile ====

# backend/Dockerfile

FROM python:3.10.3-slim-bullseye

# Avoid prompts during install
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies only once
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    gfortran \
    git \
    libatlas-base-dev \
    libjpeg-dev \
    liblapack-dev \
    libswscale-dev \
    libavcodec-dev \
    libavformat-dev \
    libgtk2.0-dev \
    libpq-dev \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Pre-create working dir
WORKDIR /app

# 👇 Copy and install only requirements first (layer cache win)
COPY requirements.txt /app/
RUN pip install --no-cache-dir --upgrade pip wheel && \
    pip install --no-cache-dir numpy && \
    pip install --no-cache-dir dlib && \
    pip install --no-cache-dir face-recognition && \
    pip install --no-cache-dir -r requirements.txt

# Copy entire project
COPY . /app/

# Create necessary dirs for media/static
RUN mkdir -p /app/media/uploads/selfies /app/staticfiles

# Optional: run collectstatic here if needed
# RUN python manage.py collectstatic --noinput || echo "Skipping collectstatic"

# Non-root user
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check (optional)
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python3 -c "import requests; requests.get('http://localhost:8000/health/', timeout=10)" || exit 1

CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "300", "django_project.wsgi:application"]




# ==== ./README.md ====

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```




# ==== ./Dockerfile.dev ====

# Development Dockerfile for React frontend
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Expose port
EXPOSE 5173

# Start development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

