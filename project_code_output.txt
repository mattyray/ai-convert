===== Dockerfile =====
# Use official Python image as base
FROM python:3.10.4-slim-bullseye

# Set environment variables
ENV PIP_DISABLE_PIP_VERSION_CHECK 1
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /code

# Install dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run Gunicorn
CMD ["sh", "-c", "gunicorn django_project.wsgi --bind 0.0.0.0:${PORT:-8000}"]
===== docker-compose.yml =====
services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8001:8000"  # External port 8001 maps to internal port 8000


    depends_on:
      db:
        condition: service_healthy  # Ensures DB is ready before Django starts
    environment:
      - "DJANGO_DEBUG=True"
      - "DJANGO_SECURE_SSL_REDIRECT=False"
      - "DJANGO_SECURE_HSTS_SECONDS=0"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
      - "DJANGO_SECURE_HSTS_PRELOAD=False"
      - "DJANGO_SESSION_COOKIE_SECURE=False"
      - "DJANGO_CSRF_COOKIE_SECURE=False"
      - "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    volumes:
      - .:/code    # Mounts your project directory into the container
    networks:
      - art_moving_network

  db:
    image: postgres:15  # Upgraded to latest stable version
    container_name: matthew_raynor_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: art_moving
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres  # ✅ Secure authentication
    healthcheck:  # Ensures DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - art_moving_network

volumes:
  postgres_data:

networks:
  art_moving_network:
===== docker-compose-prod.yml =====
services:
  web:
    build: .
    command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "DJANGO_DEBUG=False"
      - "DJANGO_SECURE_SSL_REDIRECT=True"
      - "DJANGO_SECURE_HSTS_SECONDS=2592000"  # 30 days
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
      - "DJANGO_SECURE_HSTS_PRELOAD=True"
      - "DJANGO_SESSION_COOKIE_SECURE=True"
      - "DJANGO_CSRF_COOKIE_SECURE=True"
      - "PORT=8000"  # Needed for Heroku
      - "DATABASE_URL=${DATABASE_URL}"
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:
===== heroku.yml =====
build:
  docker:
    web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

release:
  image: web
  command:
    - python manage.py migrate  # Runs database migrations
    - python manage.py collectstatic --noinput  # Collects static files

run:
  web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app
===== requirements.txt =====
asgiref==3.8.1
crispy-bootstrap5==2024.10
diff-match-patch==20241021
Django==5.1.6
django-allauth==65.6.0
django-crispy-forms==2.3
django-environ==0.12.0
django-import-export==4.3.7
gunicorn==23.0.0
numpy==2.2.4
packaging==24.2
pandas==2.2.3
psycopg2-binary==2.9.10
python-dateutil==2.9.0.post0
pytz==2025.2
six==1.17.0
sqlparse==0.5.3
tablib==3.8.0
typing_extensions==4.13.0
tzdata==2025.2
whitenoise==6.9.0
Pillow==10.0.0
django-embed-video==1.4.10===== manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== accounts/models.py =====
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email


===== accounts/views.py =====
from django.urls import reverse_lazy
from django.views import generic
from django.contrib.auth import logout, get_user_model
from django.shortcuts import redirect, render
from .forms import CustomUserCreationForm, CustomUserChangeForm
from django.contrib.auth import login
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView
from django.views.generic.edit import UpdateView

def custom_logout(request):
    """Logs out the user and redirects to the homepage."""
    print("🚀 custom_logout was called!")
    request.session.flush()  # Clears session data manually
    logout(request)
    return redirect("/")  # Redirect to the root URL explicitly

class SignupPageView(generic.CreateView):
    form_class = CustomUserCreationForm
    success_url = reverse_lazy("account_login")  # Redirect to login page after sign-up
    template_name = "account/signup.html"

class DashboardView(LoginRequiredMixin, TemplateView):
    template_name = "account/dashboard.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Example: Pass profile info, orders, and reviews
        # context['orders'] = Order.objects.filter(user=self.request.user)
        # context['reviews'] = Review.objects.filter(user=self.request.user)
        return context


class ProfileEditView(LoginRequiredMixin, UpdateView):
    model = get_user_model()
    form_class = CustomUserChangeForm
    template_name = "account/profile_edit.html"
    success_url = reverse_lazy("dashboard")

    def get_object(self):
        return self.request.user




===== accounts/forms.py =====
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'


===== accounts/urls.py =====
from django.urls import path, include
from django.contrib.auth import views as auth_views

from .views import SignupPageView, DashboardView, custom_logout, ProfileEditView

urlpatterns = [
    path('signup/', SignupPageView.as_view(), name='signup'),
    path('login/', include('allauth.urls')),  # or your custom login view
    path('dashboard/', DashboardView.as_view(), name='dashboard'),
    path('profile/edit/', ProfileEditView.as_view(), name='profile_edit'),
    path('logout/', custom_logout, name='logout'),
        path(
        'password/change/',
        auth_views.PasswordChangeView.as_view(template_name='account/password_change.html'),
        name='password_change'
    ),
    path(
        'password/change/done/',
        auth_views.PasswordChangeDoneView.as_view(template_name='account/password_change_done.html'),
        name='password_change_done'
    ),
]


===== accounts/admin.py =====
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser
    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')
    list_filter = ('is_staff', 'is_active')
    ordering = ('email',)
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal Info', {'fields': ('first_name', 'last_name')}),
        ('Permissions', {'fields': ('is_staff', 'is_active')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password1', 'password2', 'is_staff', 'is_active'),
        }),
    )

admin.site.register(CustomUser, CustomUserAdmin)


===== pages/models.py =====
from django.db import models

# Create your models here.


===== pages/views.py =====
from django.views.generic import TemplateView
from blog.models import Post  # For recent blog posts on the homepage

class HomePageView(TemplateView):
    template_name = 'home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["recent_posts"] = Post.objects.filter(is_published=True).order_by('-updated_date')[:3]
        return context


class PressPageView(TemplateView):
    template_name = "pages/press.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["press_articles"] = [
            {
                "title": "Matthew Raynor Finds A New Lease On Life Through Art",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-finds-a-new-lease-on-life-through-art-1506186/",
                "summary": "Explores your transition into photography and art exhibitions as a form of healing and purpose.",
                "image_url": "https://image.27east.com/2019/08/8.15x10.65_BackofBoat2.jpg"
            },
            {
                "title": "Matthew Raynor Photography At Southampton Cultural Center",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-photography-at-southampton-cultural-center-1738556/",
                "summary": "Highlights your stunning drone and seascape photography exhibit at the SCC, blending grit and serenity.",
                "image_url": "https://image.27east.com/2020/11/Matt-Raynor-beautifulbirch-scaled.jpg"
            },
            {
                "title": "Before and After: Matt Raynor’s Life and Its Unexpected Turns",
                "source": "27East",
                "link": "https://www.27east.com/southampton-press/before-and-after-matt-raynors-life-and-its-unexpected-turns-chronicled-in-new-photography-book-2294539/",
                "summary": "Covers your memoir 'Before Me<>After Me,' sharing your powerful personal transformation through imagery.",
                "image_url": "https://image.27east.com/2024/10/party-1.jpg"
            },
            {
                "title": "Matthew Raynor Exhibits His Art at LTV Studios",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-exhibits-his-art-at-ltv-studios-2249981/",
                "summary": "Your LTV Studios debut showcasing new aluminum prints, textures, and emotional storytelling through art.",
                "image_url": "https://image.27east.com/2024/05/Matt-Raynor-Boardwalk.jpg"
            },
            {
                "title": "Man Paralyzed While Diving Has No Health Aide: 'This Is A Crisis'",
                "source": "Patch",
                "link": "https://patch.com/new-york/westhampton-hamptonbays/man-paralyzed-while-diving-has-no-health-aide-crisis",
                "summary": "A heartbreaking look at the challenges you faced accessing in-home care following your accident.",
                "image_url": "https://patch.com/img/cdn20/users/1296254/20190912/061810/styles/patch_image/public/matt___12164446739.jpg?width=1200"
            },
            {
                "title": "Man Paralyzed In Diving Accident Finds Hope In Art — But Needs Help",
                "source": "Patch",
                "link": "https://patch.com/new-york/westhampton-hamptonbays/man-paralyzed-diving-accident-finds-hope-art-needs-help",
                "summary": "Details your emotional and creative healing journey while raising awareness for support needs.",
                "image_url": "https://patch.com/img/cdn20/users/1296254/20230421/085742/styles/patch_image/public/matthewraynor___21200506825.jpg?width=1200"
            },
            {
                "title": "Get Matty Ray Back On The Bay",
                "source": "Dan’s Papers",
                "link": "https://www.danspapers.com/2019/07/get-matty-ray-back-on-the-bay/",
                "summary": "Early community support feature spotlighting your recovery and the fundraiser to aid your journey.",
                "image_url": "https://www.danspapers.com/wp-content/uploads/2020/11/matt-raynor-benefit.jpg"
            },
            {
                "title": "The Matthew Raynor Story (PechaKucha Presentation)",
                "source": "PechaKucha",
                "link": "https://www.pechakucha.com/presentations/the-matthew-raynor-story",
                "summary": "A visual storytelling presentation of your journey from fisherman to artist to speaker.",
                "image_url": ""  # You can use a placeholder here or skip the image conditionally in the template
            },
            {
                "title": "Matt Raynor: A Creative Journey",
                "source": "MILK Books",
                "link": "https://www.milkbooks.com/blog/your-stories/matt-raynor-a-creative-journey/",
                "summary": "A deeply personal narrative exploring how art, writing, and resilience fueled your transformation.",
                "image_url": "https://cdn.milkbooks.com/media/20640/5_2x.webp"
            },
        ]
        return context


===== pages/urls.py =====
from django.urls import path
from .views import HomePageView, PressPageView

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),  # Ensure this exists!
    path("press/", PressPageView.as_view(), name="press"),
    
    
    
]


===== pages/admin.py =====
from django.contrib import admin

# Register your models here.


===== blog/models.py =====
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.text import slugify
from embed_video.fields import EmbedVideoField  # Import the embed video field

User = get_user_model()

class Post(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True, blank=True)
    content = models.TextField()
    video = EmbedVideoField(blank=True, null=True)  # New field for video embeds (e.g., TikTok)
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="blog_posts")
    is_published = models.BooleanField(default=False)
    published_date = models.DateTimeField(null=True, blank=True)
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-published_date']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super(Post, self).save(*args, **kwargs)

    def __str__(self):
        return self.title

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name="comments")
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    name = models.CharField(max_length=255, blank=True)
    email = models.EmailField(blank=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    approved = models.BooleanField(default=False)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        if self.user:
            return f"Comment by {self.user} on {self.post}"
        return f"Comment by {self.name} on {self.post}"


===== blog/views.py =====
from django.urls import reverse
from django.views.generic import ListView, DetailView
from django.views.generic.edit import FormMixin
from .models import Post, Comment
from .forms import CommentForm

class PostListView(ListView):
    model = Post
    template_name = "blog/post_list.html"
    context_object_name = "posts"

    def get_queryset(self):
        return Post.objects.filter(is_published=True)

class PostDetailView(FormMixin, DetailView):
    model = Post
    template_name = "blog/post_detail.html"
    context_object_name = "post"
    form_class = CommentForm

    def get_success_url(self):
        return reverse("post_detail", kwargs={"slug": self.object.slug})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.get_form()
        context['comments'] = self.object.comments.filter(approved=True)
        return context

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        form = self.get_form()
        if form.is_valid():
            return self.form_valid(form)
        else:
            return self.form_invalid(form)

    def form_valid(self, form):
        comment = form.save(commit=False)
        comment.post = self.object
        if self.request.user.is_authenticated:
            comment.user = self.request.user
        comment.approved = True  # Automatically approve for now
        comment.save()
        return super().form_valid(form)


===== blog/forms.py =====
from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        # If you require authenticated users only, you might only need the content field.
        # Otherwise, include name and email.
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Leave a comment...'}),
        }


===== blog/urls.py =====
from django.urls import path
from .views import PostListView, PostDetailView

urlpatterns = [
    path('', PostListView.as_view(), name='post_list'),
    path('<slug:slug>/', PostDetailView.as_view(), name='post_detail'),
]


===== blog/admin.py =====
from django.contrib import admin
from .models import Post, Comment

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('title', 'author', 'is_published', 'published_date', 'video')
    prepopulated_fields = {'slug': ('title',)}
    search_fields = ('title', 'content')
    list_filter = ('is_published', 'published_date')
    fields = ('title', 'slug', 'content', 'video', 'author', 'is_published', 'published_date')

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('post', 'user', 'created_at', 'approved')
    list_filter = ('approved', 'created_at')
    search_fields = ('content',)


===== portfolio/models.py =====
from django.db import models

# Create your models here.


===== portfolio/views.py =====
from django.views.generic import TemplateView
from django.http import Http404

PROJECTS = [
    {
        "title": "EJ Art Moving App",
        "slug": "art-mover",
        "hero_image": "images/projects/art-mover.jpg",
        "description": "A sleek logistics dashboard for managing clients, work orders, and invoices.",
        "overview": "A production-grade business dashboard for an art moving company, complete with scheduling, PDF invoicing, and a dynamic calendar.",
        "tech_stack": {
            "backend": ["Django 5", "Python 3.10", "PostgreSQL", "Docker"],
            "frontend": ["Bootstrap 5", "Crispy Forms", "FullCalendar", "Flatpickr", "Select2"],
            "deployment": ["Docker Compose", "Heroku", "Whitenoise"],
            "tools": ["django-environ", "django-import-export"]
        },
        "problems_solved": [
            "Digitized manual scheduling and invoicing",
            "Visual overview of work orders via FullCalendar",
            "Centralized client, job, and invoice management"
        ],
        "special_features": [
            "Dynamic AJAX invoice creation from client work orders",
            "PDF invoice generation and calendar event syncing",
            "Inline formsets and lazy model references to avoid circular imports"
        ],
        "improvements": [
            "Integrate Stripe or QuickBooks for real payment processing",
            "Add search and filters for completed jobs and past invoices"
        ],
        "proud_of": [
            "Overcame circular model dependencies",
            "Built a real-time calendar with interactive event links"
        ],
        "showcase": "An advanced business app built solo, handling real-world logistics, billing, and scheduling."
    },
    {
        "title": "Freedom Fundraiser Website",
        "slug": "fundraiser",
        "hero_image": "images/projects/fundraiser.jpg",
        "description": "A donation-based campaign platform with embedded video, blog, and outreach.",
        "overview": "Created to support my move out of a nursing home, this campaign site includes a motivational blog, caregiver outreach, and donation CTAs.",
        "tech_stack": {
            "backend": ["Django", "Python", "PostgreSQL"],
            "frontend": ["Bootstrap 5", "Crispy Forms"],
            "deployment": ["Docker", "Heroku", "Whitenoise"],
            "tools": ["django-environ", "YouTube Embed", "Mailchimp (planned)"]
        },
        "problems_solved": [
            "Unified storytelling, fundraising, and updates in one hub",
            "Raised awareness and caregiver interest via CDPAP outreach"
        ],
        "special_features": [
            "Embedded YouTube campaign video with autoplay",
            "Integrated blog from the fundraiser app with admin post editor"
        ],
        "improvements": [
            "Integrate real payment gateway (Stripe or PayPal)",
            "Add comment moderation and CAPTCHA"
        ],
        "proud_of": [
            "Deployed the entire project using Docker and Heroku",
            "Bilingual outreach increased community engagement"
        ],
        "showcase": "Represents personal growth, storytelling, and full-stack deployment."
    },
    {
        "title": "MatthewRaynor.com",
        "slug": "matthew-raynor",
        "hero_image": "images/projects/matthewraynor.jpg",
        "description": "My flagship website combining my story, blog, art store, and technical portfolio.",
        "overview": "A personal brand site where all my passions intersect — tech, writing, art, and accessibility.",
        "tech_stack": {
            "backend": ["Django 5.1.6", "Python 3.10", "PostgreSQL"],
            "frontend": ["Bootstrap 5", "SCSS", "Flatpickr", "FullCalendar"],
            "deployment": ["Docker", "Heroku (Container Stack)", "Whitenoise"],
            "tools": ["Allauth", "Crispy Forms", "django-environ"]
        },
        "problems_solved": [
            "Needed one site to host my store, blog, portfolio, and press",
            "Reduced reliance on platforms like Shopify or Medium"
        ],
        "special_features": [
            "Custom user model + Allauth integration",
            "Chatbot scaffold, press hub, gallery section, blog, and store"
        ],
        "improvements": [
            "Add cart, checkout, and testimonial display",
            "Enable global search and newsletter signup"
        ],
        "proud_of": [
            "Built a fully modular, multi-app Django system",
            "Reflects my resilience and technical versatility"
        ],
        "showcase": "The foundation of my brand and proof of my end-to-end web dev skills."
    },
    {
        "title": "Matt’s Bookstore API",
        "slug": "bookstore",
        "hero_image": "images/projects/bookstore.jpg",
        "description": "A Django REST API bookstore project with Google SSO, reviews, and deployment.",
        "overview": "An API-first bookstore web app with full CRUD for books, ratings, search, and Docker-based deployment.",
        "tech_stack": {
            "backend": ["Django", "DRF", "Python 3.12"],
            "frontend": ["Bootstrap 5", "Crispy Forms"],
            "deployment": ["Docker", "Heroku", "Whitenoise"],
            "tools": ["Allauth", "django-environ"]
        },
        "problems_solved": [
            "Learned DRF by building real API endpoints",
            "Handled book reviews, search, and secure login"
        ],
        "special_features": [
            "UUID and slug-based URLs",
            "Secure reviews via permission classes",
            "Search filtering using Django Q objects"
        ],
        "improvements": [
            "Add frontend search bar and filters",
            "Convert to SPA with Vue or React"
        ],
        "proud_of": [
            "Handled Docker + DRF + PostgreSQL integration solo",
            "Built full book management pipeline"
        ],
        "showcase": "A clean, REST-based bookstore for testing API design and secure auth."
    },
]

class PortfolioView(TemplateView):
    template_name = "portfolio/index.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["projects"] = PROJECTS
        return context

class ProjectDetailView(TemplateView):
    template_name = "portfolio/detail.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        slug = self.kwargs.get("slug")
        project = next((p for p in PROJECTS if p["slug"] == slug), None)
        if not project:
            raise Http404("Project not found")
        context["project"] = project
        return context


===== portfolio/urls.py =====
from django.urls import path
from .views import PortfolioView, ProjectDetailView

urlpatterns = [
    path("", PortfolioView.as_view(), name="portfolio"),
    path("<slug:slug>/", ProjectDetailView.as_view(), name="project_detail"),
]


===== portfolio/admin.py =====
from django.contrib import admin

# Register your models here.


===== django_project/settings.py =====
from environ import Env
from pathlib import Path
import os

# Initialize environment variables
env = Env()
Env.read_env()

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ Security settings
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Required for Heroku

# Secret Key & Debug Mode
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# ✅ Allowed Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost",
    "127.0.0.1",
])

# ✅ Installed Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
   # 'django.contrib.sites',  


    # Custom apps
    'accounts.apps.AccountsConfig',
    'pages.apps.PagesConfig',
    'store.apps.StoreConfig',
    'blog.apps.BlogConfig',
    'portfolio.apps.PortfolioConfig',



    # Third-party packages
    'crispy_forms',
    'crispy_bootstrap5',
    'import_export',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'embed_video',


]

# ✅ Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Add this line
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# ✅ URL Configuration
ROOT_URLCONF = 'django_project.urls'

# ✅ Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Include custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ✅ WSGI Application
WSGI_APPLICATION = 'django_project.wsgi.application'

# ✅ Database Configuration
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}


# ✅ Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'

# ✅ Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ✅ Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # 👈 crucial for collectstatic to find non-app static files
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ✅ Default Primary Key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ✅ Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ✅ Login & Logout
 

# ✅ Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

IMPORT_EXPORT_USE_TRANSACTIONS = True
SITE_ID = 1


ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"



ACCOUNT_EMAIL_VERIFICATION = 'optional'  # or 'optional' based on your preference
LOGIN_REDIRECT_URL = '/'  # or wherever you want to redirect after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = "/" 

===== django_project/urls.py =====
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include("accounts.urls")),         # Custom signup and logout routes
    path("accounts/", include("allauth.urls")),            # Django-allauth handles login, signup, etc.
    path("blog/", include("blog.urls")),                   # Blog URLs
    path("", include("pages.urls")),                       
    path("store/", include("store.urls")),
    path("portfolio/", include("portfolio.urls")),

]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


===== django_project/asgi.py =====
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_asgi_application()


===== django_project/wsgi.py =====
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_wsgi_application()


===== templates/home.html =====
{% extends "base.html" %}
{% load static %}
{% load embed_video_tags %}

{% block title %}Matthew Raynor – Home{% endblock %}


{% block content %}
<div class="container-fluid p-0">
  
  <!-- HERO SECTION -->
  <section class="hero text-white text-center d-flex align-items-center position-relative" style="background: url('{% static 'images/hero.png' %}') center/cover no-repeat; height: 90vh;">
    <!-- Overlay -->
    <div class="position-absolute top-0 start-0 w-100 h-100" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1;"></div>
  
    <!-- Content -->
    <div class="container position-relative z-2">
      <div class="p-4 rounded-4 bg-dark bg-opacity-50 shadow-lg d-inline-block">
        <h1 class="display-4 fw-bold text-shadow">From Sea to Source Code</h1>
        <p class="lead">Writer • Developer • Artist • Entertainer</p>
        <a href="{% url 'store_overview' %}" class="btn btn-primary btn-lg mt-3">Explore My Store</a>
        <a href="{% url 'post_list' %}" class="btn btn-outline-light btn-lg mt-3 ms-2">Check the V/Blog</a>
      </div>
    </div>
  </section>
  

  <!-- MY STORY -->
  <section class="py-5 bg-light">
    <div class="container">
      <div class="row align-items-center">
        <div class="col-md-6 mb-4 mb-md-0">
          <img src="{% static 'images/matthew_portrait.png' %}" class="img-fluid rounded shadow" alt="Matthew Raynor Portrait">
        </div>
        <div class="col-md-6">
          <h2 class="fw-bold">My Journey</h2>
          <p class="lead">Once a commercial fisherman, I became quadriplegic after a life-altering injury. But I turned pain into purpose, teaching myself to code with a stylus, building apps, and inspiring others through writing and art.</p>
          <a href="{% url 'post_list' %}" class="btn btn-outline-primary">Read More</a>
        </div>
      </div>
    </div>
  </section>

  <!-- FEATURED BOOK & ART -->
  <section class="py-5">
    <div class="container text-center">
      <h2 class="fw-bold mb-4">Featured Shop</h2>
      <div class="row justify-content-center">
        <div class="col-md-4 mb-3">
          <div class="card h-100 shadow">
            <img src="{% static 'images/book_cover.jpg' %}" class="card-img-top" alt="Before Me After Me">
            <div class="card-body">
              <h5 class="card-title">Before Me After Me</h5>
              <p class="card-text">My memoir of resilience, technology, and transformation.</p>
              <a href="{% url 'product_detail' 'before-me-after-me' %}" class="btn btn-primary">Buy the Book</a>
            </div>
          </div>
        </div>
        <div class="col-md-4 mb-3">
          <div class="card h-100 shadow">
            <img src="{% static 'images/art_sample.jpg' %}" class="card-img-top" alt="Aluminum Artwork">
            <div class="card-body">
              <h5 class="card-title">Aluminum Prints</h5>
              <p class="card-text">Oceanic photography infused with strength and serenity.</p>
              <a href="{% url 'store_overview' %}" class="btn btn-outline-primary">View Artwork</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- PORTFOLIO PREVIEW -->
  <section class="py-5 bg-light">
    <div class="container">
      <h2 class="text-center fw-bold mb-4">My Development Projects</h2>
      <div class="row text-center">
        <div class="col-md-4">
          <h5 class="fw-bold">Art Mover App</h5>
          <p>Logistics tool for scheduling and invoicing art shipments.</p>
        </div>
        <div class="col-md-4">
          <h5 class="fw-bold">Bookstore API</h5>
          <p>REST-powered Django API with authentication and rating system.</p>
        </div>
        <div class="col-md-4">
          <h5 class="fw-bold">Fundraiser Website</h5>
          <p>Dynamic site with embedded video, donations, and blogging tools.</p>
        </div>
      </div>
      <div class="text-center mt-4">
        <a href="#" class="btn btn-outline-dark">View Full Portfolio</a>
      </div>
    </div>
  </section>

  <!-- BLOG PREVIEW -->
  <section class="py-5">
    <div class="container">
      <h2 class="text-center fw-bold mb-4">Recent Blog Posts</h2>
      <p class="lead text-center">My hilarious and entertaining videos paired with inspirational writing</p>

      <div class="row">
        {% for post in recent_posts %}
          <div class="col-md-4 mb-4">
            <div class="card h-100 shadow-sm">
              {% if post.video %}
                <div class="ratio ratio-16x9">
                  {% video post.video 'small' %}
                </div>
              {% else %}
                <img src="https://source.unsplash.com/400x250/?technology,writing" class="card-img-top" alt="Blog Image">
              {% endif %}
              <div class="card-body">
                <h5 class="card-title">
                  <a href="{% url 'post_detail' post.slug %}" class="text-decoration-none text-dark fw-bold">
                    {{ post.title }}
                  </a>
                </h5>
                <p class="text-muted">Updated on {{ post.updated_date|date:"F d, Y" }}</p>
                <p class="card-text">{{ post.content|truncatewords:25 }}</p>
                <a href="{% url 'post_detail' post.slug %}" class="btn btn-outline-primary">Read More</a>
              </div>
            </div>
          </div>
        {% empty %}
          <p class="text-center">No posts yet. Stay tuned!</p>
        {% endfor %}
      </div>

      <div class="text-center mt-4">
        <a href="{% url 'post_list' %}" class="btn btn-primary">Go to Blog</a>
      </div>
    </div>
  </section>


  <section class="py-5 position-relative text-center" style="background-color: rgba(255, 248, 225, 0.85);">
    <div class="container text-dark">
      <h2 class="fw-bold">Let’s Connect</h2>
      <p class="mb-4">Got questions about my work? Need a website? Need an application? Need custom photography?</p>
      <a href="#" class="btn btn-primary btn-lg">Contact Me</a>
    </div>
  </section>
  
{% endblock %}


===== templates/base.html =====
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}MatthewRaynor.com{% endblock %}</title>

  <!-- Favicon -->
  <link rel="icon" type="image/png" sizes="64x64" href="{% static 'images/icon.png' %}">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="{% static 'css/custom.css' %}">

  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&family=Montserrat:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">


  <!-- Flatpickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

  <!-- Custom CSS -->
  <link rel="stylesheet" href="{% static 'css/style.css' %}">

  {% block extra_css %}
  <style>
    /* Reduce the icon size to match text height */
    .nav-icon {
      height: 40px;
      margin-right: 10px;
    }
  </style>
  {% endblock %}
</head>
<body>
  <!-- Desktop Navbar: Visible only on large screens -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-crunchy d-none d-lg-flex">
    <div class="container">
      <!-- Brand -->
      <a class="navbar-brand fw-bold" href="{% url 'home' %}">
        <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
        <span class="brand-text">Matthew Raynor</span>
      </a>
      <!-- Navbar Items -->
      <div class="collapse navbar-collapse" id="navbarDesktop">
        <ul class="navbar-nav ms-3 me-auto">
          <li class="nav-item"><a class="nav-link" href="{% url 'post_list' %}">V/Blog</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'portfolio' %}">Portfolio</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'press' %}">Press</a></li>
          <li class="nav-item"><a class="nav-link" href="#">Contact</a></li>
          <li class="nav-item store"><a class="nav-link" href="{% url 'store_overview' %}">Store</a></li>
        </ul>
        <!-- Search Bar -->
        <form class="d-flex me-3">
          <input class="form-control search-input" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-light" type="submit">Search</button>
        </form>
        <!-- Authentication Links -->
        <ul class="navbar-nav">
          {% if user.is_authenticated %}
            <li class="nav-item"><a class="nav-link" href="{% url 'dashboard' %}">Dashboard</a></li>
            <li class="nav-item"><a class="nav-link" href="{% url 'logout' %}">Logout</a></li>
          {% else %}
            <li class="nav-item"><a class="nav-link" href="{% url 'account_login' %}">Login</a></li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>

  <!-- Mobile Navbar & Offcanvas Trigger: Visible only on small screens -->
  <div class="d-lg-none">
    <nav class="navbar navbar-dark bg-crunchy">
      <div class="container">
        <a class="navbar-brand fw-bold" href="{% url 'home' %}">
          <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
          <span class="brand-text">Matthew Raynor</span>
        </a>
        <button class="btn btn-outline-light" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSidebar"
                aria-controls="offcanvasSidebar">
          Menu
        </button>
      </div>
    </nav>
  </div>

  <!-- Mobile Offcanvas Sidebar -->
  <div class="offcanvas offcanvas-start d-lg-none" tabindex="-1" id="offcanvasSidebar" aria-labelledby="offcanvasSidebarLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="offcanvasSidebarLabel">
        <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
        <span class="brand-text">Matthew Raynor</span>
      </h5>
      <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      <ul class="list-unstyled">
        <li><a class="offcanvas-link" href="#">Blog</a></li>
        <li><a class="offcanvas-link" href="#">Portfolio</a></li>
        <li><a class="offcanvas-link" href="#">Press</a></li>
        <li><a class="offcanvas-link" href="#">Contact</a></li>
        <li class="divider">|</li>
        <li><a class="offcanvas-link" href="#">Store</a></li>
      </ul>
      <div class="mt-3">
        <form class="d-flex">
          <input class="form-control" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-light" type="submit">Search</button>
        </form>
      </div>
      <div class="mt-3">
        {% if user.is_authenticated %}
          <a class="btn btn-outline-light w-100" href="{% url 'dashboard' %}">Dashboard</a>
          <a class="btn btn-outline-light w-100 mt-2" href="{% url 'logout' %}">Logout</a>
        {% else %}
          <a class="btn btn-outline-light w-100" href="{% url 'account_login' %}">Login</a>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="container mt-4">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="mt-4 bg-crunchy text-white text-center py-3">
    <div class="container">
      <p class="mb-0">&copy; {% now "Y" %} MatthewRaynor.com</p>
    </div>
  </footer>

  <!-- AI Assistant Chat Widget -->
  <div id="ai-chatbot" class="chat-widget">
    <div id="ai-chatbot-header" class="chat-header">
      AI Assistant
      <span id="ai-chatbot-close" class="chat-close">&times;</span>
    </div>
    <div id="ai-chatbot-body" class="chat-body">
      <p>Hello! How can I assist you today?</p>
    </div>
    <div id="ai-chatbot-input" class="chat-input">
      <input type="text" placeholder="Type your message..." class="form-control">
    </div>
  </div>
  <button id="ai-chatbot-toggle" class="btn chat-toggle">Chat</button>

  <!-- JS Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  {% block extra_js %}{% endblock %}
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      flatpickr(".datepicker", { dateFormat: "Y-m-d" });
      document.querySelectorAll(".select2").forEach(el => {
        $(el).select2({ width: "100%" });
      });
    });
    $(document).ready(function() {
      $('#ai-chatbot-toggle').click(function() {
        $('#ai-chatbot').toggle();
      });
      $('#ai-chatbot-close').click(function() {
        $('#ai-chatbot').hide();
      });
    });
  </script>
</body>
</html>


===== templates/blog/post_list.html =====
{% extends 'base.html' %}
{% load static %} 
{% load embed_video_tags %}

{% block title %}Blog - Updates & Stories{% endblock %}

{% block content %}
<div class="container mt-5">
    <h1 class="text-center fw-bold">Latest Blog Posts</h1>
    <p class="lead text-center">Follow my journey and stay updated.</p>

    <div class="row">
        {% for post in posts %}
        <div class="col-md-12 mb-4">
            <div class="card shadow-sm">
                <div class="row g-0 align-items-center">
                    <!-- Video Section -->
                    <div class="col-md-4">
                        <div class="ratio ratio-16x9">
                            {% if post.video %}
                                {% video post.video 'small' %}
                            {% else %}
                                <img src="https://source.unsplash.com/400x250/?technology,writing" class="img-fluid rounded-start" alt="Blog Image">
                            {% endif %}
                        </div>
                    </div>

                    <!-- Blog Info Section -->
                    <div class="col-md-8">
                        <div class="card-body">
                            <h4 class="card-title">
                                <a href="{% url 'post_detail' post.slug %}" class="text-dark text-decoration-none fw-bold">{{ post.title }}</a>
                            </h4>
                            <p class="text-muted">Published on {{ post.created_at|date:"F d, Y" }}</p>
                            <p>{{ post.content|truncatewords:30 }}</p>
                            <a href="{% url 'post_detail' post.slug %}" class="btn btn-outline-primary">Read More</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {% empty %}
        <p class="text-center">No blog posts yet. Stay tuned!</p>
        {% endfor %}
    </div>
</div>
{% endblock %}


===== templates/blog/post_detail.html =====
{% extends 'base.html' %}
{% load static %} 
{% load embed_video_tags %}
{% load crispy_forms_tags %}


{% block title %}{{ post.title }} - Blog{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-body">
            <h1 class="fw-bold">{{ post.title }}</h1>
            <p class="text-muted">Published on {{ post.created_at|date:"F d, Y" }}</p>

            <!-- Video Section -->
            {% if post.video %}
            <div class="ratio ratio-16x9 my-3">
                {% video post.video 'large' %}
            </div>
            {% endif %}

            <!-- Blog Content -->
            <p class="lead">{{ post.content }}</p>

            <!-- Back to Blog Button -->
            <a href="{% url 'post_list' %}" class="btn btn-secondary mt-3">Back to Blog</a>
        </div>
    </div>
    
    <!-- Comments Section -->
    <div class="mt-4">
        <h3>Comments</h3>
        {% if comments %}
            <ul class="list-unstyled">
                {% for comment in comments %}
                    <li class="mb-3">
                        <strong>{% if comment.user %}{{ comment.user }}{% else %}{{ comment.name }}{% endif %}</strong> said:
                        <p>{{ comment.content|linebreaks }}</p>
                        <small class="text-muted">{{ comment.created_at|date:"M d, Y H:i" }}</small>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>No comments yet. Be the first to comment!</p>
        {% endif %}
        
        <h4 class="mt-4">Leave a Comment</h4>
        <form method="post">
            {% csrf_token %}
            {{ form|crispy }}
            <button type="submit" class="btn btn-primary">Submit Comment</button>
        </form>
    </div>
</div>
{% endblock %}


===== templates/portfolio/index.html =====
{% extends "base.html" %}
{% load static %}  <!-- ✅ Add this line to use the static tag -->

{% block title %}Portfolio - Matthew Raynor{% endblock %}

{% block content %}
<div class="container mt-5">
  <h1 class="fw-bold mb-4">My Portfolio</h1>
  <div class="row">
    {% for project in projects %}
    <div class="col-md-4 mb-4">
      <div class="card h-100 shadow-sm">

        <!-- Thumbnail Image in 4:3 Ratio -->
        <div class="ratio ratio-4x3">
            <img src="{% static project.hero_image %}" class="card-img-top object-fit-cover" alt="{{ project.title }}">
        </div>

        <div class="card-body">
          <h5 class="card-title">{{ project.title }}</h5>
          <p class="card-text">{{ project.description|truncatewords:20 }}</p>
          <a href="{% url 'project_detail' project.slug %}" class="btn btn-outline-primary">View Project</a>
        </div>
      </div>
    </div>
    {% endfor %}
  </div>
</div>
{% endblock %}


===== templates/portfolio/detail.html =====
{% extends "base.html" %}
{% load static %}

{% block title %}{{ project.title }} – Case Study | Matthew Raynor{% endblock %}

{% block content %}
<div class="container my-5">

  <!-- Top Title & CTA -->
  <div class="text-center mb-4">
    <h1 class="display-5 fw-bold">{{ project.title }}</h1>
    <p class="lead text-muted">{{ project.description }}</p>

    <div class="mt-3">
      {% if project.live_url %}
        <a href="{{ project.live_url }}" target="_blank" class="btn btn-success btn-lg me-2">
          🌍 View Live
        </a>
      {% endif %}
      {% if project.github_url %}
        <a href="{{ project.github_url }}" target="_blank" class="btn btn-outline-dark btn-lg">
          💻 GitHub Code
        </a>
      {% endif %}
    </div>
  </div>

  <!-- Hero Image -->
  {% if project.hero_image %}
    <div class="text-center mb-5">
      <div class="shadow rounded overflow-hidden mx-auto" style="max-width: 960px;">
        <img src="{% static project.hero_image %}" class="img-fluid" alt="{{ project.title }}">
      </div>
    </div>
  {% endif %}

  <!-- Narrative Overview -->
  {% if project.overview %}
    <div class="mb-5">
      <h3 class="fw-bold">📌 What This Project Is</h3>
      <p class="fs-5">{{ project.overview }}</p>
    </div>
  {% endif %}

  <!-- Tech Stack -->
  {% if project.tech_stack %}
    <div class="mb-5">
      <h3 class="fw-bold">🛠️ Tech Stack</h3>
      <p class="text-muted">Here’s a breakdown of the tools and libraries used in this project, categorized by layer:</p>
      <div class="row">
        {% for section, tools in project.tech_stack.items %}
          <div class="col-md-6 mb-3">
            <div class="card border-light shadow-sm h-100">
              <div class="card-body">
                <h5 class="card-title text-capitalize">{{ section|title }}</h5>
                <ul class="list-unstyled mb-0">
                  {% for tool in tools %}
                    <li>✅ {{ tool }}</li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  {% endif %}

  <!-- Problem & Solution -->
  <div class="row mb-5">
    {% if project.problem %}
    <div class="col-md-6">
      <h3 class="fw-bold">🧩 The Problem</h3>
      <p>{{ project.problem }}</p>
    </div>
    {% endif %}
    {% if project.solution %}
    <div class="col-md-6">
      <h3 class="fw-bold">💡 The Solution</h3>
      <p>{{ project.solution }}</p>
    </div>
    {% endif %}
  </div>

  <!-- Feature Highlights -->
  {% if project.special_features %}
    <div class="mb-5">
      <h3 class="fw-bold">✨ Special Features</h3>
      <p class="text-muted">These are the standout components or integrations that elevate this project beyond a simple CRUD app.</p>
      <ul class="list-group list-group-flush">
        {% for feature in project.special_features %}
          <li class="list-group-item">🌟 {{ feature }}</li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  <!-- Real-World Problems Solved -->
  {% if project.problems_solved %}
    <div class="mb-5">
      <h3 class="fw-bold">🎯 Real-World Problems Solved</h3>
      <p class="text-muted">Here’s how this project made a difference for its intended users or audience.</p>
      <ul class="list-group list-group-flush">
        {% for problem in project.problems_solved %}
          <li class="list-group-item">🔧 {{ problem }}</li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  <!-- Build Notes -->
  {% if project.build_notes %}
    <div class="mb-5">
      <h3 class="fw-bold">📚 Build Notes & Architecture</h3>
      <div class="p-3 border-start border-4 border-primary bg-light-subtle rounded">
        {{ project.build_notes|safe }}
      </div>
    </div>
  {% endif %}

  <!-- Improvements -->
  {% if project.improvements %}
    <div class="mb-5">
      <h3 class="fw-bold">🚧 What I'd Improve</h3>
      <p class="text-muted">Every build has room to grow. Here's what I'd refine if I rebuilt this today:</p>
      <ul class="list-group list-group-flush">
        {% for improvement in project.improvements %}
          <li class="list-group-item">🛠 {{ improvement }}</li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  <!-- Personal Achievements -->
  {% if project.proud_of %}
    <div class="mb-5">
      <h3 class="fw-bold">🏅 What I'm Proud Of</h3>
      <ul class="list-group list-group-flush">
        {% for item in project.proud_of %}
          <li class="list-group-item">🌈 {{ item }}</li>
        {% endfor %}
      </ul>
    </div>
  {% endif %}

  <!-- Final CTA Buttons -->
  <div class="text-center mt-5">
    {% if project.live_url %}
      <a href="{{ project.live_url }}" target="_blank" class="btn btn-success btn-lg me-2">
        🌍 Visit Live Site
      </a>
    {% endif %}
    {% if project.github_url %}
      <a href="{{ project.github_url }}" target="_blank" class="btn btn-outline-dark btn-lg">
        💻 View GitHub Repo
      </a>
    {% endif %}
  </div>

</div>
{% endblock %}


===== templates/account/profile_edit.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Edit Profile - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Edit Profile</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </form>
    <p class="mt-3"><a href="{% url 'dashboard' %}">Back to Dashboard</a></p>
</div>
{% endblock %}


===== templates/account/login.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Login{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Login</h2>
    <p>Debug: Login Template Loaded</p>

    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    <p class="mt-3">Don't have an account? <a href="{% url 'signup' %}">Sign up here</a>.</p>
</div>
{% endblock %}


===== templates/account/dashboard.html =====
{% extends "base.html" %}
{% block title %}Dashboard - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Welcome, {{ user.email }}</h2>
    <div class="row">
        <div class="col-md-6">
            <h3>Profile Information</h3>
            <p><strong>Name:</strong> {{ user.first_name }} {{ user.last_name }}</p>
            <p><strong>Email:</strong> {{ user.email }}</p>
            <!-- Future: Include avatar if available -->
            <a href="{% url 'profile_edit' %}" class="btn btn-secondary">Edit Profile</a>
        </div>
        <div class="col-md-6">
            <h3>Account Settings</h3>
    #      <p><a href="{% url 'account_change_password' %}">Change Password</a></p>
            <!-- Additional account options can be added here -->
        </div>
    </div>

    <hr>

    <div class="row">
        <div class="col-md-6">
            <h3>Order History</h3>
            {% if orders %}
                <ul>
                {% for order in orders %}
                    <li>Order #{{ order.id }}: {{ order.total_price }}</li>
                {% endfor %}
                </ul>
            {% else %}
                <p>No orders yet.</p>
            {% endif %}
        </div>
        <div class="col-md-6">
            <h3>Submitted Reviews</h3>
            {% if reviews %}
                <ul>
                {% for review in reviews %}
                    <li>{{ review.product.name }}: {{ review.rating }} stars</li>
                {% endfor %}
                </ul>
            {% else %}
                <p>No reviews submitted yet.</p>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}


===== templates/account/password_change_done.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Password Changed - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Password Successfully Changed</h2>
    <p>Your password has been updated. You may now <a href="{% url 'dashboard' %}">return to your dashboard</a> or continue browsing.</p>
</div>
{% endblock %}


===== templates/account/password_change.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Change Password - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Change Password</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
    <p class="mt-3"><a href="{% url 'dashboard' %}">Back to Dashboard</a></p>
</div>
{% endblock %}


===== templates/account/signup.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Sign Up{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Sign Up</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Sign Up</button>
    </form>
    <p class="mt-3">Already have an account? <a href="{% url 'account_login' %}">Login here</a>.</p>
</div>
{% endblock %}


===== templates/pages/press.html =====
{% extends "base.html" %}
{% block title %}Press - Matthew Raynor{% endblock %}

{% block content %}
<section class="press-section">
  <div class="container">
    <h2 class="section-title">In the Press</h2>
    <p class="section-subtitle">
      Stories, interviews, and articles that highlight my journey—from life on the water to life behind the screen. These features celebrate resilience, creativity, and the power of community.
    </p>

    <div class="row">
      {% for article in press_articles %}
      <div class="col-md-6 col-lg-4 mb-4">
        <div class="press-card card h-100 shadow-sm border-0 d-flex flex-column">
          {% if article.image_url %}
            <!---->

            <div class="press-image-wrapper">
                <img src="{{ article.image_url }}" class="card-img-top" alt="{{ article.title }}">
            </div>
              

          {% endif %}
          <div class="card-body d-flex flex-column">
            <h5 class="card-title">{{ article.title }}</h5>
            <p class="source"><small>{{ article.source }}</small></p>
            <p class="card-text flex-grow-1">{{ article.summary }}</p>
            <a href="{{ article.link }}" class="btn btn-primary mt-3" target="_blank" rel="noopener noreferrer">Read Full Article</a>
          </div>
        </div>
      </div>
      {% endfor %}
    </div>
  </div>
</section>
{% endblock %}


===== templates/store/product_detail.html =====
{% extends "base.html" %}
{% block title %}{{ product.title }} - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
  <div class="row">
    <div class="col-md-6">
      {% if product.image %}
        <img src="{{ product.image.url }}" class="img-fluid" alt="{{ product.title }}">
      {% endif %}
    </div>
    <div class="col-md-6">
      <h2>{{ product.title }}</h2>
      <p>{{ product.description }}</p>
      <h4>${{ product.price }}</h4>
      <p><strong>Stock:</strong> {{ product.stock }}</p>
      {% if product.product_type == 'artwork' and product.collection %}
        <p><strong>Collection:</strong> 
          <a href="{% url 'collection_detail' product.collection.slug %}">
            {{ product.collection.name }}
          </a>
        </p>
      {% endif %}
      <!-- Placeholder for "Add to Cart" functionality -->
      <a href="#" class="btn btn-success">Add to Cart</a>
    </div>
  </div>
</div>
{% endblock %}


===== templates/store/store_overview.html =====
{% extends "base.html" %}
{% block title %}Store Overview - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
  <h2 class="mb-4">Store Overview</h2>
  
  <!-- Books Section -->
  <section>
    <h3>Books</h3>
    <div class="row">
      {% for book in books %}
        <div class="col-md-4">
          <div class="card mb-4">
            {% if book.image %}
              <img src="{{ book.image.url }}" class="card-img-top" alt="{{ book.title }}">
            {% endif %}
            <div class="card-body">
              <h5 class="card-title">{{ book.title }}</h5>
              <p class="card-text">${{ book.price }}</p>
              <a href="{% url 'product_detail' book.slug %}" class="btn btn-primary">View Details</a>
            </div>
          </div>
        </div>
      {% empty %}
        <p>No books available.</p>
      {% endfor %}
    </div>
  </section>
  
  <!-- Artwork Collections Section -->
  <section class="mt-5">
    <h3>Artwork Collections</h3>
    <div class="row">
      {% for collection in collections %}
        <div class="col-md-4">
          <div class="card mb-4">
            {% if collection.cover_image %}
              <img src="{{ collection.cover_image.url }}" class="card-img-top" alt="{{ collection.name }}">
            {% endif %}
            <div class="card-body">
              <h5 class="card-title">{{ collection.name }}</h5>
              <p class="card-text">{{ collection.description|truncatewords:20 }}</p>
              <a href="{% url 'collection_detail' collection.slug %}" class="btn btn-primary">View Collection</a>
            </div>
          </div>
        </div>
      {% empty %}
        <p>No artwork collections available.</p>
      {% endfor %}
    </div>
  </section>
</div>
{% endblock %}


===== templates/store/collection_detail.html =====
{% extends "base.html" %}
{% block title %}{{ collection.name }} - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
  <h2>{{ collection.name }}</h2>
  {% if collection.cover_image %}
    <img src="{{ collection.cover_image.url }}" class="img-fluid mb-4" alt="{{ collection.name }}">
  {% endif %}
  <p>{{ collection.description }}</p>
  
  <hr>
  
  <h3>Artwork in this Collection</h3>
  <div class="row">
    {% for artwork in artworks %}
      <div class="col-md-4">
        <div class="card mb-4">
          {% if artwork.image %}
            <img src="{{ artwork.image.url }}" class="card-img-top" alt="{{ artwork.title }}">
          {% endif %}
          <div class="card-body">
            <h5 class="card-title">{{ artwork.title }}</h5>
            <p class="card-text">${{ artwork.price }}</p>
            <a href="{% url 'product_detail' artwork.slug %}" class="btn btn-primary">View Details</a>
          </div>
        </div>
      </div>
    {% empty %}
      <p>No artworks available in this collection.</p>
    {% endfor %}
  </div>
</div>
{% endblock %}
