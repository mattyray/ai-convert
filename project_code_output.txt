===== Dockerfile =====
# Use official Python image as base
FROM python:3.10.4-slim-bullseye

# Set environment variables
ENV PIP_DISABLE_PIP_VERSION_CHECK 1
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set work directory
WORKDIR /code

# Install dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run Gunicorn
CMD ["sh", "-c", "gunicorn django_project.wsgi --bind 0.0.0.0:${PORT:-8000}"]
===== docker-compose.yml =====
services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8001:8000"  # External port 8001 maps to internal port 8000


    depends_on:
      db:
        condition: service_healthy  # Ensures DB is ready before Django starts
    environment:
      - "DJANGO_DEBUG=True"
      - "DJANGO_SECURE_SSL_REDIRECT=False"
      - "DJANGO_SECURE_HSTS_SECONDS=0"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
      - "DJANGO_SECURE_HSTS_PRELOAD=False"
      - "DJANGO_SESSION_COOKIE_SECURE=False"
      - "DJANGO_CSRF_COOKIE_SECURE=False"
      - "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    volumes:
      - .:/code    # Mounts your project directory into the container
    networks:
      - art_moving_network

  db:
    image: postgres:15  # Upgraded to latest stable version
    container_name: matthew_raynor_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: art_moving
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres  # âœ… Secure authentication
    healthcheck:  # Ensures DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - art_moving_network

volumes:
  postgres_data:

networks:
  art_moving_network:
===== docker-compose-prod.yml =====
services:
  web:
    build: .
    command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "DJANGO_DEBUG=False"
      - "DJANGO_SECURE_SSL_REDIRECT=True"
      - "DJANGO_SECURE_HSTS_SECONDS=2592000"  # 30 days
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
      - "DJANGO_SECURE_HSTS_PRELOAD=True"
      - "DJANGO_SESSION_COOKIE_SECURE=True"
      - "DJANGO_CSRF_COOKIE_SECURE=True"
      - "PORT=8000"  # Needed for Heroku
      - "DATABASE_URL=${DATABASE_URL}"
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:
===== heroku.yml =====
build:
  docker:
    web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

release:
  image: web
  command:
    - python manage.py migrate  # Runs database migrations
    - python manage.py collectstatic --noinput  # Collects static files

run:
  web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app
===== requirements.txt =====
asgiref==3.8.1
crispy-bootstrap5==2024.10
diff-match-patch==20241021
Django==5.1.6
django-allauth==65.6.0
django-crispy-forms==2.3
django-environ==0.12.0
django-import-export==4.3.7
gunicorn==23.0.0
numpy==2.2.4
packaging==24.2
pandas==2.2.3
psycopg2-binary==2.9.10
python-dateutil==2.9.0.post0
pytz==2025.2
six==1.17.0
sqlparse==0.5.3
tablib==3.8.0
typing_extensions==4.13.0
tzdata==2025.2
whitenoise==6.9.0
===== manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== accounts/models.py =====
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email


===== accounts/views.py =====
from django.urls import reverse_lazy
from django.views import generic
from django.contrib.auth import logout
from django.shortcuts import redirect, render
from .forms import CustomUserCreationForm
from django.contrib.auth import login
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView

def custom_logout(request):
    """Logs out the user and redirects to the homepage."""
    print("ðŸš€ custom_logout was called!")
    request.session.flush()  # Clears session data manually
    logout(request)
    return redirect("/")  # Redirect to the root URL explicitly

class SignupPageView(generic.CreateView):
    """Handles user sign-up using Djangoâ€™s built-in authentication system."""
    form_class = CustomUserCreationForm
    success_url = reverse_lazy("login")  # Redirect to login page after sign-up
    template_name = "account/signup.html"



class DashboardView(LoginRequiredMixin, TemplateView):
    template_name = "account/dashboard.html"

===== accounts/forms.py =====
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'


===== accounts/urls.py =====
from django.urls import path
from .views import DashboardView, SignupPageView, custom_logout

urlpatterns = [
    path("signup/", SignupPageView.as_view(), name="signup"),
    path("logout/", custom_logout, name="logout"),
    path("dashboard/", DashboardView.as_view(), name="dashboard"),
]


===== accounts/admin.py =====
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser
    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')
    list_filter = ('is_staff', 'is_active')
    ordering = ('email',)
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal Info', {'fields': ('first_name', 'last_name')}),
        ('Permissions', {'fields': ('is_staff', 'is_active')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password1', 'password2', 'is_staff', 'is_active'),
        }),
    )

admin.site.register(CustomUser, CustomUserAdmin)


===== pages/models.py =====
from django.db import models

# Create your models here.


===== pages/views.py =====
# from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView

# class HomePageView(LoginRequiredMixin, TemplateView):
class HomePageView(TemplateView):  # ðŸ‘ˆ No login required
    template_name = 'home.html'


===== pages/urls.py =====
from django.urls import path
from .views import HomePageView

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),  # Ensure this exists!
]


===== pages/admin.py =====
from django.contrib import admin

# Register your models here.


===== django_project/settings.py =====
from environ import Env
from pathlib import Path
import os

# Initialize environment variables
env = Env()
Env.read_env()

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# âœ… Security settings
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Required for Heroku

# Secret Key & Debug Mode
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# âœ… Allowed Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost",
    "127.0.0.1",
])

# âœ… Installed Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom apps
    'accounts.apps.AccountsConfig',
    'pages.apps.PagesConfig',

    # Third-party packages
    'crispy_forms',
    'crispy_bootstrap5',
    'import_export',
    'allauth',
    'allauth.account',
    'allauth.socialaccount'

]

# âœ… Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Add this line
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# âœ… URL Configuration
ROOT_URLCONF = 'django_project.urls'

# âœ… Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Include custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# âœ… WSGI Application
WSGI_APPLICATION = 'django_project.wsgi.application'

# âœ… Database Configuration
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}


# âœ… Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'

# âœ… Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# âœ… Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # ðŸ‘ˆ crucial for collectstatic to find non-app static files
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# âœ… Default Primary Key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# âœ… Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# âœ… Login & Logout
 

# âœ… Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

IMPORT_EXPORT_USE_TRANSACTIONS = True
SITE_ID = 1


ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"



ACCOUNT_EMAIL_VERIFICATION = 'optional'  # or 'optional' based on your preference
LOGIN_REDIRECT_URL = '/'  # or wherever you want to redirect after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = "/" 

===== django_project/urls.py =====
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include("accounts.urls")),         # Custom signup and logout routes
    path("accounts/", include("allauth.urls")),  # Django-allauth handles login, signup, etc.
    path("", include("pages.urls")),           

]


if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)




===== django_project/asgi.py =====
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_asgi_application()


===== django_project/wsgi.py =====
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_wsgi_application()


===== templates/registration/logout.html =====
{% extends "base.html" %}

{% block title %}Logout{% endblock %}

{% block content %}
<div class="container text-center mt-4">
    <h2>You have been logged out</h2>
    <a href="{% url 'login' %}" class="btn btn-primary">Login Again</a>
</div>
{% endblock %}


===== templates/home.html =====
{% extends "base.html" %}
{% block title %}Welcome â€“ MatthewRaynor.com{% endblock %}
{% block content %}
<div class="container my-4">
  <!-- Hero Section -->
  <div class="text-center mb-5">
    <h1 class="fw-bold">Welcome to MatthewRaynor.com</h1>
    <p class="lead">Discover inspirational content, shop unique artwork and books, and explore my development portfolio.</p>
  </div>

  <!-- Key Areas Section -->
  <div class="row text-center">
    <!-- Blog Card: Use btn-outline-info for blue -->
    <div class="col-md-4 mb-4">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Blog</h3>
          <p class="card-text">Inspirational writing & updates to spark your creativity.</p>
          <a href="#" class="btn btn-outline-info">Explore Blog</a>
        </div>
      </div>
    </div>
    <!-- Store Card: Use btn-outline-warning for orange -->
    <div class="col-md-4 mb-4">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Store</h3>
          <p class="card-text">Shop my book and unique artwork, curated just for you.</p>
          <a href="#" class="btn btn-outline-warning">Visit Store</a>
        </div>
      </div>
    </div>
    <!-- Portfolio Card: We'll keep this as btn-outline-primary (green) -->
    <div class="col-md-4 mb-4">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Portfolio</h3>
          <p class="card-text">Discover my development projects and creative endeavors.</p>
          <a href="#" class="btn btn-outline-primary">View Portfolio</a>
        </div>
      </div>
    </div>
  </div>
  
  <div class="row text-center">
    <!-- Press & Gallery Card -->
    <div class="col-md-6 mb-4">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Press & Gallery</h3>
          <p class="card-text">Read about media coverage and view highlights of my artwork and events.</p>
          <a href="#" class="btn btn-outline-danger">View Press</a>
        </div>
      </div>
    </div>
    <!-- Newsletter Card -->
    <div class="col-md-6 mb-4">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h3 class="card-title">Newsletter</h3>
          <p class="card-text">Sign up for our newsletter to stay updated with the latest news and insights.</p>
          <a href="#" class="btn btn-newsletter">Subscribe Now</a>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// AI Chatbot Integration
document.addEventListener("DOMContentLoaded", function() {
  // Toggle Chatbot Widget
  document.getElementById('ai-chatbot-toggle').addEventListener('click', function() {
    var chatbot = document.getElementById('ai-chatbot');
    if (chatbot.style.display === 'none' || chatbot.style.display === '') {
      chatbot.style.display = 'block';
    } else {
      chatbot.style.display = 'none';
    }
  });
  
  // Close Button for Chatbot
  document.getElementById('ai-chatbot-close').addEventListener('click', function() {
    document.getElementById('ai-chatbot').style.display = 'none';
  });
});
</script>
{% endblock %}


===== templates/base.html =====
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}MatthewRaynor.com{% endblock %}</title>

  <!-- Favicon linking to home -->
  <a href="{% url 'home' %}">
    <link rel="icon" type="image/png" sizes="64x64" href="{% static 'images/icon-64x64.png' %}">
  </a>

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="{% static 'css/custom.css' %}">

  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">

  <!-- Flatpickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

  <!-- Custom CSS -->
  <link rel="stylesheet" href="{% static 'css/style.css' %}">

  {% block extra_css %}
  <style>
    .nav-icon {
      height: 60px;
      margin-right: 10px;
    }
  </style>
  {% endblock %}
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <div class="d-flex align-items-center">
        <!-- Clicking the image returns to home -->
        <a href="{% url 'home' %}">
          <img src="{% static 'images/nav-icon-128x128.png' %}" alt="Site Icon" class="nav-icon">
        </a>
        <a class="btn btn-outline-light me-2" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSidebar" role="button" aria-controls="offcanvasSidebar">
          Menu
        </a>
        <!-- Navbar brand also links to home -->
        <a class="navbar-brand fw-bold" href="{% url 'home' %}">Matthew Raynor</a>
      </div>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
              aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link fw-bold" href="#">Store</a></li>
          <li class="nav-item"><a class="nav-link fw-bold" href="#">Blog</a></li>
          <li class="nav-item"><a class="nav-link fw-bold" href="#">Portfolio</a></li>
          <li class="nav-item"><a class="nav-link fw-bold" href="#">Press</a></li>
          <li class="nav-item"><a class="nav-link fw-bold" href="#">Contact</a></li>
          {% if user.is_authenticated %}
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'dashboard' %}">Dashboard</a></li>
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'logout' %}">Logout</a></li>
          {% else %}
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'account_login' %}">Login</a></li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>

  <!-- Offcanvas Sidebar -->
  <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasSidebar" aria-labelledby="offcanvasSidebarLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="offcanvasSidebarLabel">Navigation</h5>
      <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      <div class="list-group">
        <div class="mb-3">
          <h6 class="text-uppercase">Explore</h6>
          <!-- Home link added -->
          <a href="{% url 'home' %}" class="btn btn-outline-primary btn-sm d-block mb-1">Home</a>
          <a href="#" class="btn btn-outline-primary btn-sm d-block mb-1">Blog</a>
          <a href="#" class="btn btn-outline-primary btn-sm d-block mb-1">Portfolio</a>
          <a href="#" class="btn btn-outline-primary btn-sm d-block mb-1">Press</a>
          <a href="#" class="btn btn-outline-primary btn-sm d-block mb-1">Contact</a>
          {% if user.is_authenticated %}
            <a href="{% url 'dashboard' %}" class="btn btn-outline-primary btn-sm d-block mb-1">Dashboard</a>
          {% endif %}
        </div>
        <div>
          <h6 class="text-uppercase">Shop</h6>
          <a href="#" class="btn btn-outline-success btn-sm d-block mb-1">View Store</a>
          <a href="#" class="btn btn-outline-success btn-sm d-block">Leave a Review</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="container mt-4">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <footer class="mt-4 bg-dark text-white text-center py-3">
    <div class="container">
      <p class="mb-0">&copy; {% now "Y" %} MatthewRaynor.com</p>
    </div>
  </footer>

  <!-- JS Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  {% block extra_js %}{% endblock %}
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      flatpickr(".datepicker", { dateFormat: "Y-m-d" });
      const selects = document.querySelectorAll(".select2");
      selects.forEach(el => {
        $(el).select2({ width: "100%" });
      });
    });
  </script>

  <!-- AI Assistant Chat Widget -->
  <div id="ai-chatbot" style="position: fixed; bottom: 80px; right: 20px; width: 320px; height: 400px; background: white; border: 1px solid #ddd; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.2); display: none; z-index: 1000;">
    <div id="ai-chatbot-header" style="background: #007bff; color: white; padding: 10px; cursor: pointer;">
      AI Assistant
      <span id="ai-chatbot-close" style="float: right; cursor: pointer;">&times;</span>
    </div>
    <div id="ai-chatbot-body" style="padding: 10px; height: calc(100% - 60px); overflow-y: auto;">
      <!-- Chat messages will appear here -->
      <p>Hello! How can I assist you today?</p>
    </div>
    <div id="ai-chatbot-input" style="padding: 10px;">
      <input type="text" placeholder="Type your message..." style="width: 100%; padding: 5px;">
    </div>
  </div>
  <button id="ai-chatbot-toggle" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;" class="btn btn-primary">Chat</button>
  
  <script>
    // Use jQuery for simple toggling of the chat widget
    $(document).ready(function() {
      $('#ai-chatbot-toggle').click(function() {
        $('#ai-chatbot').toggle();
      });
      $('#ai-chatbot-close').click(function() {
        $('#ai-chatbot').hide();
      });
    });
  </script>
</body>
</html>


===== templates/account/login.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Login{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Login</h2>
    <p>Debug: Login Template Loaded</p>

    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    <p class="mt-3">Don't have an account? <a href="{% url 'signup' %}">Sign up here</a>.</p>
</div>
{% endblock %}


===== templates/account/dashboard.html =====
{% extends "base.html" %}
{% block title %}Dashboard - MatthewRaynor.com{% endblock %}
{% block content %}
<div class="container mt-4">
    <h2>Welcome, {{ user.email }}</h2>
    <p>Here you can view your account details, order history, and more.</p>
    <!-- Add additional dashboard content as needed -->
</div>
{% endblock %}


===== templates/account/signup.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Sign Up{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Sign Up</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Sign Up</button>
    </form>
    <p class="mt-3">Already have an account? <a href="{% url 'account_login' %}">Login here</a>.</p>
</div>
{% endblock %}
