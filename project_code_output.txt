===== Docker & Deployment =====
# Use official Python image as base
FROM python:3.10.4-slim-bullseye

# Set environment variables
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /code

# Install dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run Gunicorn by default
CMD ["gunicorn", "django_project.wsgi", "--bind", "0.0.0.0:${PORT:-8000}"]

services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8001:8000"  # External port 8001 maps to internal port 8000
    depends_on:
      db:
        condition: service_healthy  # Ensures DB is ready before Django starts
    env_file:
      - .env  # ✅ Loads your .env file into the container

    volumes:
      - .:/code  # Mounts your code into the container
    networks:
      - art_moving_network

  db:
    image: postgres:15  # Latest stable version
    container_name: matthew_raynor_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - art_moving_network

volumes:
  postgres_data:

networks:
  art_moving_network:

services:
  web:
    build: .
    command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env  # ✅ Load all secrets from .env
    environment:
      - "DJANGO_DEBUG=False"
      - "DJANGO_SECURE_SSL_REDIRECT=True"
      - "DJANGO_SECURE_HSTS_SECONDS=2592000"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
      - "DJANGO_SECURE_HSTS_PRELOAD=True"
      - "DJANGO_SESSION_COOKIE_SECURE=True"
      - "DJANGO_CSRF_COOKIE_SECURE=True"
      - "PORT=8000"

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:

build:
  docker:
    web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

release:
  image: web
  command:
    - python manage.py migrate --fake-initial
    - python manage.py migrate  # Runs database migrations
    - python manage.py collectstatic --noinput  # Collects static files

run:
  web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app

web: gunicorn django_project.wsgi --log-file -


===== Requirements =====
annotated-types==0.7.0
anyio==4.9.0
asgiref==3.8.1
certifi==2025.4.26
cffi==1.17.1
charset-normalizer==3.4.2
cloudinary==1.44.0
crispy-bootstrap5==2024.10
cryptography==44.0.3
diff-match-patch==20241021
distro==1.9.0
Django==5.1.6
django-allauth==65.6.0
django-ckeditor==6.7.2
django-cloudinary-storage==0.3.0
django-crispy-forms==2.3
django-embed-video==1.4.10
django-environ==0.12.0
django-extensions==4.1
django-import-export==4.3.7
django-js-asset==3.1.2
django-recaptcha==4.1.0
et_xmlfile==2.0.0
exceptiongroup==1.3.0
gunicorn==23.0.0
h11==0.16.0
httpcore==1.0.9
httpx==0.28.1
idna==3.10
jiter==0.9.0
numpy==2.2.4
openai==1.78.1
openpyxl==3.1.5
packaging==24.2
pandas==2.2.3
pandas-stubs==2.2.3.250308
Pillow==10.0.0
psycopg2-binary==2.9.10
pycparser==2.22
pydantic>=2.6,<2.10
PyJWT==2.10.1
python-dateutil==2.9.0.post0
pytz==2025.2
requests==2.32.3
six==1.17.0
sniffio==1.3.1
sqlparse==0.5.3
stripe==12.0.1
tablib==3.8.0
tqdm==4.67.1
types-pytz==2025.2.0.20250326
typing-inspection==0.4.0
typing_extensions==4.13.0
tzdata==2025.2
urllib3==2.4.0
whitenoise==6.9.0

-r requirements.txt

flake8==7.2.0
flake8-bandit==4.1.1
mypy==1.15.0
mypy_extensions==1.1.0
pytest==8.3.5
pytest-django==4.11.1
safety==3.5.0
safety-schemas==0.0.14


===== manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_project.settings.dev")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== Django Settings =====

===== django_project/settings/base.py =====
from environ import Env
from pathlib import Path
import os
import stripe
print("💥 settings.py loaded from latest build")


# Initialize environment variables
env = Env()
Env.read_env()

# Stripe keys
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUBLISHABLE_KEY', default='pk_test_dummy')
STRIPE_SECRET_KEY = env('STRIPE_SECRET_KEY', default='sk_test_dummy')
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK_SECRET', default='whsec_dummy')

stripe.api_key = STRIPE_SECRET_KEY

OPENAI_API_KEY = env("OPENAI_API_KEY", default="")


# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Allowed hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost",
    "127.0.0.1",
    "0.0.0.0",
    "web",
    "matthew-raynor-site-3d5f17c6a796.herokuapp.com",
    "matthewraynor.com",
    "www.matthewraynor.com",
])

# Installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',

    # Custom apps
    'accounts.apps.AccountsConfig',
    'pages.apps.PagesConfig',
    'store.apps.StoreConfig',
    'blog.apps.BlogConfig',
    'portfolio.apps.PortfolioConfig',
    'chat.apps.ChatConfig',

    # Third-party
    'django.contrib.sites',
    'crispy_forms',
    'crispy_bootstrap5',
    'import_export',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'embed_video',
    'django_recaptcha',
    'django_extensions',
    'ckeditor',
    'ckeditor_uploader',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# URL config
ROOT_URLCONF = 'django_project.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.parent / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}

# Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
SITE_ID = env.int("DJANGO_SITE_ID", default=1)
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = "email"
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'
LOGIN_REDIRECT_URL = '/accounts/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Google SSO credentials from .env
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': env('GOOGLE_CLIENT_ID', default='test-client-id'),
            'secret': env('GOOGLE_CLIENT_SECRET', default='test-secret'),
            'key': ''
        }
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR.parent / "static"]
STATIC_ROOT = BASE_DIR.parent / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media (Cloudinary)
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Staticfiles finders
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# reCAPTCHA
SILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']
RECAPTCHA_PUBLIC_KEY = env("RECAPTCHA_PUBLIC_KEY", default="test")
RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY", default="test")


# Email
EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.locmem.EmailBackend")
EMAIL_HOST = env("EMAIL_HOST", default="smtp.test.com")
EMAIL_PORT = env.int("EMAIL_PORT", default=587)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="test@test.com")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="testpassword")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="noreply@test.com")


# Production security
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Import-export
IMPORT_EXPORT_USE_TRANSACTIONS = True

# Auto field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Full',
        'height': 300,
        'width': 'auto',
        'extraPlugins': ','.join([
            'uploadimage', 'image2', 'embed', 'autoembed', 'codesnippet',
        ]),
    }
}

===== django_project/settings/dev.py =====
from .base import *

DEBUG = True

# Use Stripe test key or fallback
STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY", default="pk_test_dummy")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY", default="sk_test_dummy")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET", default="whsec_dummy")

stripe.api_key = STRIPE_SECRET_KEY

===== django_project/settings/prod.py =====
from .base import *

DEBUG = False

STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = env("STRIPE_WEBHOOK_SECRET")

stripe.api_key = STRIPE_SECRET_KEY

===== django_project/settings/test.py =====
from .base import *

DEBUG = False
SECRET_KEY = "test-secret-key"

STRIPE_PUBLISHABLE_KEY = "pk_test_dummy"
STRIPE_SECRET_KEY = "sk_test_dummy"
STRIPE_WEBHOOK_SECRET = "whsec_dummy"
stripe.api_key = STRIPE_SECRET_KEY



EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
EMAIL_HOST = "localhost"
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
DEFAULT_FROM_EMAIL = "test@example.com"


# In-memory test DB
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test.sqlite3",
    }
}

RECAPTCHA_PUBLIC_KEY = "test"
RECAPTCHA_PRIVATE_KEY = "test"

# 👇 Google SSO override here only for tests
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': 'test-client-id',
            'secret': 'test-secret',
            'key': ''
        }
    }
}

SECURE_SSL_REDIRECT = False
SECURE_HSTS_SECONDS = 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_HSTS_PRELOAD = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

===== django_project/settings/__init__.py =====


===== django_project config files =====

===== django_project/urls.py =====
from django.contrib import admin
from django.urls import path, include, reverse_lazy
from django.conf.urls.static import static
from django.conf import settings
from django.views.generic import RedirectView
from accounts.views import DashboardView  # if not already imported


urlpatterns = [
    path("admin/", admin.site.urls),
    path("dashboard/", DashboardView.as_view(), name="dashboard"),  # ✅ Add this line
    path("accounts/", include("accounts.urls")),
    path("accounts/", include("allauth.urls")),
    path("blog/", include("blog.urls")),
    path("", include("pages.urls")),  # This must come first so "pages:home" is registered
    path("home/", RedirectView.as_view(url=reverse_lazy("pages:home"), permanent=False), name="home"),
    path("store/", include("store.urls")),
    path("portfolio/", include(("portfolio.urls", "portfolio"), namespace="portfolio")),
    path("ckeditor/", include("ckeditor_uploader.urls")),
    path("chat/", include("chat.urls", namespace="chat")),  # 👈 Add this line


]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    #urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

===== django_project/wsgi.py =====
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_wsgi_application()

===== django_project/asgi.py =====
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings.prod')

application = get_asgi_application()


===== APP: accounts =====

===== accounts/models.py =====
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.db import models
from django.utils import timezone
from django.contrib.auth.base_user import BaseUserManager

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=30, blank=True)
    last_name = models.CharField(max_length=30, blank=True)
    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)
    date_joined = models.DateTimeField(default=timezone.now)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

===== accounts/views.py =====
from django.urls import reverse_lazy
from django.views import generic
from django.contrib.auth import logout, get_user_model
from django.shortcuts import redirect, render
from .forms import CustomUserCreationForm, CustomUserChangeForm
from django.contrib.auth import login
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView
from django.views.generic.edit import UpdateView

# ✅ Import models for dashboard data
from store.models import Order, Review

def custom_logout(request):
    """Logs out the user and redirects to the homepage."""
    print("🚀 custom_logout was called!")
    request.session.flush()
    logout(request)
    return redirect("/")

class SignupPageView(generic.CreateView):
    form_class = CustomUserCreationForm
    success_url = reverse_lazy("account_login")
    template_name = "account/signup.html"

class DashboardView(LoginRequiredMixin, TemplateView):
    template_name = "account/dashboard.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # ✅ Add orders and reviews to dashboard context
        context['orders'] = Order.objects.filter(user=self.request.user).order_by('-created_at')
        context['reviews'] = Review.objects.filter(user=self.request.user).order_by('-created_at')
        return context

class ProfileEditView(LoginRequiredMixin, UpdateView):
    model = get_user_model()
    form_class = CustomUserChangeForm
    template_name = "account/profile_edit.html"
    success_url = reverse_lazy("dashboard")

    def get_object(self):
        return self.request.user

===== accounts/forms.py =====
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = ("email",)  # Remove 'username'

===== accounts/urls.py =====
from django.urls import path, include
from django.contrib.auth import views as auth_views

from .views import SignupPageView, DashboardView, custom_logout, ProfileEditView

urlpatterns = [
    path('signup/', SignupPageView.as_view(), name='signup'),
    path('login/', include('allauth.urls')),  # or your custom login view
    path('dashboard/', DashboardView.as_view(), name='dashboard'),
    path('profile/edit/', ProfileEditView.as_view(), name='profile_edit'),
    path('logout/', custom_logout, name='logout'),
        path(
        'password/change/',
        auth_views.PasswordChangeView.as_view(template_name='account/password_change.html'),
        name='password_change'
    ),
    path(
        'password/change/done/',
        auth_views.PasswordChangeDoneView.as_view(template_name='account/password_change_done.html'),
        name='password_change_done'
    ),
]

===== accounts/admin.py =====
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser
from .forms import CustomUserCreationForm, CustomUserChangeForm

class CustomUserAdmin(UserAdmin):
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm
    model = CustomUser
    list_display = ('email', 'first_name', 'last_name', 'is_staff', 'is_active')
    list_filter = ('is_staff', 'is_active')
    ordering = ('email',)
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal Info', {'fields': ('first_name', 'last_name')}),
        ('Permissions', {'fields': ('is_staff', 'is_active')}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'password1', 'password2', 'is_staff', 'is_active'),
        }),
    )

admin.site.register(CustomUser, CustomUserAdmin)

===== accounts/tests.py =====
from django.test import TestCase

# Create your tests here.

===== accounts/tests/test_forms.py =====
from django.test import TestCase
from django.contrib.auth import get_user_model
from accounts.forms import CustomUserCreationForm, CustomUserChangeForm

User = get_user_model()

class CustomUserCreationFormTest(TestCase):
    def test_form_requires_email_and_passwords(self):
        form = CustomUserCreationForm(data={})
        self.assertFalse(form.is_valid())
        self.assertIn('email', form.errors)
        self.assertIn('password1', form.errors)
        self.assertIn('password2', form.errors)

    def test_form_creates_user(self):
        data = {
            'email': 'new@user.com',
            'password1': 'complexPass123',
            'password2': 'complexPass123'
        }
        form = CustomUserCreationForm(data=data)
        self.assertTrue(form.is_valid(), form.errors)
        user = form.save()
        self.assertTrue(isinstance(user, User))
        self.assertEqual(user.email, 'new@user.com')

class CustomUserChangeFormTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(email='change@user.com', password='abc123')

    def test_change_form_updates_email(self):
        form = CustomUserChangeForm(instance=self.user, data={'email': 'updated@user.com'})
        self.assertTrue(form.is_valid(), form.errors)
        user = form.save()
        self.assertEqual(user.email, 'updated@user.com')

===== accounts/tests/__init__.py =====

===== accounts/tests/test_views.py =====
from django.test import TestCase
from django.urls import reverse
from django.contrib.auth import get_user_model
from accounts.models import CustomUser
from store.models import Order, Review, Product

User = get_user_model()

class SignupViewTest(TestCase):
    def test_get_signup_page(self):
        resp = self.client.get(reverse('signup'))
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'account/signup.html')

    def test_post_signup_creates_user_and_redirects(self):
        data = {
            'email': 'view@user.com',
            'password1': 'Pass!2345',
            'password2': 'Pass!2345'
        }
        resp = self.client.post(reverse('signup'), data)
        self.assertRedirects(resp, reverse('account_login'))
        self.assertTrue(User.objects.filter(email='view@user.com').exists())

class LogoutViewTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(email='lo@user.com', password='xyz123')
        self.client.login(email='lo@user.com', password='xyz123')

    def test_custom_logout(self):
        resp = self.client.get(reverse('logout'))
        self.assertRedirects(resp, '/')
        # now anonymous
        resp2 = self.client.get(reverse('dashboard'))
        self.assertRedirects(resp2, '/accounts/login/?next=/accounts/dashboard/')

class DashboardViewTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(email='dash@user.com', password='dash123')
        self.client.login(email='dash@user.com', password='dash123')
        # create some orders and reviews
        Order.objects.create(customer_email='dash@user.com', status='P')

        product = Product.objects.create(
            product_type='book',
            title='Test Product',
            description='Test description',
            price=10.00,
            stock=5
        )

        Review.objects.create(user=self.user, product=product, comment='ok', rating=5)

    def test_dashboard_context(self):
        resp = self.client.get(reverse('dashboard'))
        self.assertEqual(resp.status_code, 200)
        self.assertIn('orders', resp.context)
        self.assertIn('reviews', resp.context)

class ProfileEditViewTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(email='edit@user.com', password='ed!t123')
        self.client.login(email='edit@user.com', password='ed!t123')

    def test_get_profile_edit(self):
        resp = self.client.get(reverse('profile_edit'))
        self.assertEqual(resp.status_code, 200)
        self.assertTemplateUsed(resp, 'account/profile_edit.html')

    def test_post_profile_edit_updates_user(self):
        resp = self.client.post(reverse('profile_edit'), {'email': 'newemail@user.com'})
        self.assertRedirects(resp, reverse('dashboard'))
        self.user.refresh_from_db()
        self.assertEqual(self.user.email, 'newemail@user.com')

===== accounts/tests/test_models.py =====
from django.test import TestCase
from django.contrib.auth import get_user_model

User = get_user_model()

class CustomUserManagerTest(TestCase):
    def test_create_user_without_email_raises(self):
        with self.assertRaisesMessage(ValueError, "The Email field must be set"):
            User.objects.create_user(email="", password="pass123")

    def test_create_user_successful(self):
        user = User.objects.create_user(email="u@example.com", password="pass123")
        self.assertEqual(user.email, "u@example.com")
        self.assertTrue(user.check_password("pass123"))
        self.assertFalse(user.is_staff)
        self.assertFalse(user.is_superuser)

    def test_create_superuser_sets_flags(self):
        su = User.objects.create_superuser(email="su@example.com", password="pass123")
        self.assertTrue(su.is_staff)
        self.assertTrue(su.is_superuser)

class CustomUserModelTest(TestCase):
    def test_str_returns_email(self):
        user = User.objects.create_user(email="foo@bar.com", password="foo")
        self.assertEqual(str(user), "foo@bar.com")

== accounts/migrations (filenames only) ==
accounts/migrations/0002_alter_customuser_options_alter_customuser_managers_and_more.py
accounts/migrations/0001_initial.py


===== APP: pages =====

===== pages/models.py =====
from django.db import models

# Create your models here.

===== pages/views.py =====
from django.views.generic import TemplateView
from blog.models import Post  
from django.shortcuts import render, redirect
from django.contrib import messages
from django.core.mail import send_mail
from .forms import ContactForm
from django.conf import settings




def contact_view(request):
    if request.method == "POST":
        form = ContactForm(request.POST)
        if form.is_valid():
            name = form.cleaned_data["name"]
            email = form.cleaned_data["email"]
            message = form.cleaned_data["message"]

            full_message = f"New contact form submission:\n\nFrom: {name} <{email}>\n\nMessage:\n{message}"

            send_mail(
                subject="📩 New Contact Message - MatthewRaynor.com",
                message=full_message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[settings.DEFAULT_FROM_EMAIL],
                fail_silently=False,
            )

            messages.success(request, "Thanks for reaching out! Your message was sent.")
            return redirect("pages:contact")
    else:
        form = ContactForm()
    return render(request, "pages/contact.html", {"form": form})

class StoryPageView(TemplateView):
    template_name = 'pages/story.html'



class HomePageView(TemplateView):
    template_name = 'home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["recent_posts"] = Post.objects.filter(is_published=True).order_by('-updated_date')[:6]
        return context



class PressPageView(TemplateView):
    template_name = "pages/press.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["press_articles"] = [
            {
                "title": "Matthew Raynor Finds A New Lease On Life Through Art",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-finds-a-new-lease-on-life-through-art-1506186/",
                "summary": "Explores your transition into photography and art exhibitions as a form of healing and purpose.",
                "image_url": "https://image.27east.com/2019/08/8.15x10.65_BackofBoat2.jpg"
            },
            {
                "title": "Matthew Raynor Photography At Southampton Cultural Center",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-photography-at-southampton-cultural-center-1738556/",
                "summary": "Highlights your stunning drone and seascape photography exhibit at the SCC, blending grit and serenity.",
                "image_url": "https://image.27east.com/2020/11/Matt-Raynor-beautifulbirch-scaled.jpg"
            },
            {
                "title": "Before and After: Matt Raynor’s Life and Its Unexpected Turns",
                "source": "27East",
                "link": "https://www.27east.com/southampton-press/before-and-after-matt-raynors-life-and-its-unexpected-turns-chronicled-in-new-photography-book-2294539/",
                "summary": "Covers your memoir 'Before Me<>After Me,' sharing your powerful personal transformation through imagery.",
                "image_url": "https://image.27east.com/2024/10/party-1.jpg"
            },
            {
                "title": "Matthew Raynor Exhibits His Art at LTV Studios",
                "source": "27East",
                "link": "https://www.27east.com/arts/matthew-raynor-exhibits-his-art-at-ltv-studios-2249981/",
                "summary": "Your LTV Studios debut showcasing new aluminum prints, textures, and emotional storytelling through art.",
                "image_url": "https://image.27east.com/2024/05/Matt-Raynor-Boardwalk.jpg"
            },
            {
                "title": "Man Paralyzed While Diving Has No Health Aide: 'This Is A Crisis'",
                "source": "Patch",
                "link": "https://patch.com/new-york/westhampton-hamptonbays/man-paralyzed-while-diving-has-no-health-aide-crisis",
                "summary": "A heartbreaking look at the challenges you faced accessing in-home care following your accident.",
                "image_url": "https://patch.com/img/cdn20/users/1296254/20190912/061810/styles/patch_image/public/matt___12164446739.jpg?width=1200"
            },
            {
                "title": "Man Paralyzed In Diving Accident Finds Hope In Art — But Needs Help",
                "source": "Patch",
                "link": "https://patch.com/new-york/westhampton-hamptonbays/man-paralyzed-diving-accident-finds-hope-art-needs-help",
                "summary": "Details your emotional and creative healing journey while raising awareness for support needs.",
                "image_url": "https://patch.com/img/cdn20/users/1296254/20230421/085742/styles/patch_image/public/matthewraynor___21200506825.jpg?width=1200"
            },
            {
                "title": "Get Matty Ray Back On The Bay",
                "source": "Dan’s Papers",
                "link": "https://www.danspapers.com/2019/07/get-matty-ray-back-on-the-bay/",
                "summary": "Early community support feature spotlighting your recovery and the fundraiser to aid your journey.",
                "image_url": "https://www.danspapers.com/wp-content/uploads/2020/11/matt-raynor-benefit.jpg"
            },
            {
                "title": "The Matthew Raynor Story (PechaKucha Presentation)",
                "source": "PechaKucha",
                "link": "https://www.pechakucha.com/presentations/the-matthew-raynor-story",
                "summary": "A visual storytelling presentation of your journey from fisherman to artist to speaker.",
                "image_url": ""  # You can use a placeholder here or skip the image conditionally in the template
            },
            {
                "title": "Matt Raynor: A Creative Journey",
                "source": "MILK Books",
                "link": "https://www.milkbooks.com/blog/your-stories/matt-raynor-a-creative-journey/",
                "summary": "A deeply personal narrative exploring how art, writing, and resilience fueled your transformation.",
                "image_url": "https://cdn.milkbooks.com/media/20640/5_2x.webp"
            },
        ]
        return context

===== pages/forms.py =====
from django import forms
from django_recaptcha.fields import ReCaptchaField
from django_recaptcha.widgets import ReCaptchaV2Checkbox  # ✅ required!

class ContactForm(forms.Form):
    name = forms.CharField(max_length=100)
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea)
    captcha = ReCaptchaField(widget=ReCaptchaV2Checkbox)

===== pages/urls.py =====
from django.urls import path
from .views import HomePageView, PressPageView, contact_view
from . import views

app_name = "pages"

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),  # Ensure this exists!
    path("press/", PressPageView.as_view(), name="press"),
    path("contact/", contact_view, name="contact"),
    path('story/', views.StoryPageView.as_view(), name='story'),

    
    
    
]

===== pages/admin.py =====
from django.contrib import admin

# Register your models here.

===== pages/tests.py =====
from django.test import TestCase

# Create your tests here.

===== pages/tests/test_forms.py =====
# pages/tests/test_forms.py
from django.test import TestCase
from unittest.mock import patch
from pages.forms import ContactForm

class ContactFormTest(TestCase):
    @patch('pages.forms.ReCaptchaField.clean')
    def test_contact_form_valid_data(self, mock_clean):
        mock_clean.return_value = True  # Pretend captcha is valid
        form = ContactForm(data={
            'name': 'John Doe',
            'email': 'john@example.com',
            'message': 'Hello there!',
            'g-recaptcha-response': 'PASSED'
        })
        self.assertTrue(form.is_valid())

    def test_contact_form_missing_fields(self):
        form = ContactForm(data={})
        self.assertFalse(form.is_valid())
        self.assertIn('name', form.errors)
        self.assertIn('email', form.errors)
        self.assertIn('message', form.errors)

===== pages/tests/__init__.py =====

===== pages/tests/test_views.py =====
from django.test import TestCase, RequestFactory
from django.urls import reverse
from unittest.mock import patch
from django.contrib.messages.storage.fallback import FallbackStorage
from pages.views import contact_view, HomePageView
from blog.models import Post
from django.contrib.auth import get_user_model


class ContactViewTest(TestCase):
    def setUp(self):
        self.factory = RequestFactory()

    @patch("pages.views.ContactForm")
    @patch("pages.views.send_mail")
    def test_valid_contact_form_sends_email(self, mock_send_mail, mock_form_class):
        mock_form = mock_form_class.return_value
        mock_form.is_valid.return_value = True
        mock_form.cleaned_data = {
            "name": "Test User",
            "email": "test@example.com",
            "message": "Hello!"
        }

        request = self.factory.post(reverse("pages:contact"), data={})
        
        # ✅ Set up the message framework
        setattr(request, "session", self.client.session)
        request._messages = FallbackStorage(request)

        response = contact_view(request)

        mock_send_mail.assert_called_once()
        self.assertEqual(response.status_code, 302)  # Should redirect


class HomePageViewTest(TestCase):
    def setUp(self):
        self.factory = RequestFactory()
        self.user = get_user_model().objects.create_user(
            email="author@test.com",
            password="testpass"
        )

    def test_homepage_context_includes_recent_posts(self):
        Post.objects.create(
            title="Test Post",
            slug="test-post",
            content="Test content",
            is_published=True,
            author=self.user
        )

        request = self.factory.get(reverse("pages:home"))
        request.user = self.user

        response = HomePageView.as_view()(request)
        self.assertEqual(response.status_code, 200)
        self.assertIn("recent_posts", response.context_data)
        self.assertEqual(len(response.context_data["recent_posts"]), 1)

== pages/migrations (filenames only) ==
None


===== APP: blog =====

===== blog/models.py =====
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.text import slugify
from embed_video.fields import EmbedVideoField
from ckeditor_uploader.fields import RichTextUploadingField  # ✅ for rich text
from cloudinary_storage.storage import MediaCloudinaryStorage  # ✅ for Cloudinary upload

User = get_user_model()

class Post(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(unique=True, blank=True)
    
    # ✅ Rich text content field
    content = RichTextUploadingField()

    # ✅ Optional YouTube/TikTok embed
    video = EmbedVideoField(blank=True, null=True)

    # ✅ Optional fallback image
    image = models.ImageField(
        upload_to='blog_images/',
        storage=MediaCloudinaryStorage(),
        null=True,
        blank=True
    )

    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="blog_posts")
    is_published = models.BooleanField(default=False)
    published_date = models.DateTimeField(null=True, blank=True)
    updated_date = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-published_date']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super(Post, self).save(*args, **kwargs)

    def __str__(self):
        return self.title


class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name="comments")
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    name = models.CharField(max_length=255, blank=True)
    email = models.EmailField(blank=True)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    approved = models.BooleanField(default=False)

    class Meta:
        ordering = ['created_at']

    def __str__(self):
        if self.user:
            return f"Comment by {self.user} on {self.post}"
        return f"Comment by {self.name} on {self.post}"

===== blog/views.py =====
from django.urls import reverse
from django.views.generic import ListView, DetailView
from django.views.generic.edit import FormMixin
from .models import Post, Comment
from .forms import CommentForm

class PostListView(ListView):
    model = Post
    template_name = "blog/post_list.html"
    context_object_name = "posts"

    def get_queryset(self):
        return Post.objects.filter(is_published=True)

class PostDetailView(FormMixin, DetailView):
    model = Post
    template_name = "blog/post_detail.html"
    context_object_name = "post"
    form_class = CommentForm

    def get_success_url(self):
        return reverse("post_detail", kwargs={"slug": self.object.slug})

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = self.get_form()
        context['comments'] = self.object.comments.filter(approved=True)
        return context

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        form = self.get_form()
        if form.is_valid():
            return self.form_valid(form)
        else:
            return self.form_invalid(form)

    def form_valid(self, form):
        comment = form.save(commit=False)
        comment.post = self.object
        if self.request.user.is_authenticated:
            comment.user = self.request.user
        comment.approved = True  # Automatically approve for now
        comment.save()
        return super().form_valid(form)

===== blog/forms.py =====
from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        # If you require authenticated users only, you might only need the content field.
        # Otherwise, include name and email.
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Leave a comment...'}),
        }

===== blog/urls.py =====
from django.urls import path
from .views import PostListView, PostDetailView

urlpatterns = [
    path('', PostListView.as_view(), name='post_list'),
    path('<slug:slug>/', PostDetailView.as_view(), name='post_detail'),
]

===== blog/admin.py =====
from django.contrib import admin
from .models import Post, Comment

@admin.register(Post)
class PostAdmin(admin.ModelAdmin):
    list_display = ('title', 'author', 'is_published', 'published_date', 'video')
    prepopulated_fields = {'slug': ('title',)}
    search_fields = ('title', 'content')
    list_filter = ('is_published', 'published_date')
    fields = ('title', 'slug', 'content', 'image', 'video', 'author', 'is_published', 'published_date')


@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('post', 'user', 'created_at', 'approved')
    list_filter = ('approved', 'created_at')
    search_fields = ('content',)

===== blog/tests.py =====
from django.test import TestCase

# Create your tests here.

===== blog/tests/test_forms.py =====
from django.test import TestCase

class BlogModelsSmokeTest(TestCase):
    def test_smoke(self):
        # trivial test to verify blog app loads
        self.assertTrue(True)

===== blog/tests/__init__.py =====

===== blog/tests/test_views.py =====

===== blog/tests/test_models.py =====
from django.test import TestCase

class BlogModelsSmokeTest(TestCase):
    def test_smoke(self):
        # trivial test to verify blog app loads
        self.assertTrue(True)

== blog/migrations (filenames only) ==
blog/migrations/0002_post_image_alter_post_content.py
blog/migrations/0001_initial.py


===== APP: portfolio =====

===== portfolio/models.py =====
from django.db import models

# Create your models here.

===== portfolio/views.py =====
from django.views.generic import TemplateView
from django.http import Http404
# 

PROJECTS = [
    {
        "title": "EJ Art Moving App",
        "slug": "art-mover",
        "hero_image": "images/projects/art-mover.jpg",
        "description": "A sleek logistics dashboard for managing clients, work orders, and invoices.",
        "overview": "A production-grade business dashboard for an art moving company, complete with scheduling, PDF invoicing, and a dynamic calendar.",
        "tech_stack": {
            "backend": ["Django 5.1.6", "Python 3.10", "PostgreSQL", "Docker"],
            "frontend": ["Bootstrap 5", "Crispy Forms", "FullCalendar", "Flatpickr", "Select2"],
            "deployment": ["Docker Compose", "Heroku", "Whitenoise"],
            "tools": ["django-environ", "django-import-export"]
        },
        "problem": "The client was managing logistics, invoicing, and scheduling manually via email and spreadsheets, which caused delays and errors.",
        "solution": "I created a centralized system that tracks jobs, clients, and invoices using relational models, AJAX-enhanced forms, and a real-time calendar for scheduling.",
        "special_features": [
            "Dynamic AJAX invoice creation from client work orders",
            "PDF invoice generation and calendar event syncing",
            "Inline formsets and lazy model references to avoid circular imports"
        ],
        "problems_solved": [
            "Digitized manual scheduling and invoicing",
            "Visual overview of work orders via FullCalendar",
            "Centralized client, job, and invoice management"
        ],
        "improvements": [
            "Integrate Stripe or QuickBooks for real payment processing",
            "Add search and filters for completed jobs and past invoices"
        ],
        "proud_of": [
            "Overcame circular model dependencies",
            "Built a real-time calendar with interactive event links"
        ],
        "build_notes": "<p>Containerized with Docker, deployed using Heroku's container stack. PostgreSQL health checks ensure app doesn’t launch before DB is ready.</p>",
        "github_url": "https://github.com/mattyray/art_moving_buisness",
        "live_url": "https://art-moving-buisness-0a734245a61f.herokuapp.com"
    },
    {
        "title": "Matt’s Freedom Fundraiser",
        "slug": "fundraiser",
        "hero_image": "images/projects/fundraiser.jpg",
        "description": "A donation-based campaign platform with embedded video, blog, and outreach.",
        "overview": "Created to support my move out of a nursing home, this campaign site includes a motivational blog, caregiver outreach, and donation CTAs.",
        "tech_stack": {
            "backend": ["Django", "Python", "PostgreSQL"],
            "frontend": ["Bootstrap 5", "Crispy Forms"],
            "deployment": ["Docker", "Heroku", "Whitenoise"],
            "tools": ["django-environ", "YouTube Embed", "Mailchimp (planned)"]
        },
        "problem": "I needed a way to raise funds for housing and medical needs while also telling my story and engaging my community.",
        "solution": "I built a multi-page fundraising site that includes a blog, press coverage, embedded video, and contact outreach tools.",
        "special_features": [
            "Embedded YouTube campaign video with autoplay",
            "Integrated blog with post editor and dynamic list/detail views"
        ],
        "problems_solved": [
            "Unified storytelling, fundraising, and updates in one hub",
            "Raised awareness and caregiver interest via CDPAP outreach"
        ],
        "improvements": [
            "Integrate Stripe or PayPal for donations",
            "Add comment moderation and CAPTCHA"
        ],
        "proud_of": [
            "Deployed solo with Docker and Heroku",
            "Bilingual outreach increased community engagement"
        ],
        "build_notes": "<p>Uses Django Pages app with static press data. Campaign blog and store are modular and reusable across other projects.</p>",
        "github_url": "https://github.com/mattyray/fundraiser-website",
        "live_url": "https://www.mattfreedomfundraiser.com"
    },
    {
        "title": "MatthewRaynor.com",
        "slug": "matthew-raynor",
        "hero_image": "images/projects/matthewraynor.jpg",
        "description": "My flagship website combining my story, blog, art store, and technical portfolio.",
        "overview": "A personal brand site where all my passions intersect — tech, writing, art, and accessibility.",
        "tech_stack": {
            "backend": ["Django 5.1.6", "Python 3.10", "PostgreSQL"],
            "frontend": ["Bootstrap 5", "SCSS", "Flatpickr", "FullCalendar"],
            "deployment": ["Docker", "Heroku (Container Stack)", "Whitenoise"],
            "tools": ["Allauth", "Crispy Forms", "django-environ"]
        },
        "problem": "I needed a single platform to unify my professional work, writing, art, and personal journey to help others and represent myself to the world.",
        "solution": "I built a full-featured Django site with custom user login, store, blog, portfolio, and press coverage hub.",
        "special_features": [
            "Custom user model + Allauth integration",
            "Press hub, blog, store, and modular portfolio detail pages",
            "AI chatbot scaffold and accessible frontend"
        ],
        "problems_solved": [
            "Needed one site to host my store, blog, portfolio, and press",
            "Reduced reliance on platforms like Shopify or Medium"
        ],
        "improvements": [
            "Add Stripe cart/checkout system",
            "Enable newsletter signup and global search"
        ],
        "proud_of": [
            "Built a fully modular, multi-app Django system",
            "Reflects my resilience and technical versatility"
        ],
        "build_notes": "<p>Every page is component-driven with a global base template. Portfolio is hardcoded for now, but database-driven expansion is planned.</p>",
        "github_url": "https://github.com/mattyray/Matthew_raynor_website",
        "live_url": "https://www.matthewraynor.com"
    },
    {
        "title": "Matt’s Bookstore API",
        "slug": "bookstore",
        "hero_image": "images/projects/bookstore.jpg",
        "description": "A Django REST API bookstore project with Google SSO, reviews, and deployment.",
        "overview": "An API-first bookstore web app with full CRUD for books, ratings, search, and Docker-based deployment.",
        "tech_stack": {
            "backend": ["Django", "DRF", "Python 3.12"],
            "frontend": ["Bootstrap 5", "Crispy Forms"],
            "deployment": ["Docker", "Heroku", "Whitenoise"],
            "tools": ["Allauth", "django-environ"]
        },
        "problem": "I wanted to learn Django REST Framework by building an API-first bookstore that could handle real CRUD operations and secure logins.",
        "solution": "Created a REST-ready bookstore with user authentication, image uploads, reviews, and Heroku-based deployment using Docker.",
        "special_features": [
            "UUID and slug-based URLs",
            "Secure reviews via permission classes",
            "Search filtering using Django Q objects"
        ],
        "problems_solved": [
            "Learned DRF by building real API endpoints",
            "Handled book reviews, search, and secure login"
        ],
        "improvements": [
            "Add frontend search bar and filters",
            "Convert to SPA with Vue or React"
        ],
        "proud_of": [
            "Handled Docker + DRF + PostgreSQL integration solo",
            "Built full book management pipeline"
        ],
        "build_notes": "<p>Heroku container stack deployment using `heroku.yml` and `.env` management. Includes future-ready DRF endpoints for mobile or SPA frontend.</p>",
        "github_url": "https://github.com/mattyray/ch4-bookstore",
        "live_url": ""  # Currently broken, noted in portfolio
    },
    {
    "title": "AI Motivational Chatbot",
    "slug": "motivational-chatbot",
    "hero_image": "images/projects/motivational-chatbot.jpg",
    "description": "An AI-powered real-time chat interface built to uplift, motivate, and support users through guided messages and mindfulness prompts.",
    "overview": "This web app features a real-time motivational chatbot using Django Channels and OpenAI's GPT-4 API. Designed with accessibility and emotional support in mind, it offers inspiring guidance with markdown-to-HTML formatting and secure WebSocket messaging.",
    "tech_stack": {
        "backend": ["Django 5.1.6", "Python 3.12", "PostgreSQL", "Docker"],
        "frontend": ["Bootstrap 5", "Crispy Forms", "JavaScript WebSocket API"],
        "deployment": ["Docker Compose", "Heroku", "Whitenoise"],
        "tools": ["Channels", "OpenAI SDK (>=1.0.0)", "django-environ", "markdown"]
    },
    "problem": "Users lacked an uplifting, real-time interface to ask spiritual, emotional, or motivational questions and receive formatted responses that felt supportive.",
    "solution": "Built a guided AI chatbot interface that handles live input, streams OpenAI GPT-4 responses, and uses markdown formatting for expressive feedback.",
    "special_features": [
        "Live WebSocket chat powered by Django Channels",
        "OpenAI GPT-4 Turbo integration with markdown-to-HTML formatting",
        "Responsive layout with accessibility-focused design choices"
    ],
    "problems_solved": [
        "Enabled real-time motivational chat for users seeking support",
        "Removed latency by using async communication and markdown rendering",
        "Created a safe space for users to engage with uplifting messages"
    ],
    "improvements": [
        "Add user accounts and saved conversation history",
        "Integrate voice recognition and text-to-speech for accessibility",
        "Implement streaming response instead of chunked delivery"
    ],
    "proud_of": [
        "Successfully implemented real-time async chat with OpenAI GPT-4",
        "Handled migration to OpenAI SDK 1.0+ and updated markdown rendering",
        "Built with performance and spiritual value in mind"
    ],
    "build_notes": "<p>Chat interface built with Django Channels, using Redis for pub/sub communication. WebSocket connection gracefully handles disconnects and errors, and the OpenAI SDK 1.0+ interface ensures future-proof API usage.</p>",
    "github_url": "https://github.com/mattyray/ai_motivator_chatbot",
    "live_url": "#"
},
{
    "title": "Lotus Path Learning Platform",
    "slug": "lotus-path",
    "hero_image": "images/projects/lotus-path.jpg",
    "description": "An AI-powered learning platform offering custom tutorials, quizzes, and user-authenticated progress tracking.",
    "overview": "An interactive web app that generates AI-written tutorials, hosts quizzes, and lets users track progress with a personalized dashboard. Built with Django, integrated with OpenAI, and deployed on Fly.io.",
    "tech_stack": {
        "backend": ["Django 5.1.6", "Python 3.10", "PostgreSQL", "Docker"],
        "frontend": ["Bootstrap 5", "Crispy Forms"],
        "deployment": ["Fly.io", "Docker Compose", "Whitenoise"],
        "tools": ["django-environ", "OpenAI API", "CKEditor", "GitHub Actions"]
    },
    "problem": "Learners often struggle to find clear, custom-tailored explanations of programming topics and have no simple way to test themselves or track their growth.",
    "solution": "The platform allows users to generate AI-driven tutorials on demand, take JavaScript quizzes, and store their learning history via user accounts. It’s optimized for accessibility and clarity.",
    "special_features": [
        "OpenAI-powered tutorial generation engine",
        "JavaScript quiz module with Django views and templates",
        "Authentication system with user dashboards and CSRF security",
        "Styled using Bootstrap with reusable templates and layout blocks"
    ],
    "problems_solved": [
        "Manual content creation bottlenecks",
        "Lack of personalized study support",
        "Difficulty integrating AI into a structured learning flow"
    ],
    "improvements": [
        "Add real-time chat tutoring via OpenAI API",
        "Allow users to bookmark and rate tutorials",
        "Enable code submission and validation for interactive practice"
    ],
    "proud_of": [
        "Integrated OpenAI API into a real Django application",
        "Configured secure, production-ready deployment using Fly.io and Docker",
        "Set up GitHub Actions for CI/CD with collectstatic and migrations"
    ],
    "build_notes": "<p>Deployed on Fly.io using Docker. Static files handled via Whitenoise. PostgreSQL database with `.env` integration via <code>django-environ</code>. Includes CKEditor for WYSIWYG content editing.</p>",
    "github_url": "https://github.com/mattyray/news-root",
    "live_url": "#"
},


]

class PortfolioView(TemplateView):
    template_name = "portfolio/index.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["projects"] = PROJECTS
        return context

class ProjectDetailView(TemplateView):
    template_name = "portfolio/detail.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        slug = self.kwargs.get("slug")
        project = next((p for p in PROJECTS if p["slug"] == slug), None)
        if not project:
            raise Http404("Project not found")
        context["project"] = project
        return context

===== portfolio/urls.py =====


# portfolio/urls.py

from django.urls import path
from .views import PortfolioView, ProjectDetailView

app_name = "portfolio"  # 👈 Enables namespacing like portfolio:detail

urlpatterns = [
    path("", PortfolioView.as_view(), name="index"),
    path("<slug:slug>/", ProjectDetailView.as_view(), name="project_detail"),
]

===== portfolio/admin.py =====
from django.contrib import admin

# Register your models here.

===== portfolio/tests.py =====
from django.test import TestCase

# Create your tests here.

===== portfolio/tests/__init__.py =====

===== portfolio/tests/test_views.py =====
# portfolio/tests/test_views.py
from django.test import TestCase
from django.urls import reverse
from django.http import Http404
from portfolio.views import PROJECTS


class PortfolioViewTest(TestCase):
    def test_portfolio_index_view_renders(self):
        response = self.client.get(reverse("portfolio:index"))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, "portfolio/index.html")
        self.assertIn("projects", response.context)
        self.assertEqual(response.context["projects"], PROJECTS)


class ProjectDetailViewTest(TestCase):
    def test_valid_project_detail_view(self):
        project = PROJECTS[0]  # Use the first project in the list
        response = self.client.get(reverse("portfolio:project_detail", args=[project["slug"]]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, "portfolio/detail.html")
        self.assertIn("project", response.context)
        self.assertEqual(response.context["project"]["slug"], project["slug"])

    def test_invalid_project_slug_raises_404(self):
        response = self.client.get(reverse("portfolio:project_detail", args=["non-existent"]))
        self.assertEqual(response.status_code, 404)

== portfolio/migrations (filenames only) ==
None


===== APP: store =====

===== store/models.py =====
from django.db import models
from django.conf import settings
from django.utils.text import slugify
from cloudinary_storage.storage import MediaCloudinaryStorage

User = settings.AUTH_USER_MODEL

class Product(models.Model):
    PRODUCT_TYPE_CHOICES = (
         ('book', 'Book'),
         ('artwork', 'Artwork'),
    )
    product_type = models.CharField(max_length=10, choices=PRODUCT_TYPE_CHOICES)
    title = models.CharField(max_length=255)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(
        upload_to='products/', 
        storage=MediaCloudinaryStorage(), 
        null=True, 
        blank=True
    )
    stock = models.PositiveIntegerField(default=0)
    slug = models.SlugField(unique=True, blank=True)
    collection = models.ForeignKey(
        'Collection', 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name="products"
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super(Product, self).save(*args, **kwargs)

    def __str__(self):
        return self.title


class Order(models.Model):
    STATUS_CHOICES = [
        ('P', 'Pending'),
        ('C', 'Completed'),
        ('F', 'Failed'),
    ]
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name='orders', null=True, blank=True
    )
    customer_email = models.EmailField(null=True, blank=True)
    shipping_address = models.JSONField(null=True, blank=True)
    stripe_checkout_id = models.CharField(max_length=255, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=1, choices=STATUS_CHOICES, default='P')

    @property
    def total_price(self):
        return sum(item.total_price for item in self.items.all())

    def __str__(self):
        return f"Order {self.id} ({self.customer_email or self.user})"



class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    @property
    def total_price(self):
        return self.price * self.quantity

    def __str__(self):
        return f"{self.quantity} x {self.product.title}"


class Review(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='reviews')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.PositiveSmallIntegerField(default=5)
    comment = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review of {self.product.title} by {self.user}"


class Collection(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    cover_image = models.ImageField(
        upload_to='collections/', 
        storage=MediaCloudinaryStorage(), 
        null=True, 
        blank=True
    )
    slug = models.SlugField(unique=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

===== store/views.py =====
from django.views.generic import DetailView, TemplateView, ListView
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from django.contrib import messages
from django.utils.decorators import method_decorator
from django.conf import settings
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse


from .models import Product, Collection, Order, OrderItem
from .cart import Cart
from .forms import ReviewForm

import stripe
import json

stripe.api_key = settings.STRIPE_SECRET_KEY

from django.core.mail import send_mail

import logging

logger = logging.getLogger(__name__)

@csrf_exempt
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META.get("HTTP_STRIPE_SIGNATURE")
    endpoint_secret = settings.STRIPE_WEBHOOK_SECRET

    try:
        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)
    except ValueError as e:
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        return HttpResponse(status=400)

    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        email = session.get("customer_details", {}).get("email")
        shipping = session.get("shipping", {}).get("address")
        stripe_id = session.get("id")

        Order.objects.create(
            customer_email=email,
            shipping_address=shipping,
            stripe_checkout_id=stripe_id,
            status='C'
        )

    return HttpResponse(status=200)





@csrf_exempt
def create_checkout_session(request):
    product_id = json.loads(request.body).get("product_id")
    product = Product.objects.get(id=product_id)

    checkout_session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=[
            {
                'price_data': {
                    'currency': 'usd',
                    'unit_amount': int(product.price * 100),
                    'product_data': {
                        'name': product.title,
                    },
                },
                'quantity': 1,
            },
        ],
        mode='payment',
        success_url=settings.DOMAIN + '/store/order_success/',
        cancel_url=settings.DOMAIN + '/store/',
        shipping_address_collection={'allowed_countries': ['US', 'CA']},
        metadata={'product_id': product.id, 'user_id': request.user.id}
    )
    return JsonResponse({'id': checkout_session.id})



@method_decorator(login_required, name='dispatch')
class OrderHistoryView(ListView):
    model = Order
    template_name = 'store/order_history.html'
    context_object_name = 'orders'
    ordering = ['-created_at']

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user)


class OrderSuccessView(TemplateView):
    template_name = "store/order_success.html"


@require_POST
def remove_from_cart(request, key):
    cart = Cart(request)
    cart.remove(key)
    messages.success(request, "Item removed from your cart.")
    return redirect("store:cart_detail")

@login_required
@require_POST
def checkout_view(request):
    cart = Cart(request)
    if not cart.cart:
        messages.error(request, "Your cart is empty.")
        return redirect("store:cart_detail")

    line_items = []
    for key, item in cart.cart.items():
        product = Product.objects.get(id=key)
        line_items.append({
            'price_data': {
                'currency': 'usd',
                'unit_amount': int(float(product.price) * 100),  # price in cents
                'product_data': {
                    'name': product.title,
                },
            },
            'quantity': item["quantity"],
        })

    checkout_session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=line_items,
        mode='payment',
        shipping_address_collection={'allowed_countries': ['US']},
        success_url=request.build_absolute_uri('/store/order_success/'),
        cancel_url=request.build_absolute_uri('/cart/'),
    )

    return redirect(checkout_session.url)

def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    cart = Cart(request)
    cart.add(product)
    return redirect("store:cart_detail")


def cart_detail(request):
    cart = Cart(request)
    return render(request, "store/cart_detail.html", {"cart": cart})

class ProductDetailView(DetailView):
    model = Product
    template_name = "store/product_detail.html"
    context_object_name = "product"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        product = self.get_object()
        context['form'] = ReviewForm()
        context['reviews'] = product.reviews.all()
        context['stripe_publishable_key'] = settings.STRIPE_PUBLISHABLE_KEY
        return context

    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        print("🚀 Review POST triggered for:", self.object.title)

        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.product = self.object
            review.user = request.user
            review.save()
            messages.success(request, "Thank you for your review!")
            print("✅ Review saved for:", self.object.title)
            return redirect("store:product_detail", slug=self.object.slug)
        else:
            print("❌ Review form is invalid:", form.errors)
            context = self.get_context_data()
            context['form'] = form
            return self.render_to_response(context)


class CollectionDetailView(DetailView):
    model = Collection
    template_name = "store/collection_detail.html"
    context_object_name = "collection"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['artworks'] = Product.objects.filter(
            product_type='artwork',
            collection=self.object
        )
        return context


class StoreOverviewView(TemplateView):
    template_name = "store/store_overview.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['books'] = Product.objects.filter(product_type='book')
        context['collections'] = Collection.objects.all()
        return context

===== store/forms.py =====
from django import forms
from .models import Review

class ReviewForm(forms.ModelForm):
    class Meta:
        model = Review
        fields = ['rating', 'comment']
        widgets = {
            'comment': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Write your review here...'
            }),
        }

    rating = forms.ChoiceField(
        label='Rating',
        choices=[(i, f'{i} Star{"s" if i > 1 else ""}') for i in range(5, 0, -1)],
        widget=forms.RadioSelect(attrs={'class': 'star-rating'}),
        initial=5
    )

===== store/urls.py =====
from django.urls import path

from .views import (
    ProductDetailView,
    CollectionDetailView,
    StoreOverviewView,
    cart_detail,
    add_to_cart,
    checkout_view,
    OrderSuccessView,
    remove_from_cart,
    OrderHistoryView,
    create_checkout_session,
    stripe_webhook,
)

app_name = "store"

urlpatterns = [
    path('', StoreOverviewView.as_view(), name='store_overview'),
    path('products/<slug:slug>/', ProductDetailView.as_view(), name='product_detail'),
    path('collections/<slug:slug>/', CollectionDetailView.as_view(), name='collection_detail'),

    # Cart functionality
    path("cart/", cart_detail, name="cart_detail"),
    path("cart/add/<int:product_id>/", add_to_cart, name="add_to_cart"),
    path("cart/remove/<str:key>/", remove_from_cart, name="remove_from_cart"),  # ✅ This line is key

    path("checkout/", checkout_view, name="checkout"),
    path("order_success/", OrderSuccessView.as_view(), name="order_success"),
    path('orders/history/', OrderHistoryView.as_view(), name='order_history'),
    path('create-checkout-session/', create_checkout_session, name='create_checkout_session'),
    path("webhooks/stripe/", stripe_webhook, name="stripe_webhook"),


   
]

===== store/admin.py =====
from django.contrib import admin
from .models import Product, Collection, Order, OrderItem, Review

# --------------------
# PRODUCT ADMIN
# --------------------
@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ('title', 'product_type', 'price', 'stock', 'created_at')
    prepopulated_fields = {'slug': ('title',)}
    search_fields = ('title', 'description')
    list_filter = ('created_at',)

# --------------------
# COLLECTION ADMIN
# --------------------
@admin.register(Collection)
class CollectionAdmin(admin.ModelAdmin):
    list_display = ('name', 'created_at')
    prepopulated_fields = {'slug': ('name',)}

# --------------------
# ORDER ADMIN
# --------------------
class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 0

@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'status', 'created_at', 'total_price')
    list_filter = ('status', 'created_at')
    inlines = [OrderItemInline]

# --------------------
# REVIEW ADMIN
# --------------------
@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    list_display = ('product', 'user', 'rating', 'created_at')
    list_filter = ('rating', 'created_at')
    search_fields = ('comment',)

===== store/tests.py =====
from django.test import TestCase

# Create your tests here.

===== store/tests/test_forms.py =====
from django.test import TestCase

class StoreModelsSmokeTest(TestCase):
    def test_smoke(self):
        # trivial test to verify store app loads
        self.assertTrue(True)

===== store/tests/__init__.py =====

===== store/tests/test_views.py =====

===== store/tests/test_models.py =====
from django.test import TestCase

class StoreModelsSmokeTest(TestCase):
    def test_smoke(self):
        # trivial test to verify store app loads
        self.assertTrue(True)

== store/migrations (filenames only) ==
store/migrations/0002_collection_product_product_type_product_collection.py
store/migrations/0001_initial.py
store/migrations/0003_order_customer_email_order_shipping_address_and_more.py


===== APP: chat =====

===== chat/models.py =====
from django.db import models

# Create your models here.

===== chat/views.py =====
from django.views.decorators.csrf import csrf_exempt
from django.views.generic import TemplateView
from openai import OpenAI
from django.conf import settings
from django.views import View
from django.http import JsonResponse
import json
from .utils import load_combined_context  # 👈 add this import


client = OpenAI(api_key=settings.OPENAI_API_KEY)


class ChatAPIView(View):
    def post(self, request):
        try:
            data = json.loads(request.body)
            message = data.get("message", "")
            full_context = load_combined_context()  # 👈 now uses both blog + KB

            chat_response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": full_context},
                    {"role": "user", "content": message}
                ]
            )
            reply = chat_response.choices[0].message.content.strip()
            return JsonResponse({"reply": reply})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)


class ChatInterfaceView(TemplateView):
    template_name = "chat/chat_interface.html"

===== chat/urls.py =====
from django.urls import path
from .views import ChatInterfaceView, ChatAPIView
from django.views.decorators.csrf import csrf_exempt

app_name = "chat"

urlpatterns = [
    path("", ChatInterfaceView.as_view(), name="interface"),
    path("api/", csrf_exempt(ChatAPIView.as_view()), name="api"),  # ✅ FIXED HERE
]

===== chat/admin.py =====
from django.contrib import admin

# Register your models here.

===== chat/tests.py =====
from django.test import TestCase

# Create your tests here.

===== chat/tests/__init__.py =====

===== chat/tests/test_views.py =====
from django.test import TestCase
from django.urls import reverse

class ChatInterfaceViewTest(TestCase):
    def test_chat_interface_loads(self):
        response = self.client.get(reverse("chat:interface"))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "AI Assistant")

== chat/migrations (filenames only) ==
None


===== chat/utils.py =====
# chat/utils.py

from blog.models import Post
from .knowledge_base import KNOWLEDGE_BASE

def load_combined_context():
    posts = Post.objects.filter(is_published=True).order_by("-updated_date")[:5]
    blog_snippets = "\n\n".join(
        f"Title: {post.title}\n{post.content[:500]}..." for post in posts
    )
    return KNOWLEDGE_BASE + "\n\nRecent Blog Posts:\n" + blog_snippets


===== chat/openai_utils.py =====
import json
import os
from django.conf import settings
from openai import OpenAI

client = OpenAI(api_key=settings.OPENAI_API_KEY)

# Load all knowledge base files in chat/data
def load_knowledge_base():
    base_path = os.path.join(settings.BASE_DIR, "chat", "data")
    knowledge = []

    for filename in os.listdir(base_path):
        if filename.endswith(".json"):
            with open(os.path.join(base_path, filename), "r") as f:
                try:
                    data = json.load(f)
                    if isinstance(data, list):
                        knowledge.extend(data)
                    elif isinstance(data, dict):
                        knowledge.append(data)
                except Exception as e:
                    print(f"Error loading {filename}: {e}")
    return knowledge

# Build system prompt with injected knowledge base
def get_openai_response(user_message):
    context_blocks = load_knowledge_base()
    system_content = "You are a helpful assistant on MatthewRaynor.com. Use the following context when answering questions:\n\n"

    for block in context_blocks:
        system_content += f"- {block.get('title', '')}: {block.get('content', '')}\n"

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_content},
            {"role": "user", "content": user_message}
        ]
    )
    return response.choices[0].message.content.strip()


===== chat/knowledge_base.py =====
# chat/knowledge_base.py

KNOWLEDGE_BASE = """
About Matthew:
- Matthew Raynor is a C5–C6 quadriplegic living in a nursing home, working toward independent living.
- He’s a former deep-sea fisherman turned web developer, author, and artist.
- He offers services including: custom website development, drone photography, and motivational content.

Web Development:
- Matthew builds full-stack apps using Django, React, PostgreSQL, and Docker.
- Visit the Portfolio to see his projects and the Store to buy his visual memoir.

Drone Services:
- Matthew offers custom drone photography and aerial video shoots.
- Ideal for real estate, landscapes, art installations, and events.

Support:
- Users can support Matthew by donating to his fundraiser, sharing his story, or helping him find housing and caregiving.
- Visit the Contact page to get in touch.

Using the Website:
- Log in or sign up with email or Google.
- Visit the Store to view and purchase artwork or his book.
- Use the Contact form for questions or project inquiries.
- The blog contains reflections, updates, and inspirational writing.

AI Assistant:
- This assistant can help answer questions about Matthew, his journey, services, store, or how to help.
"""


===== chat/data/*.json =====

===== chat/data/navigation.json =====
{
    "site": "MatthewRaynor.com",
    "description": "Official website of Matthew Raynor — artist, developer, and storyteller. Explore his journey, portfolio, shop, and more.",
    "navigation": [
      {
        "label": "Home",
        "url": "/"
      },
      {
        "label": "Press",
        "url": "/pages/press"
      },
      {
        "label": "My Journey",
        "submenu": [
          {
            "label": "My Story",
            "url": "/pages/my-story"
          },
          {
            "label": "Blog",
            "url": "/blogs/jonathan-go-fund-me-update-june"
          }
        ]
      },
      {
        "label": "Images",
        "url": "/collections/all"
      },
      {
        "label": "Events",
        "submenu": [
          {
            "label": "Exhibit at Craig and Peter's",
            "url": "/collections/exhibit-at-craig-and-peters"
          },
          {
            "label": "Events",
            "url": "/pages/events"
          }
        ]
      },
      {
        "label": "Services & Info",
        "submenu": [
          {
            "label": "Real Estate And Commission Work",
            "url": "/pages/real-estate-and-commission-work"
          },
          {
            "label": "Accepted Payments",
            "url": "/pages/accepted-payments"
          },
          {
            "label": "Shipping and Return Policy",
            "url": "/pages/shipping-and-return-policy"
          },
          {
            "label": "Product Descriptions and Sizing",
            "url": "/pages/product-descriptions-and-sizing"
          },
          {
            "label": "Contact Information",
            "url": "/pages/contact-information"
          }
        ]
      }
    ],
    "portfolio": {
      "title": "My Portfolio",
      "description": "Explore a selection of real-world projects I’ve built—from logistics systems to creative campaign sites.",
      "projects": [
        {
          "title": "EJ Art Moving App",
          "description": "A sleek logistics dashboard for managing clients, work orders, and invoices.",
          "url": "/portfolio/ej-art-moving-app"
        },
        {
          "title": "Matt’s Freedom Fundraiser",
          "description": "A donation-based campaign platform with embedded video, blog, and outreach.",
          "url": "/portfolio/matts-freedom-fundraiser"
        },
        {
          "title": "MatthewRaynor.com",
          "description": "My flagship website combining my story, blog, art store, and technical portfolio.",
          "url": "/portfolio/matthewraynor-com"
        },
        {
          "title": "Matt’s Bookstore API",
          "description": "A Django REST API bookstore project with Google SSO, reviews, and deployment.",
          "url": "/portfolio/matts-bookstore-api"
        },
        {
          "title": "AI Motivational Chatbot",
          "description": "An AI-powered real-time chat interface built to uplift, motivate, and support users.",
          "url": "/portfolio/ai-motivational-chatbot"
        },
        {
          "title": "Lotus Path Learning Platform",
          "description": "An AI-powered learning platform offering custom tutorials, quizzes, and progress tracking.",
          "url": "/portfolio/lotus-path-learning-platform"
        }
      ]
    },
    "store": {
      "products": [
        {
          "name": "Before Me After Me – A Visual Journey of Resilience and Transformation",
          "description": "A powerful visual memoir following Matthew Raynor’s journey from life as a commercial fisherman to a life-altering diving accident that left him paralyzed.",
          "price": "$35.00",
          "url": "/products/before-me-after-me"
        },
        {
          "name": "10 x 20 Headless Porgy",
          "description": "Premium aluminum print featured at Craig & Peter's.",
          "price": "$600.00",
          "url": "/products/10-x-20-headless-porgy"
        },
        {
          "name": "11 x 17 Church",
          "description": "Premium aluminum print featured at Craig & Peter's.",
          "price": "$560.00",
          "url": "/products/11-x-17-church"
        }
      ],
      "policies": {
        "accepted_payments": "/pages/accepted-payments",
        "shipping_and_return": "/pages/shipping-and-return-policy",
        "product_descriptions_and_sizing": "/pages/product-descriptions-and-sizing"
      }
    },
    "contact": {
      "email": "mnraynor90@gmail.com",
      "contact_page": "/pages/contact-information"
    },
    "chatbot": {
      "greeting": "Hi there! I'm here to help you explore Matthew Raynor's journey, portfolio, and shop. How can I assist you today?",
      "fallback": "I'm sorry, I didn't understand that. Could you please rephrase your question or try a different query?"
    }
  }
  
===== chat/data/ejartmover.json =====
{
    "project_name": "EJ Art Mover – Art Moving Business Management System",
    "summary": "A full-stack Django web application built to manage the operations of a small art moving business, including clients, work orders, scheduled job events, and invoicing. It centralizes scheduling and billing while providing an interactive dashboard and calendar system.",
    "features": {
      "user_authentication": {
        "description": "Login/logout using Django auth with dynamic navbar and conditional sidebar for authenticated users."
      },
      "dashboard": {
        "description": "A clean landing page with greeting, quick access buttons, and an embedded FullCalendar showing current work orders and invoices."
      },
      "calendar_system": {
        "views": ["month", "week", "day"],
        "data_sources": [
          "/workorders/calendar-data/workorders/",
          "/invoices/calendar-data/invoices/"
        ],
        "color_coding": {
          "work_orders": "unique per job",
          "invoices": {
            "paid": "green",
            "unpaid": "red",
            "overdue": "yellow"
          }
        },
        "interactions": ["click day → view detail", "click event → go to detail page", "print day view"]
      },
      "work_order_management": {
        "statuses": ["Pending", "Scheduled", "Completed"],
        "features": [
          "Inline formsets for event scheduling",
          "File attachments and job notes",
          "PDF export of work order",
          "Job status updates"
        ]
      },
      "invoicing_system": {
        "categories": ["Unpaid", "Paid", "Overdue"],
        "features": [
          "Invoice tied to client and work order",
          "Select2 client search with AJAX",
          "Flatpickr for due dates",
          "Invoice status badge system",
          "Invoice edit, print, and delete options",
          "Update paid date via modal"
        ]
      },
      "ui_ux": {
        "stack": ["Bootstrap 5", "Bootstrap Icons", "Select2", "Flatpickr", "FullCalendar"],
        "layout": "Responsive card-based layout with consistent headers, colors, and interactions.",
        "sidebar": "Offcanvas design with authenticated user display and section-based navigation"
      },
      "pdf_generation": {
        "tool": "WeasyPrint",
        "template": "Custom printable work order including client info, job description, events, and notes."
      }
    },
    "technical_stack": {
      "backend": ["Django 5.1.6", "PostgreSQL", "Docker", "Gunicorn", "Whitenoise"],
      "frontend": ["HTML/CSS", "Bootstrap 5", "JavaScript", "FullCalendar", "Select2", "Flatpickr"],
      "tools": ["WeasyPrint", "Crispy Forms", "Docker Compose", "Heroku"],
      "libraries": ["Select2", "Flatpickr", "FullCalendar", "Bootstrap Icons"]
    },
    "custom_features": [
      "Dynamic inline formsets for scheduling multiple events per work order",
      "AJAX-based Select2 client picker with live filtering",
      "Work order status logic based on event dates",
      "Color-coded calendar integration for both jobs and invoices",
      "Print-friendly pages for both invoices and daily schedules",
      "Interactive week view with day-header click routing"
    ],
    "problems_solved": [
      "Centralized work order tracking and coordination",
      "Improved scheduling through calendar and status logic",
      "Simplified client and job lookup with AJAX search",
      "Streamlined invoice creation and tracking",
      "Improved field team access with mobile-friendly interface",
      "Quick daily planning with printable day schedules"
    ],
    "improvements": [
      "Add user role support for workers vs managers",
      "Enable drag-and-drop calendar rescheduling",
      "Add Google Calendar integration",
      "Implement email or SMS reminders for jobs and invoices",
      "Export invoices or work orders to CSV",
      "Add analytics dashboard with revenue and job summaries"
    ],
    "portfolio_highlights": [
      "Demonstrates full-stack Django capability with modern frontend JS integrations",
      "Business-focused design based on real-world workflow",
      "Responsive layout with calendar planning and event logic",
      "PDF export, dynamic forms, and AJAX interactivity show advanced Django skills",
      "Clean code, logical structure, and feature completeness suitable for production use"
    ]
  }
  
===== chat/data/help_find_apartment.json =====
{
    "topic": "How to Help Matt Find an Apartment",
    "purpose": "Guide for friends, family, or volunteers to assist Matt Raynor in locating suitable housing",
    "contact": {
      "name": "Matt Raynor",
      "phone": "631-431-2019",
      "email": "mnraynor90@gmail.com"
    },
    "search_criteria": {
      "wheelchair_accessible": true,
      "max_rent": 2250,
      "location_radius_miles": 30,
      "exclude_regions": ["Connecticut"],
      "preferred_locations": ["Riverhead, NY", "Southampton, NY"],
      "subsidy": "Olmstead Housing Subsidy (OHS)",
      "floor_preferences": ["ground floor", "elevator access"],
      "amenities": ["accessible bathroom", "no stairs", "laundry on-site", "roll-in shower", "room for caregivers"]
    },
    "approved_sites": [
      {
        "name": "Apartments.com",
        "url": "https://www.apartments.com"
      },
      {
        "name": "Zillow Rentals",
        "url": "https://www.zillow.com"
      },
      {
        "name": "SocialServe",
        "url": "https://www.socialserve.com/"
      },
      {
        "name": "AffordableHousing.com",
        "url": "https://www.affordablehousing.com/"
      },
      {
        "name": "MyHousingSearch.com",
        "url": "https://www.myhousingsearch.com/"
      },
      {
        "name": "Craigslist Housing",
        "url": "https://newyork.craigslist.org/d/apartments-housing-for-rent/search/apa"
      },
      {
        "name": "Facebook Marketplace",
        "url": "https://www.facebook.com/marketplace"
      }
    ],
    "what_to_check": [
      "Is the unit wheelchair accessible?",
      "Does it accept housing subsidies (Olmstead or Section 8)?",
      "Is the rent at or below $2,250/month?",
      "Is the location within 30 miles of Riverhead or Southampton?",
      "Is there accessible entry and bathroom?",
      "Is there on-site laundry or a roll-in shower?",
      "Is there a phone number or email to contact the landlord?"
    ],
    "how_to_share_listings": {
      "instructions": "Copy/paste the link or take a screenshot and send it to Matt",
      "methods": ["text", "email"]
    },
    "why_it_matters": "Matt is a quadriplegic web developer and artist ready to move out of a nursing home. He needs safe, accessible housing to continue living independently and working remotely."
  }
  
===== chat/data/matthew_raynor_portfolio.json =====
{
  "project": "MatthewRaynor.com",
  "summary": "MatthewRaynor.com is a full-stack Django-based personal website built by Matthew Raynor, a quadriplegic full-stack developer. It combines e-commerce, blogging, AI chatbot integration, press coverage, and a developer portfolio into one cohesive site.",
  "tech_stack": {
    "frontend": [
      "HTML5",
      "SCSS (Sass)",
      "Bootstrap 5",
      "Flatpickr",
      "Select2",
      "FullCalendar",
      "ScrollReveal.js",
      "CKEditor",
      "Cloudinary",
      "JavaScript",
      "jQuery"
    ],
    "backend": [
      "Django 5.1",
      "PostgreSQL",
      "Django REST Framework",
      "Django Allauth",
      "Whitenoise",
      "Gunicorn",
      "WeasyPrint",
      "OpenAI SDK"
    ],
    "devops": [
      "Docker",
      "Docker Compose",
      "Heroku",
      "GitHub Actions",
      "django-environ"
    ]
  },
  "features": {
    "ai_chat_widget": "Floating chatbot integrated with OpenAI API. Context-aware and styled to match the site branding.",
    "store": "E-commerce store with Stripe checkout, product catalog for prints and memoir, custom emails, product reviews.",
    "blog": "Rich text blog with video and image support, comments, and fallback logic using CKEditor and Cloudinary.",
    "portfolio": "Case study-style project pages with structured sections and ScrollReveal animations.",
    "press": "Dynamically rendered press articles with image, summary, and external links.",
    "contact": "SMTP-enabled contact form with Gmail and reCAPTCHA integration.",
    "authentication": "Custom user model with email login and Google SSO, profile/dashboard, password management."
  },
  "problems_solved": [
    "Accessible navigation and layout",
    "Production-grade deployment with Docker and Heroku",
    "Client-friendly interfaces with contact and chatbot tools",
    "Income generation through product sales",
    "SEO-ready press and story pages for visibility"
  ],
  "special_features": [
    "Custom floating AI assistant",
    "ScrollReveal animation system",
    "Stripe Checkout integration with shipping",
    "Rich text editor with image/video support",
    "Case study-based portfolio",
    "Glass blur hero banners and custom SCSS theme"
  ],
  "improvements": [
    "Add chatbot memory and personalization",
    "Integrate Google Analytics or PostHog",
    "Perform full accessibility audit",
    "Add blog search and tagging system",
    "Enable Enter key and multiline input for chatbot"
  ],
  "proud_of": [
    "Self-taught Django, Docker, and frontend development with no hand function",
    "Complete full-stack production site independently built",
    "Powerful integrations across Stripe, OpenAI, SSO, and more",
    "Clear and inspiring storytelling combined with technical polish"
  ],
  "build_notes": [
    "Theme inspired by Crunchyroll, implemented in SCSS",
    "Reusable animation classes and delay system in _reveal.scss",
    "Graceful fallback for blog media",
    "Deployment via Heroku container stack with heroku.yml",
    "Environment variables handled with django-environ"
  ]
}
===== chat/data/react_workorders.json =====
{
    "project": {
      "id": "work_orders_app",
      "title": "React + Django Work Orders Management System",
      "short_description": "A full-stack application for creating, scheduling, and tracking work orders using Django REST API and a modern React frontend.",
      "detailed_description": "This is a professional full-stack Work Order Management System built using Django 5.1.6 and Django REST Framework on the backend, and React 19 with Vite and Tailwind CSS on the frontend. The system enables small businesses to create, schedule, and manage job orders with associated events, attachments, and notes. It supports nested event scheduling, file uploads, admin control, and calendar visualization. It is Dockerized and deployed via Heroku's container stack with secure production settings.",
      "features": [
        "Create, edit, view, and delete work orders with client name, job description, and status",
        "Add nested scheduled events to each work order (pickup, wrap, install, dropoff)",
        "Attach files and add internal notes to orders",
        "RESTful API endpoints for all entities using Django REST Framework",
        "Responsive UI with React Router and component-based structure",
        "Tailwind CSS styling and Vite development environment",
        "Calendar display using FullCalendar",
        "Secure production deployment with Gunicorn, Whitenoise, and Heroku container stack",
        "Docker support for development and production environments"
      ],
      "tech_stack": {
        "frontend": ["React 19", "Vite", "Tailwind CSS", "FullCalendar"],
        "backend": ["Django 5.1.6", "Django REST Framework", "django-environ", "gunicorn", "whitenoise"],
        "database": ["PostgreSQL"],
        "devops": ["Docker", "docker-compose", "Heroku (heroku.yml + container stack)"],
        "other": ["axios", "React Router", "eslint", "CORS"]
      },
      "deployment": {
        "platform": "Heroku",
        "method": "Docker container with heroku.yml",
        "security": [
          "HTTPS with Secure Proxy SSL Header",
          "HSTS settings in production",
          "Whitenoise for static files"
        ]
      },
      "tags": [
        "full_stack",
        "django_rest",
        "react_vite_tailwind",
        "dockerized_app",
        "calendar_scheduler",
        "heroku_deployment",
        "portfolio_project"
      ],
      "status": "live"
    }
  }
  
===== chat/data/about_matt.json =====
{
    "title": "Who Is Matthew Raynor?",
    "summary": "Matthew Raynor is a quadriplegic artist, web developer, writer, and spiritual seeker who transformed trauma into purpose. He lives at the intersection of sobriety, creativity, and compassion, offering technical skill and soul-deep wisdom.",
    "biography": {
      "former_life": "Deep-sea commercial fisherman and shellfish harvester in Shinnecock, NY.",
      "accident": "Suffered a spinal cord injury in a diving accident and became quadriplegic.",
      "recovery": "Overcame addiction, shame, and despair. Member of AA since age 26.",
      "self_reinvention": "Taught himself web development using styluses, voice commands, and hotkeys.",
      "current_mission": "Creates digital tools, art, and stories that help others navigate suffering and discover hope."
    },
    "spiritual_identity": [
      "SGI Nichiren Buddhist",
      "Taoist (Tao Te Ching, Hua Hu Ching)",
      "Student of Zen and Stoicism",
      "Sober member of Alcoholics Anonymous"
    ],
    "daily_practice": [
      "Chanting Nam-myoho-renge-kyo (SGI Buddhism)",
      "Reading Taoist texts and Stoic reflections",
      "Silent meditation and breathwork",
      "Gratitude journaling and mantra repetition",
      "Affirmations like: 'Do your work, then step back.' and 'Even tired, I am whole.'"
    ],
    "core_beliefs": [
      "Love is the highest power — God is love.",
      "Suffering is a teacher, not an enemy.",
      "You can build and grow without clinging to the outcome.",
      "Presence is deeper than performance or progress.",
      "True integrity matters more than fame or validation.",
      "Purpose is found in helping others rise."
    ],
    "values": [
      "Presence over performance",
      "Sincerity over perfection",
      "Healing through truth",
      "Growth without attachment",
      "Joyful creation over proving worth",
      "Spiritual freedom through emotional alignment"
    ],
    "current_work": {
      "developer": "Full-stack developer (Django + React) with production-level experience",
      "projects": [
        "Art Moving Business Management System",
        "E-commerce platform (store for book/art)",
        "AI-powered motivational chatbot",
        "Personal website MatthewRaynor.com"
      ],
      "storyteller": "Publishes essays on sobriety, compassion, and growth on Substack and TikTok",
      "artist": "Exhibits drone and seascape photography; sells aluminum art prints",
      "mentor": "Uplifts others through his digital presence and one-on-one recovery work"
    },
    "transformation": {
      "from": "Addiction, despair, immobility, shame",
      "to": "Sobriety, clarity, technical mastery, emotional healing",
      "message": "He rebuilt everything from nothing. Not a victim — a creator and guide."
    },
    "support_options": [
      "Share Matt’s story on social media",
      "Hire him for web development or drone photography",
      "Buy his book or art prints",
      "Donate to his fundraiser to support housing and care needs",
      "Send words of encouragement — every message matters",
      "Offer help with his documentary project"
    ],
    "tone": "Grounded, wise, compassionate, resilient"
  }
  
===== chat/data/fundraiser.json =====
{
    "fundraiser": {
      "title": "Matt’s Freedom Fundraiser",
      "description": "Matt’s Freedom Fundraiser is about helping me, Matt Raynor, a C5 quadriplegic, transition from life in a nursing home into independent living after a year and a half of institutional care. I’ve secured a housing subsidy but am currently searching for an accessible apartment that can accommodate my needs. Until then, I’m raising funds to cover essential living expenses so I can safely and sustainably move out.",
      "goals": [
        "Cover out-of-pocket caregiver costs during coverage gaps",
        "Pay for rent, groceries, utilities, and personal care supplies",
        "Purchase and maintain medical essentials like catheters and gloves",
        "Set up a Special Needs Trust to protect Medicaid eligibility",
        "Fund transportation and accessibility needs during apartment search"
      ],
      "creator": {
        "name": "Matt Raynor",
        "condition": "C5 quadriplegic",
        "skills": [
          "Python",
          "Django",
          "Web development",
          "Bootstrap",
          "Digital storytelling"
        ],
        "goal": "Regain independence and dignity through housing and self-employment"
      },
      "status": {
        "housing": "Currently searching for accessible apartment",
        "care": "Receiving Medicaid-funded long-term care, gaps in coverage exist",
        "income": "Not currently employed; seeking sustainable freelance/remote work"
      },
      "links": {
        "website": "https://www.mattsfreedomfundraiser.com",
        "gofundme": "https://tinyurl.com/yrmf3u7d",
        "instagram": "https://www.instagram.com/mattsfreedomfundraiser/",
        "facebook": "https://www.facebook.com/MattsFreedomFundraiser"
      },
      "media": {
        "video": "Promotional video explaining fundraiser and journey",
        "flyer": "Printable campaign flyer available",
        "images": [
          "Group photo with Buddhist sangha",
          "Laptop-in-lap photo from nursing home"
        ]
      },
      "how_to_help": [
        "Donate via GoFundMe",
        "Share the fundraiser on social media",
        "Suggest accessible apartments on Long Island",
        "Refer reliable CDPAP caregivers",
        "Invite media or local press contacts to feature Matt's story"
      ]
    }
  }
  
===== chat/data/care_needs.json =====
{
    "care_needs": {
      "primary": "Daily suppository administration to ensure regular bowel movements.",
      "additional": [
        "Transfers and positioning",
        "Dressing, hygiene, and grooming",
        "Meal preparation and feeding",
        "Medication reminders",
        "Wheelchair charging and setup",
        "Assistance with computer and adaptive tech",
        "Monitoring for skin integrity and health"
      ]
    },
    "eligible_caretakers": {
      "can_be": [
        "Friends",
        "Extended family",
        "Roommates",
        "Neighbors",
        "Community members"
      ],
      "cannot_be": [
        "Spouses",
        "Parents of minors"
      ],
      "notes": "No medical license or certification is required. Caretakers are trained and supervised by Matt directly through CDPAP."
    },
    "responsibilities": [
      "Assist with suppository insertion and cleanup",
      "Help with daily hygiene tasks like bathing and grooming",
      "Provide physical support (e.g., Hoyer lift transfers)",
      "Prepare meals and assist with eating if needed",
      "Assist with basic cleaning and daily tasks",
      "Support use of technology and daily routines"
    ],
    "registration_process": {
      "step_1": {
        "description": "Matt undergoes an assessment with a Medicaid nurse via TBI/NHTD waiver or MLTC plan.",
        "outcome": "Determines weekly authorized care hours."
      },
      "step_2": {
        "description": "Matt selects a Fiscal Intermediary (FI) to manage payroll and timesheets.",
        "examples": ["FreedomCare", "Concepts of Independence", "StellaFi"]
      },
      "step_3": {
        "description": "Caretaker applies through the FI with required documentation.",
        "requirements": [
          "Government-issued ID",
          "Social Security Number",
          "Physical exam with TB test",
          "Signed employment paperwork",
          "Training in electronic visit verification (EVV)"
        ]
      },
      "step_4": {
        "description": "Caretaker begins work and is paid directly by the FI.",
        "notes": "Caretaker is a W-2 employee. Pay ranges from $16–$21/hr depending on location and agency."
      }
    },
    "additional_notes": {
      "backup_caregivers": "Matt can register backup caregivers in case the primary is unavailable.",
      "independence": "The caretaker is directed by Matt, not by a nurse or agency.",
      "tech_support": "Caretakers should be comfortable helping set up devices and communication tools if needed."
    }
  }
  
===== chat/data/assistance.json =====
{
    "title": "Matt Raynor – Assistance Overview",
    "last_updated": "May 2025",
    "summary": "Matt is a talented, self-taught full-stack web developer and quadriplegic (C5–C6) who is transitioning out of a nursing home. He is actively seeking employment, independent housing with appropriate subsidies, and consistent personal care to live and work autonomously.",
    "job_search": {
      "goals": [
        "Secure a remote-friendly full-time or freelance web development role",
        "Avoid live coding/whiteboard interviews due to his disability",
        "Highlight his adaptive tech usage (styluses, AI tools)"
      ],
      "skills_stack": {
        "backend": ["Django", "Django REST Framework", "PostgreSQL", "Docker", "Heroku", "Stripe", "OpenAI"],
        "frontend": ["React (1 month)", "Bootstrap", "Tailwind", "CKEditor", "Cloudinary"],
        "devops": ["Docker", "Git", "GitHub CI", "deployment automation"],
        "content": ["Substack", "YouTube/TikTok embedding", "custom blog CMS", "AI chatbot widget"]
      },
      "portfolio": {
        "matthewraynor": "https://www.matthewraynor.com",
        "art_moving_app": "https://art-moving-buisness-0a734245a61f.herokuapp.com",
        "bookstore": "https://mattsbookstore-c15521949514.herokuapp.com",
        "fundraiser": "Live version TBD"
      },
      "barriers": [
        "Discriminatory interviews favoring memorization",
        "Needs value shown through portfolio, not trivia",
        "Workflow flexibility required"
      ],
      "ideal_roles": [
        "Startups hiring based on portfolio",
        "Backend/frontend roles without live testing",
        "Remote-first environments"
      ]
    },
    "housing_search": {
      "goal": "Move into independent subsidized housing with 24/7 care",
      "status": "Approved for Olmstead Housing Subsidy (OHS)",
      "details": {
        "amount": "$2,250/month",
        "coordination": ["SILO", "Medicaid"],
        "barriers": ["Waitlists", "Accessibility", "Landlord education"]
      }
    },
    "caregiving_support": {
      "needs": [
        "Daily support with ADLs",
        "Bowel program, hygiene, transfers, feeding"
      ],
      "support_options": ["CDPAP", "TBI Waiver", "Medicaid Service Coordinators"],
      "barriers": [
        "Inconsistent aides",
        "Needs aide skilled in tech and independent living"
      ]
    },
    "why_help": [
      "Overcame injury, addiction, and nursing home life",
      "Self-taught developer and content creator",
      "Helping others through blogs, chatbot, and videos"
    ]
  }
  

===== Templates =====

===== templates/home.html =====
{% extends "base.html" %}
{% load static %}
{% load embed_video_tags %}

{% block title %}Matthew Raynor – Home{% endblock %}

{% block content %}
<div class="container-fluid p-0">

  <!-- HERO SECTION -->
  <section class="hero text-white text-center d-flex align-items-center position-relative fade-in-up sr-delay-1"
           style="background: url('{% static 'images/hero.png' %}') center/cover no-repeat; height: 90vh;">
    <div class="position-absolute top-0 start-0 w-100 h-100" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1;"></div>
    <div class="container position-relative z-2">
      <div class="p-4 rounded-4 bg-dark bg-opacity-50 shadow-lg d-inline-block">
        <h1 class="display-4 fw-bold text-shadow">From Sea to Source Code</h1>
        <p class="lead">Writer • Developer • Artist • Entertainer</p>
        <a href="{% url 'store:store_overview' %}" class="btn btn-primary btn-lg mt-3">Explore My Store</a>
        <a href="{% url 'post_list' %}" class="btn btn-outline-light btn-lg mt-3 ms-2">Check the V/Blog</a>
      </div>
    </div>
  </section>

  <!-- MY STORY -->
  <section class="py-5 bg-light fade-in-up sr-delay-2">
    <div class="container">
      <div class="row align-items-center">
        <div class="col-md-6 mb-4 mb-md-0">
          <img src="{% static 'images/matthew_portrait.png' %}" class="img-fluid rounded shadow" alt="Matthew Raynor Portrait">
        </div>
        <div class="col-md-6">
          <h2 class="fw-bold">My Journey</h2>
          <p class="lead">Once a commercial fisherman, I became quadriplegic after a life-altering injury. But I turned pain into purpose, teaching myself to code with a stylus, building apps, and inspiring others through writing and art.</p>
          <a href="{% url 'pages:story' %}" class="btn btn-outline-primary">Read More</a>
        </div>
      </div>
    </div>
  </section>

  <!-- FEATURED BOOK & ART -->
  <section class="py-5 fade-in-up sr-delay-3">
    <div class="container text-center">
      <h2 class="fw-bold mb-4">Featured Shop</h2>
      <div class="row justify-content-center">
        <div class="col-md-4 mb-3 fade-in-up sr-delay-4">
          <div class="card h-100 shadow">
            <img src="{% static 'images/book_cover.jpg' %}" class="card-img-top" alt="Before Me After Me Book Cover">
            <div class="card-body">
              <h5 class="card-title">Before Me After Me</h5>
              <p class="card-text">My memoir of resilience, technology, and transformation.</p>
              <a href="{% url 'store:store_overview' %}" class="btn btn-primary">Buy the Book</a>
            </div>
          </div>
        </div>
        <div class="col-md-4 mb-3 fade-in-up sr-delay-5">
          <div class="card h-100 shadow">
            <img src="{% static 'images/art_sample.jpg' %}" class="card-img-top" alt="Aluminum Artwork">
            <div class="card-body">
              <h5 class="card-title">Aluminum Prints</h5>
              <p class="card-text">Oceanic photography infused with strength and serenity.</p>
              <a href="{% url 'store:store_overview' %}" class="btn btn-outline-primary">View Artwork</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- PORTFOLIO PREVIEW -->
  <section class="py-5 bg-light fade-in-up sr-delay-6">
    <div class="container">
      <h2 class="text-center fw-bold mb-4">My Development Projects</h2>
      <div class="row text-center">
        <div class="col-md-4 fade-in-up sr-delay-7">
          <h5 class="fw-bold">Art Mover App</h5>
          <p>Logistics tool for scheduling and invoicing art shipments.</p>
        </div>
        <div class="col-md-4 fade-in-up sr-delay-8">
          <h5 class="fw-bold">Bookstore API</h5>
          <p>REST-powered Django API with authentication and rating system.</p>
        </div>
        <div class="col-md-4 fade-in-up sr-delay-9">
          <h5 class="fw-bold">Fundraiser Website</h5>
          <p>Dynamic site with embedded video, donations, and blogging tools.</p>
        </div>
      </div>
      <div class="text-center mt-4">
        <a href="{% url 'portfolio:index' %}" class="btn btn-outline-dark">View Full Portfolio</a>
      </div>
    </div>
  </section>

  <!-- BLOG PREVIEW -->
  <!-- BLOG PREVIEW -->
  <section class="py-5 fade-in-up sr-delay-10">
    <div class="container">
      <h2 class="text-center fw-bold mb-4">Recent Blog Posts</h2>
      <p class="lead text-center">My hilarious and entertaining videos paired with inspirational writing</p>

      <div class="row">
        {% for post in recent_posts %}
          <div class="col-md-4 mb-4 fade-in-up sr-delay-{{ forloop.counter }}">
            <div class="card h-100 shadow-sm">
              <div class="ratio ratio-16x9">
                {% if post.video %}
                  {% video post.video 'small' %}
                {% elif post.image %}
                  <img src="{{ post.image.url }}" class="card-img-top object-fit-cover" alt="{{ post.title }}" style="height: 100%; width: 100%;">
                {% else %}
                  <img src="https://source.unsplash.com/400x250/?technology,writing" class="card-img-top object-fit-cover" alt="Fallback Blog Image" style="height: 100%; width: 100%;">
                {% endif %}
              </div>
              <div class="card-body">
                <h5 class="card-title">
                  <a href="{% url 'post_detail' post.slug %}" class="text-decoration-none text-dark fw-bold">
                    {{ post.title }}
                  </a>
                </h5>
                <p class="text-muted">Updated on {{ post.updated_date|date:"F d, Y" }}</p>
                <p>{{ post.content|truncatewords:30|safe }}</p>
                <a href="{% url 'post_detail' post.slug %}" class="btn btn-outline-primary">Read More</a>
              </div>
            </div>
          </div>
        {% empty %}
          <p class="text-center">No posts yet. Stay tuned!</p>
        {% endfor %}
      </div>

      <div class="text-center mt-4">
        <a href="{% url 'post_list' %}" class="btn btn-primary">Go to Blog</a>
      </div>
    </div>
  </section>


  <!-- CONNECT CTA -->
  <section class="py-5 position-relative text-center fade-in-up sr-delay-11" style="background-color: rgba(255, 248, 225, 0.85);">
    <div class="container text-dark">
      <h2 class="fw-bold">Let’s Connect</h2>
      <p class="mb-4">Got questions about my work? Need a website? Need an application? Need custom photography?</p>
      <a href="{% url 'pages:contact' %}" class="btn btn-primary btn-lg">Contact Me</a>
    </div>
  </section>

</div>
{% endblock %}

===== templates/chat/chat_interface.html =====
{% extends "base.html" %}

{% block title %}AI Chat Assistant{% endblock %}

{% block content %}
<div class="container py-5">
  <h2 class="text-center mb-4">AI Assistant</h2>
  <div id="chat-box" class="border rounded p-3 mb-3" style="height: 300px; overflow-y: auto; background: #f9f9f9;">
    <p><strong>AI:</strong> Hello! How can I assist you today?</p>
  </div>
  <form id="chat-form">
    <div class="input-group">
      <input type="text" id="user-input" class="form-control" placeholder="Type your message...">
      <button class="btn btn-primary" type="submit">Send</button>
    </div>
  </form>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.getElementById("chat-form").addEventListener("submit", async function(event) {
  event.preventDefault();
  const input = document.getElementById("user-input");
  const message = input.value.trim();
  if (!message) return;

  const chatBox = document.getElementById("chat-box");
  chatBox.innerHTML += `<p><strong>You:</strong> ${message}</p>`;
  input.value = "";

  // Send to backend (to be implemented)
  const response = await fetch("/chat/api/message/", {
    method: "POST",
    headers: { "Content-Type": "application/json", "X-CSRFToken": "{{ csrf_token }}" },
    body: JSON.stringify({ message })
  });
  const data = await response.json();
  chatBox.innerHTML += `<p><strong>AI:</strong> ${data.reply}</p>`;
  chatBox.scrollTop = chatBox.scrollHeight;
});
</script>
{% endblock %}

===== templates/chat/chat_widget.html =====

===== templates/base.html =====
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}MatthewRaynor.com{% endblock %}</title>

  <!-- Favicon -->
  <link rel="icon" type="image/png" sizes="64x64" href="{% static 'images/icon.png' %}">

  <!-- Font Awesome for Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="{% static 'css/custom.css' %}">

  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&family=Montserrat:wght@400;700&family=Open+Sans&display=swap" rel="stylesheet">

  <!-- Flatpickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

  <!-- Optional Additional Styles -->
  <link rel="stylesheet" href="{% static 'css/style.css' %}">

  {% block extra_css %}
  <style>
    .nav-icon {
      height: 40px;
      margin-right: 10px;
    }
  </style>
  {% endblock %}
</head>
<body>
  <!-- Desktop Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-crunchy d-none d-lg-flex">
    <div class="container">
      <a class="navbar-brand fw-bold" href="{% url 'pages:home' %}">
        <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
        <span class="brand-text">Matthew Raynor</span>
      </a>
      <div class="collapse navbar-collapse" id="navbarDesktop">
        <ul class="navbar-nav ms-3 me-auto">
          <li class="nav-item"><a class="nav-link" href="{% url 'pages:story' %}">Story</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'portfolio:index' %}">Portfolio</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'pages:press' %}">Press</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'pages:contact' %}">Contact</a></li>
          <li class="nav-item store"><a class="nav-link" href="{% url 'store:store_overview' %}">Store</a></li>
        </ul>
        <form class="d-flex me-3">
          <input class="form-control search-input" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-light" type="submit">Search</button>
        </form>
        <ul class="navbar-nav">
          {% if user.is_authenticated %}
            <li class="nav-item"><a class="nav-link" href="{% url 'dashboard' %}">Dashboard</a></li>
            <li class="nav-item"><a class="nav-link" href="{% url 'logout' %}">Logout</a></li>
          {% else %}
            <li class="nav-item"><a class="nav-link" href="{% url 'account_login' %}">Login</a></li>
          {% endif %}
          <li class="nav-item">
            <a class="nav-link" href="{% url 'store:cart_detail' %}">
              <i class="fas fa-shopping-cart me-1"></i> Cart
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  

  <!-- Mobile Navbar & Offcanvas -->
  <div class="d-lg-none">
    <nav class="navbar navbar-dark bg-crunchy">
      <div class="container">
        <a class="navbar-brand fw-bold" href="{% url 'pages:home' %}">
          <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
          <span class="brand-text">Matthew Raynor</span>
        </a>
        <button class="btn btn-outline-light" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSidebar"
                aria-controls="offcanvasSidebar">
          Menu
        </button>
      </div>
    </nav>
  </div>

  <div class="offcanvas offcanvas-start d-lg-none" tabindex="-1" id="offcanvasSidebar" aria-labelledby="offcanvasSidebarLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="offcanvasSidebarLabel">
        <img src="{% static 'images/icon.png' %}" alt="Site Icon" class="nav-icon">
        <span class="brand-text">Matthew Raynor</span>
      </h5>
      <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      <ul class="list-unstyled">
        <li><a class="offcanvas-link" href="{% url 'post_list' %}">Blog</a></li>
        <li><a class="offcanvas-link" href="{% url 'portfolio:index' %}">Portfolio</a></li>
        <li><a class="offcanvas-link" href="{% url 'pages:press' %}">Press</a></li>
        <li><a class="offcanvas-link" href="{% url 'pages:contact' %}">Contact</a></li>
        <li class="divider">|</li>
        <li><a class="offcanvas-link" href="{% url 'store:store_overview' %}">Store</a></li>
      </ul>
      <div class="mt-3">
        <form class="d-flex">
          <input class="form-control" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-light" type="submit">Search</button>
        </form>
      </div>
      <div class="mt-3">
        {% if user.is_authenticated %}
          <a class="btn btn-outline-light w-100 mb-2" href="{% url 'dashboard' %}">
            <i class="fas fa-user-circle me-2"></i> Dashboard
          </a>
          <a class="btn btn-outline-light w-100 mb-2" href="{% url 'store:cart_detail' %}">
            <i class="fas fa-shopping-cart me-2"></i> Cart
          </a>
          <a class="btn btn-outline-light w-100" href="{% url 'logout' %}">
            <i class="fas fa-sign-out-alt me-2"></i> Logout
          </a>
        {% else %}
          <a class="btn btn-outline-light w-100 mb-2" href="{% url 'account_login' %}">
            <i class="fas fa-sign-in-alt me-2"></i> Login
          </a>
          <a class="btn btn-outline-light w-100" href="{% url 'store:cart_detail' %}">
            <i class="fas fa-shopping-cart me-2"></i> Cart
          </a>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="container mt-4">
    {% block content %}{% endblock %}
  </main>

  <!-- Footer -->
  <!-- Footer -->
  <footer class="mt-4 bg-crunchy text-white text-center py-4">
    <div class="container">
      <p class="mb-3">&copy; {% now "Y" %} MatthewRaynor.com V7.0</p>
      <div class="mb-2">
        <a href="https://www.tiktok.com/@matttyrayna" target="_blank" class="text-white me-3">
          <i class="fab fa-tiktok fa-lg"></i>
        </a>
        <a href="https://www.instagram.com/matthewraynorig/" target="_blank" class="text-white me-3">
          <i class="fab fa-instagram fa-lg"></i>
        </a>
        <a href="https://www.linkedin.com/in/matthew-raynor-2b3618200/" target="_blank" class="text-white me-3">
          <i class="fab fa-linkedin fa-lg"></i>
        </a>
        <a href="https://github.com/mattyray" target="_blank" class="text-white me-3">
          <i class="fab fa-github fa-lg"></i>
        </a>
        <a href="https://substack.com/@mnraynor90" target="_blank" class="text-white text-decoration-none me-3">
          <i class="fas fa-book-open fa-lg"></i>
        </a>
      </div>
      <p class="mb-0">Email: <a href="mailto:mnraynor90@gmail.com" class="text-white">mnraynor90@gmail.com</a></p>
    </div>
  </footer>
  
  </footer>


  <!-- AI Chatbot -->
  <div id="ai-chatbot" class="chat-widget">
    <div id="ai-chatbot-header" class="chat-header">AI Assistant <span id="ai-chatbot-close" class="chat-close">&times;</span></div>
    <div id="ai-chatbot-body" class="chat-body"><p>Hello! How can I assist you today?</p></div>
    <div id="ai-chatbot-input" class="chat-input">
      <input type="text" placeholder="Type your message..." class="form-control">
    </div>
  </div>
  <button id="ai-chatbot-toggle" class="btn chat-toggle">Chat</button>

  <!-- JS Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script src="https://unpkg.com/scrollreveal"></script>

  {% block extra_js %}{% endblock %}
  
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      flatpickr(".datepicker", { dateFormat: "Y-m-d" });
      document.querySelectorAll(".select2").forEach(el => {
        $(el).select2({ width: "100%" });
      });
  
      $('#ai-chatbot-toggle').click(function () {
        $('#ai-chatbot').toggle();
      });
  
      $('#ai-chatbot-close').click(function () {
        $('#ai-chatbot').hide();
      });
  
      // ✅ Updated: more reliable Enter detection and logging for debugging
      const $input = $('#ai-chatbot-input input');
      if ($input.length) {
        console.log("✅ Chatbot input field found");
  
        $input.on('keydown', function (e) {
          if (e.key === "Enter" && this.value.trim() !== "") {
            const message = this.value;
            this.value = "";
            $('#ai-chatbot-body').append(`<p><strong>You:</strong> ${message}</p>`);
  
            fetch("/chat/api/", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ message: message })
            })
            .then(response => response.json())
            .then(data => {
              const reply = data.reply || data.error || "Sorry, something went wrong.";
              $('#ai-chatbot-body').append(`<p><strong>AI:</strong> ${reply}</p>`);
              $('#ai-chatbot-body').scrollTop($('#ai-chatbot-body')[0].scrollHeight);
            });
          }
        });
      } else {
        console.warn("⚠️ Could not find chatbot input field!");
      }
  
      ScrollReveal().reveal('.fade-in-up', {
        distance: '20px',
        duration: 600,
        easing: 'ease-out',
        origin: 'bottom',
        opacity: 0,
        interval: 100,
        reset: false,
        cleanup: true
      });
    });
  </script>
  
===== templates/socialaccount/login.html =====
{% extends "base.html" %}
{% load socialaccount %}

{% block title %}Continue with Google{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">
      <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google Logo" width="40" class="mb-3" />
      <h2 class="h4 mb-3">Sign in with Google</h2>
      <p class="text-muted mb-4">Use your Google account to sign in to MatthewRaynor.com</p>

      <!-- Real Google Sign-In Button -->
      <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-light border d-flex align-items-center justify-content-center w-100 shadow-sm" style="gap: 10px; height: 48px;">
          <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google" style="width:20px;">
          <span class="fw-semibold">Continue with Google</span>
        </button>
      </form>

      <div class="mt-4">
        <a href="{% url 'account_login' %}" class="small text-muted">Back to login</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/socialaccount/signup.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Complete Signup{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">
      <h2 class="h4 mb-3">Almost there...</h2>
      <p class="text-muted mb-4">
        Please confirm or complete the details below to finish signing up.
      </p>

      <form method="post" class="text-start">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary w-100 mt-3">Finish Signup</button>
      </form>

      <div class="mt-4">
        <a href="{% url 'account_logout' %}" class="small text-muted">Cancel and return</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/blog/post_list.html =====
{% extends 'base.html' %}
{% load static %} 
{% load embed_video_tags %}

{% block title %}Blog – Updates & Stories{% endblock %}

{% block content %}
<div class="container mt-5 fade-in-up">
  <h1 class="text-center fw-bold">Latest Blog Posts</h1>
  <p class="lead text-center">Follow my journey and stay updated.</p>

  <div class="row">
    {% for post in posts %}
      <div class="col-md-12 mb-4 fade-in-up sr-delay-{{ forloop.counter }}">
        <div class="card shadow-sm">
          <div class="row g-0 align-items-center">
            
            <!-- Media Column -->
            <!-- Media Column -->
            <div class="col-md-4">
              {% if post.video %}
                <div class="ratio ratio-16x9">
                  {% video post.video 'small' %}
                </div>
              {% elif post.image %}
                <div class="ratio ratio-16x9">
                  <img src="{{ post.image.url }}" class="img-fluid rounded-start object-fit-cover" style="width: 100%; height: 100%;" alt="{{ post.title }}">
                </div>
              {% else %}
                <div class="ratio ratio-16x9">
                  <img src="https://source.unsplash.com/400x250/?technology,writing" class="img-fluid rounded-start object-fit-cover" style="width: 100%; height: 100%;" alt="Default blog image">
                </div>
              {% endif %}
            </div>


            <!-- Text Column -->
            <div class="col-md-8">
              <div class="card-body">
                <h4 class="card-title">
                  <a href="{% url 'post_detail' post.slug %}" class="text-dark text-decoration-none fw-bold">
                    {{ post.title }}
                  </a>
                </h4>
                <p class="text-muted">Published on {{ post.published_date|date:"F d, Y" }}</p>
                <p>{{ post.content|truncatewords:30|safe }}</p>
                <a href="{% url 'post_detail' post.slug %}" class="btn btn-outline-primary">Read More</a>
              </div>
            </div>

          </div>
        </div>
      </div>
    {% empty %}
      <p class="text-center">No blog posts yet. Stay tuned!</p>
    {% endfor %}
  </div>
</div>
{% endblock %}

===== templates/blog/post_detail.html =====
{% extends 'base.html' %}
{% load static %} 
{% load embed_video_tags %}
{% load crispy_forms_tags %}

{% block title %}{{ post.title }} – Blog{% endblock %}

{% block content %}
<div class="container mt-5 fade-in-up">

  <!-- Blog Post Card -->
  <div class="card shadow-lg fade-in-up">
    <div class="card-body">
      <h1 class="fw-bold">{{ post.title }}</h1>
      <p class="text-muted">Published on {{ post.published_date|date:"F d, Y" }}</p>

      <!-- Media Section: Video > Image > Fallback -->
      {% if post.video %}
        <div class="ratio ratio-16x9 my-4">
          {% video post.video 'large' %}
        </div>
      {% elif post.image %}
        <img src="{{ post.image.url }}" class="img-fluid rounded shadow my-4" alt="{{ post.title }}">
      {% else %}
        <img src="https://source.unsplash.com/800x400/?technology,resilience" class="img-fluid rounded shadow my-4" alt="Fallback Blog Image">
      {% endif %}

      <!-- Render CKEditor content as rich HTML -->
      <div class="lead ck-content">
        {{ post.content|safe }}
      </div>

      <!-- Back Button -->
      <a href="{% url 'post_list' %}" class="btn btn-secondary mt-4">← Back to Blog</a>
    </div>
  </div>

  <!-- Comments Section -->
  <div class="mt-5 fade-in-up">
    <h3 class="mb-4">Comments</h3>
    {% if comments %}
      <ul class="list-unstyled">
        {% for comment in comments %}
          <li class="mb-3">
            <strong>{% if comment.user %}{{ comment.user }}{% else %}{{ comment.name }}{% endif %}</strong> said:
            <p>{{ comment.content|linebreaks }}</p>
            <small class="text-muted">{{ comment.created_at|date:"M d, Y H:i" }}</small>
          </li>
        {% endfor %}
      </ul>
    {% else %}
      <p>No comments yet. Be the first to comment!</p>
    {% endif %}

    <!-- Comment Form -->
    <h4 class="mt-4">Leave a Comment</h4>
    <form method="post">
      {% csrf_token %}
      {{ form|crispy }}
      <button type="submit" class="btn btn-primary mt-2">Submit Comment</button>
    </form>
  </div>

</div>
{% endblock %}

===== templates/portfolio/index.html =====
{% extends "base.html" %}
{% load static %}

{% block title %}Portfolio - Matthew Raynor{% endblock %}

{% block content %}

<div class="container mt-5 case-section fade-in-up">

  <!-- Section Heading -->
  <h1 class="fw-bold text-center mb-3">My Portfolio</h1>
  <p class="lead text-center mb-5">Explore a selection of real-world projects I’ve built—from logistics systems to creative campaign sites. Each case study highlights how I use code to solve problems, streamline workflows, and bring ideas to life with purpose and precision.</p>

  <!-- Project Cards -->
  <div class="row justify-content-center">
    {% for project in projects %}
    <div class="col-md-6 col-lg-4 mb-4 fade-in-up sr-delay-{{ forloop.counter0|add:"1" }}">
      <div class="card h-100 shadow-sm">
        <div class="ratio ratio-4x3">
          <img src="{% static project.hero_image %}" class="card-img-top object-fit-cover" alt="{{ project.title }}">
        </div>
        <div class="card-body d-flex flex-column">
          <h5 class="card-title">{{ project.title }}</h5>
          <p class="card-text">{{ project.description|truncatewords:20 }}</p>
          <div class="mt-auto">
            <a href="{% url 'portfolio:project_detail' project.slug %}" class="btn btn-outline-primary w-100">View Project</a>
          </div>
        </div>
      </div>
    </div>
    {% endfor %}
  </div>

  <!-- Detailed Description Section -->
  <div class="row align-items-center mt-5 fade-in-up sr-delay-7">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/matt-fowlers.jpeg' %}" class="img-fluid rounded shadow" alt="Matthew Raynor Portrait">
    </div>
    <div class="col-md-6">
      <h3 class="fw-bold mb-3">What I Offer</h3>
      <p>Whether you're a business owner in need of a custom web application or a company looking for a passionate developer, I build software that works in the real world.</p>
      <p>I'm <strong>Matthew Raynor</strong>—a former commercial fisherman turned full-stack web developer after a life-changing spinal cord injury. I taught myself how to code without the use of my hands, learning Django and Python from scratch with a stylus and sheer determination. That same determination drives every project I build today.</p>
      <p>I’ve developed a <strong>full-featured logistics and invoicing system for an art moving company</strong>, complete with client management, calendar-based job scheduling, PDF invoicing, and drag-and-drop UI. I’ve built an <strong>e-commerce store</strong>, a <strong>donation platform</strong> with blog and video integration, and an <strong>AI chatbot</strong> using OpenAI’s API for real-time support.</p>
      <p>For <strong>clients</strong>, I create secure, scalable, and easy-to-use web apps tailored to your workflow. For <strong>employers</strong>, I bring production-level skills in Django, Docker, PostgreSQL, React, and a lived perspective on problem-solving, perseverance, and accessibility. I build with both code and compassion—and I’m ready to add value from day one.</p>
    </div>
  </div>

</div>

{% endblock %}

===== templates/portfolio/detail.html =====
{% extends "base.html" %}
{% load static %}

{% block title %}{{ project.title }} – Portfolio{% endblock %}

{% block content %}
<div class="container my-5">

  <!-- Back Link -->
  <a href="{% url 'portfolio:index' %}" class="btn btn-outline-dark">← Back to Portfolio</a>

  <!-- HERO HEADER -->
  <div class="text-center case-section fade-in-up mb-4">
    <h1 class="fw-bold">{{ project.title }}</h1>
    <p class="lead text-muted">{{ project.description }}</p>
    <div class="mt-3">
      {% if project.github_url %}
        <a href="{{ project.github_url }}" class="btn btn-dark me-2" target="_blank">💻 GitHub</a>
      {% endif %}
      {% if project.live_url %}
        <a href="{{ project.live_url }}" class="btn btn-primary" target="_blank">🌍 Live Site</a>
      {% endif %}
    </div>
  </div>

  <!-- HERO IMAGE -->
  {% if project.hero_image %}
  <div class="text-center mb-5 case-section fade-in-up">
    <img src="{% static project.hero_image %}" class="img-fluid rounded shadow-sm" alt="{{ project.title }}" style="max-height: 400px; object-fit: cover; width: 100%; max-width: 960px;">
  </div>
  {% endif %}

  <!-- OVERVIEW -->
  {% if project.overview %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">📌 Overview</h3>
      <p class="card-text">{{ project.overview }}</p>
    </div>
  </div>
  {% endif %}

  <!-- PROBLEM & SOLUTION -->
  <div class="row mb-4 case-section fade-in-up">
    {% if project.problem %}
    <div class="col-md-6 mb-3 mb-md-0">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h4 class="card-title">🧩 The Problem</h4>
          <p>{{ project.problem }}</p>
        </div>
      </div>
    </div>
    {% endif %}
    {% if project.solution %}
    <div class="col-md-6">
      <div class="card h-100 shadow-sm">
        <div class="card-body">
          <h4 class="card-title">💡 The Solution</h4>
          <p>{{ project.solution }}</p>
        </div>
      </div>
    </div>
    {% endif %}
  </div>

  <!-- TECH STACK -->
  {% if project.tech_stack %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">🛠️ Tech Stack</h3>
      <div class="row">
        {% for category, tools in project.tech_stack.items %}
        <div class="col-md-6 mb-3">
          <strong class="text-muted">{{ category|title }}:</strong>
          <div class="mt-2">
            {% for tool in tools %}
              <span class="tech-pill">
                {% if tool == "Django" %}<i class="fab fa-python me-1"></i>{% endif %}
                {% if tool == "Python" %}<i class="fas fa-code me-1"></i>{% endif %}
                {% if tool == "PostgreSQL" %}<i class="fas fa-database me-1"></i>{% endif %}
                {% if tool == "Docker" %}<i class="fab fa-docker me-1"></i>{% endif %}
                {% if tool == "Bootstrap 5" %}<i class="fab fa-bootstrap me-1"></i>{% endif %}
                {% if tool == "Heroku" %}<i class="fas fa-cloud-upload-alt me-1"></i>{% endif %}
                {{ tool }}
              </span>
            {% endfor %}
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
  </div>
  {% endif %}

  <!-- SPECIAL FEATURES -->
  {% if project.special_features %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">✨ Special Features</h3>
      <ul class="mb-0">
        {% for feature in project.special_features %}
        <li>🌟 {{ feature }}</li>
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- PROBLEMS SOLVED -->
  {% if project.problems_solved %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">🎯 Real-World Problems Solved</h3>
      <ul class="mb-0">
        {% for item in project.problems_solved %}
        <li>🔧 {{ item }}</li>
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- IMPROVEMENTS -->
  {% if project.improvements %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">🚧 Improvements for Next Time</h3>
      <ul class="mb-0">
        {% for item in project.improvements %}
        <li>🛠 {{ item }}</li>
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- PROUD OF -->
  {% if project.proud_of %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">🏅 What I'm Proud Of</h3>
      <ul class="mb-0">
        {% for item in project.proud_of %}
        <li>🌈 {{ item }}</li>
        {% endfor %}
      </ul>
    </div>
  </div>
  {% endif %}

  <!-- BUILD NOTES -->
  {% if project.build_notes %}
  <div class="card mb-4 shadow-sm case-section fade-in-up">
    <div class="card-body">
      <h3 class="card-title">📚 Build Notes</h3>
      <div class="highlight">{{ project.build_notes|safe }}</div>
    </div>
  </div>
  {% endif %}

  <!-- Bottom CTAs -->
  <div class="text-center case-section fade-in-up mt-5">
    {% if project.live_url %}
      <a href="{{ project.live_url }}" class="btn btn-primary btn-lg me-2" target="_blank">🌍 Visit Live Site</a>
    {% endif %}
    {% if project.github_url %}
      <a href="{{ project.github_url }}" class="btn btn-outline-dark btn-lg" target="_blank">💻 GitHub Repo</a>
    {% endif %}
  </div>

</div>
{% endblock %}

===== templates/account/password_reset_done.html =====
{% extends "base.html" %}

{% block title %}Reset Link Sent{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">
      <h2 class="h4 mb-3">Check Your Email</h2>
      <p class="text-muted">
        If an account with that email exists, we’ve sent a password reset link to your inbox.
      </p>

      <div class="mt-4">
        <a href="{% url 'account_login' %}" class="btn btn-primary w-100">Back to Login</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/account/profile_edit.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Edit Profile - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Edit Profile</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </form>
    <p class="mt-3"><a href="{% url 'dashboard' %}">Back to Dashboard</a></p>
</div>
{% endblock %}

===== templates/account/password_reset.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Reset Password{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">
      <h2 class="h4 mb-3">Forgot Your Password?</h2>
      <p class="text-muted mb-4">Enter your email and we'll send you a link to reset your password.</p>

      <form method="post" class="text-start">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary w-100 mt-3">Send Reset Link</button>
      </form>

      <div class="mt-4">
        <a href="{% url 'account_login' %}" class="small text-muted">Back to login</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/account/login.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% load socialaccount %}

{% block title %}Login{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">

      <h2 class="h4 mb-3">Log in to MatthewRaynor.com</h2>
      <p class="text-muted mb-4">Use your email or Google account</p>

      <!-- Email/Password Login Form -->
      <form method="post" class="mb-3 text-start">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary w-100 mt-3">Login</button>
      </form>

      <div class="text-muted mb-3">or</div>

      <!-- Google SSO Button -->
      <a href="{% provider_login_url 'google' %}" class="btn btn-light border d-flex align-items-center justify-content-center w-100 shadow-sm" style="gap: 10px; height: 48px;">
        <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google" style="width:20px;">
        <span class="fw-semibold">Continue with Google</span>
      </a>

      <div class="mt-4">
        <p class="small text-muted mb-1">
          Don't have an account?
          <a href="{% url 'signup' %}" class="fw-semibold">Sign up here</a>.
        </p>
        <p class="small text-muted">
          <a href="{% url 'account_reset_password' %}">Forgot your password?</a>
        </p>
      </div>

    </div>
  </div>
</div>
{% endblock %}

===== templates/account/dashboard.html =====
{% extends "base.html" %}
{% block title %}Dashboard - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container py-5">
  <div class="text-center mb-5">
    <h2 class="fw-bold">Welcome back, {{ user.first_name|default:user.email }}</h2>
    <p class="text-muted">Here’s a snapshot of your activity</p>
  </div>

  <div class="row g-4 mb-5">
    <!-- Profile Info -->
    <div class="col-md-6">
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title mb-3"><i class="fas fa-user me-2"></i>Profile Information</h5>
          <p><strong>Name:</strong> {{ user.first_name }} {{ user.last_name }}</p>
          <p><strong>Email:</strong> {{ user.email }}</p>
          <a href="{% url 'profile_edit' %}" class="btn btn-outline-primary btn-sm">Edit Profile</a>
        </div>
      </div>
    </div>

    <!-- Account Settings Placeholder -->
    <div class="col-md-6">
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title mb-3"><i class="fas fa-cog me-2"></i>Account Settings</h5>
          <p class="text-muted">Settings coming soon...</p>
        </div>
      </div>
    </div>
  </div>

  <div class="row g-4">
    <!-- Orders -->
    <div class="col-md-6">
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title mb-3"><i class="fas fa-box me-2"></i>Recent Orders</h5>
          {% if orders %}
            <ul class="list-group mb-3">
              {% for order in orders|slice:":3" %}
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  <div>
                    <strong>#{{ order.id }}</strong> on {{ order.created_at|date:"F j, Y" }}
                  </div>
                  <span class="fw-semibold">${{ order.total_price }}</span>
                </li>
              {% endfor %}
            </ul>
            <a href="{% url 'store:order_history' %}" class="btn btn-outline-primary btn-sm w-100">
              <i class="fas fa-receipt me-1"></i> View Full Order History
            </a>
          {% else %}
            <p class="text-muted">You haven't placed any orders yet.</p>
          {% endif %}
        </div>
      </div>
    </div>

    <!-- Reviews -->
    <div class="col-md-6">
      <div class="card shadow-sm">
        <div class="card-body">
          <h5 class="card-title mb-3"><i class="fas fa-star me-2"></i>Your Reviews</h5>
          {% if reviews %}
            <ul class="list-group">
              {% for review in reviews|slice:":3" %}
                <li class="list-group-item">
                  <strong>{{ review.product.title }}</strong><br>
                  <span class="text-muted">{{ review.rating }} stars</span>
                </li>
              {% endfor %}
            </ul>
          {% else %}
            <p class="text-muted">No reviews submitted yet.</p>
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/account/password_change_done.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Password Changed - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Password Successfully Changed</h2>
    <p>Your password has been updated. You may now <a href="{% url 'dashboard' %}">return to your dashboard</a> or continue browsing.</p>
</div>
{% endblock %}

===== templates/account/password_change.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Change Password - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Change Password</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Change Password</button>
    </form>
    <p class="mt-3"><a href="{% url 'dashboard' %}">Back to Dashboard</a></p>
</div>
{% endblock %}

===== templates/account/signup.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% load socialaccount %}

{% block title %}Sign Up{% endblock %}

{% block content %}
<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh; background-color: #f8f9fa;">
  <div class="card shadow-lg border-0" style="width: 100%; max-width: 420px;">
    <div class="card-body p-5 text-center">
      <h2 class="h4 mb-3">Create Your Account</h2>
      <p class="text-muted mb-4">Join MatthewRaynor.com using your email or Google</p>

      <!-- Sign-Up Form -->
      <form method="post" class="text-start">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary w-100 mt-3">Sign Up</button>
      </form>

      <div class="text-muted mt-3 mb-2">or</div>

      <!-- Google SSO Button -->
      <a href="{% provider_login_url 'google' process='signup' %}" class="btn btn-light border d-flex align-items-center justify-content-center w-100 shadow-sm" style="gap: 10px; height: 48px;">
        <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google" style="width:20px;">
        <span class="fw-semibold">Sign up with Google</span>
      </a>

      <div class="mt-4">
        <p class="small text-muted mb-0">
          Already have an account?
          <a href="{% url 'account_login' %}" class="fw-semibold">Log in here</a>.
        </p>
      </div>
    </div>
  </div>
</div>
{% endblock %}

===== templates/pages/press.html =====
{% extends "base.html" %}
{% block title %}Press - Matthew Raynor{% endblock %}

{% block content %}
<section class="press-section fade-in-up">
  <div class="container">
    <h2 class="section-title">In the Press</h2>
    <p class="section-subtitle">
      Stories, interviews, and articles that highlight my journey—from life on the water to life behind the screen. These features celebrate resilience, creativity, and the power of community.
    </p>

    <div class="row">
      {% for article in press_articles %}
      <div class="col-md-6 col-lg-4 mb-4 fade-in-up sr-delay-{{ forloop.counter }}">
        <div class="press-card card h-100 shadow-sm border-0 d-flex flex-column">
          {% if article.image_url %}
          <div class="press-image-wrapper">
            <img src="{{ article.image_url }}" class="card-img-top" alt="{{ article.title }}">
          </div>
          {% endif %}
          <div class="card-body d-flex flex-column">
            <h5 class="card-title">{{ article.title }}</h5>
            <p class="source"><small>{{ article.source }}</small></p>
            <p class="card-text flex-grow-1">{{ article.summary }}</p>
            <a href="{{ article.link }}" class="btn btn-primary mt-3" target="_blank" rel="noopener noreferrer">Read Full Article</a>
          </div>
        </div>
      </div>
      {% endfor %}
    </div>
  </div>
</section>
{% endblock %}

===== templates/pages/contact.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Contact - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-5">
  <h1 class="fw-bold mb-4">Contact Me</h1>
  <p class="lead">Got questions? Need a Website/Application? Need Drone Photos? Drop me a message below.</p>

  {% if messages %}
    {% for message in messages %}
      <div class="alert alert-success">{{ message }}</div>
    {% endfor %}
  {% endif %}

  <form method="post">
    {% csrf_token %}
    {{ form|crispy }}
    <button type="submit" class="btn btn-primary mt-3">Send Message</button>
  </form>
</div>
{% endblock %}

===== templates/pages/story.html =====
{% extends "base.html" %}
{% load static %}

{% block title %}My Story - Matthew Raynor{% endblock %}

{% block content %}
<div class="container py-5 fade-in-up">

  <!-- WHO YOU ARE -->
  <div class="row mb-5 align-items-center">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/fisherman.jpeg' %}" class="img-fluid rounded shadow" alt="Matthew as Fisherman">
    </div>
    <div class="col-md-6">
      <h2 class="fw-bold">Who I Am & What I’ve Been Through</h2>
      <p class="lead">I’m Matthew Raynor — a quadriplegic full-stack developer, artist, and writer who survived a catastrophic diving accident that left me paralyzed from the chest down.</p>
      <p>Before that day, I was a commercial fisherman working off the coast of Montauk, living wild and braving storms. A dive meant to ease tendonitis ended my mobility — but began my rebirth. I taught myself how to use a computer with two styluses and voice commands. From that place of near-total limitation, I rebuilt my life with code, creativity, and spiritual grit.</p>
    </div>
  </div>

  <!-- ART, WRITING, PRESS -->
  <div class="row mb-5 align-items-center flex-md-row-reverse">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/artwork.jpeg' %}" class="img-fluid rounded shadow" alt="Art and Memoir">
    </div>
    <div class="col-md-6">
      <h2 class="fw-bold">What I Do – Art, Writing & Press</h2>
      <p>I’m a multidisciplinary creator. My drone and landscape photography becomes fine art prints. My memoir, <em>Before Me After Me</em>, documents my physical and spiritual transformation. My work has been shown in local art shows and featured in the press — ABC7 News, Newsday, The Southampton Press, and more — not just for surviving, but for creating beauty in the aftermath.</p>
    </div>
  </div>

  <!-- PROGRAMMING -->
  <div class="row mb-5 align-items-center">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/drone.jpeg' %}" class="img-fluid rounded shadow" alt="Coding Projects">
    </div>
    <div class="col-md-6">
      <h2 class="fw-bold">What I Build – Programming Projects</h2>
      <p>I’m a self-taught full-stack developer specializing in Django and Python. I built:</p>
      <ul>
        <li>A logistics system for an art moving company (EJ Art Mover)</li>
        <li>A full e-commerce store for selling my book and artwork</li>
        <li>A motivational AI chatbot trained on my writing</li>
      </ul>
      <p>All this with zero hand function. Just styluses, voice commands, and unstoppable determination.</p>
    </div>
  </div>

  <!-- MOTIVATIONAL WORK -->
  <div class="row mb-5 align-items-center flex-md-row-reverse">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/sign.jpeg' %}" class="img-fluid rounded shadow" alt="Inspirational Work">
    </div>
    <div class="col-md-6">
      <h2 class="fw-bold">What I Inspire – Motivational Work</h2>
      <p>My mission is to inspire others who are in dark places. I share raw reflections on disability, recovery, and faith through Substack, TikTok, and YouTube. I’ve hosted AA meetings in a nursing home and write honestly about Buddhism, trauma, spiritual growth, and the power of discipline. I mix humor and heart to help others find their light — because I had to find mine the hard way.</p>
    </div>
  </div>

  <!-- SOCIAL PRESENCE -->
  <div class="row mb-5 align-items-center">
    <div class="col-md-6 mb-4 mb-md-0">
      <img src="{% static 'images/book.jpeg' %}" class="img-fluid rounded shadow" alt="Social Media">
    </div>
    <div class="col-md-6">
      <h2 class="fw-bold">Where I Show Up – Online</h2>
      <p>Across platforms, I share stories of resilience, code, art, and laughter. Find me at:</p>
      <ul class="list-unstyled">
        <li><i class="fab fa-tiktok me-2"></i><a href="https://www.tiktok.com/@matttyrayna" target="_blank">TikTok – @matttyrayna</a></li>
        <li><i class="fab fa-instagram me-2"></i><a href="https://www.instagram.com/matthewraynorig/" target="_blank">Instagram – @matthewraynorig</a></li>
        <li><i class="fab fa-linkedin me-2"></i><a href="https://www.linkedin.com/in/matthew-raynor-2b3618200/" target="_blank">LinkedIn – Matthew Raynor</a></li>
        <li><i class="fab fa-github me-2"></i><a href="https://github.com/mattyray" target="_blank">GitHub – @mattyray</a></li>
        <li><i class="fa fa-envelope me-2"></i><a href="mailto:mnraynor90@gmail.com">mnraynor90@gmail.com</a></li>
        <li><i class="fas fa-book-open me-2"></i><a href="https://substack.com/@mnraynor90" target="_blank">Substack – Reflections & Essays</a></li>
      </ul>
    </div>
  </div>

</div>
{% endblock %}

===== templates/store/product_detail.html =====
{% extends "base.html" %}
{% block title %}{{ product.title }} - MatthewRaynor.com{% endblock %}

{% block content %}
<div class="container mt-4">
  <div class="row">
    <div class="col-md-6">
      {% if product.image %}
        <img src="{{ product.image.url }}" class="img-fluid" alt="{{ product.title }}">
      {% endif %}
    </div>
    <div class="col-md-6">
      <h2>{{ product.title }}</h2>
      <p>{{ product.description }}</p>
      <h4>${{ product.price }}</h4>
      <p><strong>Stock:</strong> {{ product.stock }}</p>
      {% if product.product_type == 'artwork' and product.collection %}
        <p><strong>Collection:</strong> 
          <a href="{% url 'store:collection_detail' product.collection.slug %}">
            {{ product.collection.name }}
          </a>
        </p>
      {% endif %}
      <a href="{% url 'store:add_to_cart' product.id %}" class="btn btn-success me-3">Add to Cart</a>

    </div>
  </div>

  <hr class="my-5">

  <!-- ✅ Review Section -->
  <div class="row">
    <div class="col-md-8 offset-md-2">
      <h3 class="mb-4">Leave a Review</h3>
      {% if user.is_authenticated %}
        <form method="post">
          {% csrf_token %}
          <div class="mb-3">
            {{ form.rating.label_tag }}
            {{ form.rating }}
          </div>
          
          <div class="mb-3">
            {{ form.comment.label_tag }}
            {{ form.comment }}
          </div>
          <button type="submit" class="btn btn-primary">Submit Review</button>
        </form>
      {% else %}
        <p><a href="{% url 'account_login' %}">Log in</a> to leave a review.</p>
      {% endif %}
    </div>
  </div>

  <!-- ✅ Display Existing Reviews -->
  {% if reviews %}
    <div class="row mt-5">
      <div class="col-md-8 offset-md-2">
        <h4 class="mb-3">Customer Reviews</h4>
        <ul class="list-group">
          {% for review in reviews %}
            <li class="list-group-item">
              <strong>
                {{ review.user.first_name|default:review.user.email }}
              </strong>
              - {{ review.rating }} ★
              <br>
              {{ review.comment }}
              <br>
              <small class="text-muted">{{ review.created_at|date:"F j, Y" }}</small>
            </li>
          {% endfor %}
        </ul>
      </div>
    </div>
  {% endif %}
</div>
{% endblock %}

{% block extra_js %}
<!-- ✅ Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Stripe star rating
    const radios = document.querySelectorAll('.star-rating input[type="radio"]');
    radios.forEach(radio => {
      radio.addEventListener('change', () => {
        const allLabels = document.querySelectorAll('.star-rating label');
        allLabels.forEach(label => label.classList.remove('selected'));

        let selected = false;
        radios.forEach((r, i) => {
          const label = r.nextElementSibling;
          if (!selected) label.classList.add('selected');
          if (r.checked) selected = true;
        });
      });
    });

    // Stripe checkout session
    const stripe = Stripe("{{ stripe_publishable_key }}");
    const checkoutButton = document.getElementById("checkout-button");
    checkoutButton.addEventListener("click", () => {
      fetch("{% url 'store:create_checkout_session' %}", {
        method: "POST",
        headers: {
          "X-CSRFToken": "{{ csrf_token }}",
        },
        body: JSON.stringify({
          product_id: "{{ product.id }}"
        }),
      })
      .then(res => res.json())
      .then(data => {
        return stripe.redirectToCheckout({ sessionId: data.id });
      });
    });
  });
</script>
{% endblock %}

===== templates/store/cart_detail.html =====
{% extends "base.html" %}
{% block title %}Your Cart{% endblock %}

{% block content %}
<div class="container mt-4">
  <h2 class="fw-bold mb-4">Your Shopping Cart</h2>

  {% if cart.items %}
    <ul class="list-group mb-4">
      {% for key, item in cart.items %}
      <li class="list-group-item d-flex justify-content-between align-items-center">
        <div>
          {{ item.title }} (x{{ item.quantity }})
        </div>
        <div class="d-flex align-items-center">
          <strong class="me-3">${{ item.price }}</strong>
          <form action="{% url 'store:remove_from_cart' key %}" method="post">
            {% csrf_token %}
            <button type="submit" class="btn btn-sm btn-danger">Remove</button>
          </form>
        </div>
      </li>
      {% endfor %}
    </ul>

    <h4 class="mb-4">Total: <span class="text-success">${{ cart.total }}</span></h4>

    <form action="{% url 'store:checkout' %}" method="post">
      {% csrf_token %}
      <button type="submit" class="btn btn-primary btn-lg">Proceed to Checkout</button>
    </form>
  {% else %}
    <div class="alert alert-info">
      Your cart is currently empty. <a href="{% url 'store:store_overview' %}">Browse the store</a> to add items.
    </div>
  {% endif %}
</div>
{% endblock %}

===== templates/store/store_overview.html =====
{% extends "base.html" %}
{% load static %}

{% block title %}Store - Matthew Raynor{% endblock %}

{% block content %}

<!-- HERO BANNER -->
<!-- HERO SECTION for STORE OVERVIEW -->
<section class="store-hero-section text-white d-flex align-items-center justify-content-center mb-4" style="height: 55vh;">
  <div class="store-hero-overlay"></div>
  <div class="store-hero-bg" style="background-image: url('{% static "images/store-hero.jpg" %}');"></div>
  <div class="store-hero-content text-center p-4 rounded">
    <h1 class="display-4 fw-bold">Where Vision Meets Resilience</h1>
    <p class="lead">Welcome to Matt's Store.</p>
    <div class="mt-4">
      <a href="#collections" class="btn btn-primary btn-lg me-2">Explore Collections</a>
      <a href="#book" class="btn btn-outline-light btn-lg">Discover the Book</a>
    </div>
  </div>
</section>


<div class="container py-5">

  <!-- ARTWORK COLLECTIONS -->
  <section id="collections" class="mb-5">
    <h2 class="fw-bold text-center mb-4 fade-in-up sr-delay-1">Artwork Collections</h2>

    <div class="row justify-content-center">
      {% for collection in collections %}
      <div class="col-md-6 col-lg-4 mb-4 fade-in-up sr-delay-{{ forloop.counter }}">
        <div class="card shadow-sm hover-shadow h-100">
          <div class="ratio ratio-4x3">
            {% if collection.cover_image %}
              <img src="{{ collection.cover_image.url }}" class="card-img-top object-fit-cover" alt="{{ collection.name }}">
            {% endif %}
          </div>
          <div class="card-body text-center">
            <h5 class="card-title fw-semibold">{{ collection.name }}</h5>
            <p class="card-text text-muted">{{ collection.description|truncatewords:20 }}</p>
            <a href="{% url 'store:collection_detail' collection.slug %}" class="btn btn-outline-primary">View Collection</a>
          </div>
        </div>
      </div>
      {% empty %}
        <p class="text-center">No artwork collections available yet.</p>
      {% endfor %}
    </div>
  </section>

  <!-- BOOK SPOTLIGHT -->
  {% if books %}
  <section id="book" class="bg-light rounded py-5 px-3 fade-in-up sr-delay-4">
    <div class="row align-items-center justify-content-center">
      {% for book in books %}
      <div class="col-md-5 mb-4 mb-md-0">
        <div class="ratio ratio-4x3">
          {% if book.image %}
            <img src="{{ book.image.url }}" class="img-fluid object-fit-cover rounded shadow" alt="{{ book.title }}">
          {% endif %}
        </div>
      </div>
      <div class="col-md-7">
        <h2 class="fw-bold">{{ book.title }}</h2>
        <p class="lead text-muted mb-3">A visual memoir of hope and resilience .</p>
        <p>
          This book isn’t just a collection of photographs — it's my story of transformation.
          Shot from boats, aerial photos, and moments of hope, these images guided me back to myself.
          No captions. No filters. Just the truth of my journey.
        </p>
        <blockquote class="blockquote mt-4">
          <p class="mb-0">"These images helped me reclaim my life."</p>
        </blockquote>
        <a href="{% url 'store:product_detail' book.slug %}" class="btn btn-primary btn-lg mt-3">Buy the Book</a>
      </div>
      {% endfor %}
    </div>
  </section>
  {% endif %}

</div>
{% endblock %}

===== templates/store/order_history.html =====
{% extends "base.html" %}
{% block title %}Order History{% endblock %}

{% block content %}
<div class="container mt-5">
  <h2 class="fw-bold mb-4">Your Orders</h2>

  {% if orders %}
    <div class="list-group">
      {% for order in orders %}
        <div class="list-group-item mb-3 shadow-sm rounded">
          <h5 class="mb-1">Order #{{ order.id }} - {{ order.created_at|date:"F j, Y, g:i a" }}</h5>
          <p class="mb-0"><strong>Status:</strong> {{ order.get_status_display }}</p>
          <p class="mb-0"><strong>Total:</strong> ${{ order.total_price }}</p>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <p class="text-muted">You haven't placed any orders yet.</p>
  {% endif %}
</div>
{% endblock %}

===== templates/store/collection_detail.html =====
{% extends "base.html" %}
{% block title %}{{ collection.name }} - MatthewRaynor.com{% endblock %}

{% block content %}

<!-- HERO SECTION -->
<section class="store-hero-section text-white d-flex align-items-center justify-content-center mb-4" style="height: 40vh;">
  {% if collection.cover_image %}
    <div class="store-hero-overlay"></div>
    <div class="store-hero-bg" style="background-image: url('{{ collection.cover_image.url }}');"></div>
  {% endif %}
  <div class="store-hero-content text-center p-4 rounded">
    <h1 class="display-5 fw-bold">{{ collection.name }}</h1>
    <p class="lead">{{ collection.description }}</p>
  </div>
</section>

<!-- ARTWORK LIST -->
<div class="container">
  <h3 class="fw-bold text-center mb-4 fade-in-up">Artworks in This Collection</h3>
  <div class="row justify-content-center">
    {% for artwork in artworks %}
      <div class="col-md-6 col-lg-4 mb-4 fade-in-up sr-delay-{{ forloop.counter }}">
        <div class="card shadow-sm hover-shadow h-100">
          <div class="ratio ratio-4x3">
            {% if artwork.image %}
              <img src="{{ artwork.image.url }}" class="card-img-top object-fit-cover" alt="{{ artwork.title }}">
            {% endif %}
          </div>
          <div class="card-body text-center">
            <h5 class="card-title fw-semibold">{{ artwork.title }}</h5>
            <p class="card-text">${{ artwork.price }}</p>
            <a href="{% url 'store:product_detail' artwork.slug %}" class="btn btn-outline-primary">View Details</a>
          </div>
        </div>
      </div>
    {% empty %}
      <p class="text-center">No artworks available in this collection.</p>
    {% endfor %}
  </div>
</div>
{% endblock %}

===== templates/store/order_success.html =====
{% extends "base.html" %}
{% block title %}Order Success{% endblock %}

{% block content %}
<div class="container mt-5 text-center">
  <h1 class="fw-bold text-success">🎉 Thank you for your order!</h1>
  <p class="lead mt-3">You'll receive a confirmation email shortly. Feel free to continue exploring.</p>
  <a href="{% url 'store:store_overview' %}" class="btn btn-primary mt-4">Return to Store</a>
</div>
{% endblock %}


===== SCSS Files =====

===== static/css/custom.scss =====
// -----------------------------------------------------
// Define Crunchyroll-Inspired Palette & Typography
// -----------------------------------------------------
$primary: #4CAF50;         // Green Lotus for branding
$secondary: #FFF8E1;       // Soft Cream background
$nav-bg: #111111;          // Deep black for navigation background
$nav-hover: #222222;       // Slightly lighter black on hover
$nav-text: #CCCCCC;        // Off-white/grey for nav text
$text-light: #FFFFFF;      // White for highlighted text

// Additional theme colors
$deep-ocean-blue: #003049;
$coral-highlight: #FF6B6B;
$soft-white: #FAFAFA;

// Typography
$font-heading: 'Playfair Display', serif;
$font-sans: 'Montserrat', sans-serif;
$font-body: 'Open Sans', sans-serif;

$font-family-base: $font-body;
$base-font-size: 16px;
$line-height: 1.6;

// -----------------------------------------------------
// Import Bootstrap
// -----------------------------------------------------
@import "../../node_modules/bootstrap/scss/bootstrap";
@import "reveal";


// -----------------------------------------------------
// Global Styles
// -----------------------------------------------------
body {
  font-family: $font-family-base;
  font-size: $base-font-size;
  line-height: $line-height;
  background-color: $secondary;
  color: #3E3E3E;
  margin: 0;
  padding: 0;
}

// Generic section spacing
section {
  padding: 60px 0;
  border-bottom: 1px solid #eaeaea;
  &:last-of-type {
    border-bottom: none;
  }
}

// Headings typography
h1, h2, h3, h4, h5 {
  font-family: $font-heading;
  font-weight: bold;
  margin-bottom: 20px;
}
h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }

.navbar-brand,
.btn,
.card-title {
  font-family: $font-sans;
}

// -----------------------------------------------------
// Utility Color Classes
// -----------------------------------------------------
.text-coral {
  color: $coral-highlight !important;
}
.bg-ocean {
  background-color: $deep-ocean-blue !important;
}
.bg-soft {
  background-color: $soft-white !important;
}




// -----------------------------------------------------
// Card Styling Enhancements
// -----------------------------------------------------
.card {
  border: none;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  overflow: hidden;

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  }
}

// -----------------------------------------------------
// Desktop Navbar Styling (Crunchyroll Inspired)
// -----------------------------------------------------
.navbar.bg-crunchy {
  background-color: $nav-bg !important;
  border-bottom: 1px solid $nav-hover;

  .navbar-brand {
    .brand-text {
      color: $primary;
      font-weight: bold;
      font-size: 1.25rem;
    }
  }

  .navbar-nav .nav-link {
    color: $nav-text !important;
    padding: 0.5rem 1rem;
    transition: background-color 0.2s ease, color 0.2s ease;

    &:hover {
      background-color: $nav-hover;
      color: $text-light;
    }
  }

  .divider {
    color: $nav-text;
    padding: 0 0.75rem;
    font-size: 1.25rem;
  }

  .search-input {
    min-width: 200px;
  }

  .navbar-nav {
    li.store {
      position: relative;
      padding-left: 1.5rem;

      &::before {
        content: "|";
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        color: $nav-text;
        font-size: 1.25rem;
      }

      a.nav-link {
        font-weight: bold;
      }
    }
  }
}

// -----------------------------------------------------
// Mobile Offcanvas Styling
// -----------------------------------------------------
.offcanvas {
  background-color: $secondary;
  color: #3E3E3E;

  .offcanvas-header,
  .offcanvas-body {
    padding: 1rem;
  }

  .offcanvas-link {
    color: #3E3E3E;
    display: block;
    padding: 0.75rem 1rem;
    text-decoration: none;
    transition: background-color 0.2s ease, color 0.2s ease;

    &:hover {
      background-color: $nav-hover;
      color: $text-light;
    }
  }

  .divider {
    text-align: center;
    padding: 0.5rem 0;
    color: #777;
  }
}

// -----------------------------------------------------
// Chat Widget Styling (Matching Navigation Theme)
// -----------------------------------------------------
.chat-widget {
  position: fixed;
  bottom: 80px;
  right: 20px;
  width: 320px;
  height: 400px;
  background-color: $nav-bg;
  border: 1px solid $nav-hover;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0,0,0,0.3);
  display: none;
  z-index: 1000;

  .chat-header {
    background-color: $primary;
    color: $text-light;
    padding: 10px;
    font-weight: bold;
    cursor: pointer;

    .chat-close {
      float: right;
      cursor: pointer;
    }
  }

  .chat-body {
    padding: 10px;
    height: calc(100% - 120px);
    overflow-y: auto;
    color: $text-light;
  }

  .chat-input {
    padding: 10px;

    input.form-control {
      background-color: $secondary;
      border: 1px solid $nav-hover;
      color: #3E3E3E;
    }
  }
}

.chat-toggle {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 1000;
  background-color: $nav-bg;
  border: 1px solid $nav-hover;
  color: $nav-text;
  transition: background-color 0.2s ease;

  &:hover {
    background-color: $nav-hover;
  }
}

// -----------------------------------------------------
// Footer Styling
// -----------------------------------------------------
footer {
  background-color: $nav-bg;
  color: $text-light;
  padding: 20px 0;
  text-align: center;
}

.hero-section {
  position: relative;
  width: 100%;
  height: 60vh;
  background-image: url('/static/images/hero.jpg'); // Replace with your image path
  background-size: cover;
  background-position: center;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;

  // Dark overlay
  &::before {
    content: "";
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5); // darkens image for contrast
    z-index: 1;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    text-align: center;
    padding: 2rem;

    // Optional blur-glass effect
    background-color: rgba(0, 0, 0, 0.4);
    border-radius: 10px;
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);

    h1 {
      font-family: $font-heading;
      font-size: 2.5rem;
      margin-bottom: 1rem;
      text-shadow: 0 3px 6px rgba(0, 0, 0, 0.7);
    }

    p {
      font-size: 1.25rem;
      font-family: $font-sans;
    }

    .btn-hero {
      margin-top: 1.5rem;
      padding: 0.75rem 1.5rem;
      font-weight: bold;
      font-size: 1rem;
    }
  }
}
// -----------------------------------------------------
// Press Section Styling
// -----------------------------------------------------
.press-section {
  padding: 4rem 0;
  background-color: $secondary;

  .section-title {
    font-family: $font-heading;
    font-size: 2.25rem;
    text-align: center;
    margin-bottom: 2rem;
    color: $deep-ocean-blue;
  }

  .section-subtitle {
    font-size: 1.125rem;
    font-family: $font-sans;
    text-align: center;
    margin-bottom: 3rem;
    color: #5a5a5a;
  }

  .press-card {
    border: none;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;

    &:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
    }

    .card-img-top {
      height: 200px;
      object-fit: cover;
    }

    .card-body {
      padding: 1.25rem;
      display: flex;
      flex-direction: column;
      flex: 1;

      .card-title {
        font-family: $font-sans;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        color: #2a2a2a;
      }

      .source {
        font-size: 0.85rem;
        color: #999;
        margin-bottom: 0.75rem;
      }

      .card-text {
        font-size: 1rem;
        line-height: 1.6;
        color: #555;
        flex-grow: 1;
        margin-bottom: 1.25rem;
      }

      .btn {
        font-weight: 600;
        background-color: $primary;
        border-color: $primary;
        width: 100%;

        &:hover {
          background-color: darken($primary, 8%);
          border-color: darken($primary, 8%);
        }
      }
    }
  }
}
.press-image-wrapper {
  position: relative;
  width: 100%;
  padding-top: 56.25%; // 16:9 aspect ratio (use 75% for 4:3)

  img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
  }
}

// -----------------------------------
// 📁 Portfolio Case Study Styling
// -----------------------------------

.case-section {
  margin-bottom: 3rem;

  h3 {
    font-weight: 700;
    margin-bottom: 1rem;
    color: #333;
  }

  p {
    font-size: 1.1rem;
    line-height: 1.7;
  }

  ul.list-group-flush {
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .card {
    border-radius: 0.75rem;
  }

  .highlight {
    background-color: #f9f9f9;
    border-left: 5px solid #0d6efd;
    padding: 1rem;
  }
}

// -----------------------------------
// 🛠️ Tech Stack Badges
// -----------------------------------


.tech-pill {
  display: inline-block;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  padding: 0.4rem 0.75rem;
  border-radius: 50rem;
  font-size: 0.875rem;
  margin: 0.25rem 0.5rem 0.25rem 0;
}

.object-fit-cover {
  object-fit: cover;
  height: 100%;
  width: 100%;
}

.hover-shadow:hover {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
  transform: translateY(-2px);
  transition: all 0.2s ease-in-out;
}

.store-hero-section {
  position: relative;
  height: 55vh;
  color: white;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.6);

  .store-hero-bg {
    position: absolute;
    inset: 0;
    background-size: cover;
    background-position: center;
    z-index: 0;
  }
}


.store-hero-overlay {
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.5); // ⬛️ Subtle dark overlay
  z-index: 1;
}

.store-hero-content {
  position: relative;
  z-index: 2;
  background-color: rgba(0, 0, 0, 0.55);
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
  border-radius: 12px;
  padding: 2rem;
  max-width: 800px;
  text-align: center;

  h1 {
    font-size: 2.25rem;
    font-family: $font-heading;
    margin-bottom: 1rem;
  }

  p {
    font-size: 1.125rem;
    font-family: $font-sans;
  }

  .btn {
    font-weight: bold;
    font-size: 1rem;
    margin-top: 1.25rem;
  }
}

// -------------------------------------
// ⭐ Star Rating Styling
.star-rating {
  direction: rtl;
  display: flex;
  gap: 0.5rem;

  input[type="radio"] {
    display: none;
  }

  label {
    font-size: 2rem;
    color: #ccc;
    cursor: pointer;
    transition: color 0.2s ease;

    span {
      display: inline; // the star stays visible
    }
  }

  input[type="radio"]:checked ~ label,
  label:hover,
  label:hover ~ label {
    color: gold;
  }

  // Fix: only highlight clicked and prior stars, not all future ones
  input[type="radio"]:checked + label,
  input[type="radio"]:checked + label ~ label {
    color: gold;
  }
}

===== static/css/_reveal.scss =====
// ------------------------------------
// ✨ ScrollReveal Animations & Delays
// ------------------------------------

.fade-in-up {
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 0.6s ease-out forwards;
}

.scroll-reveal {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  will-change: opacity, transform;
}


@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.sr-delay-1 { animation-delay: 0.1s; }
.sr-delay-2 { animation-delay: 0.2s; }
.sr-delay-3 { animation-delay: 0.3s; }
.sr-delay-4 { animation-delay: 0.4s; }
.sr-delay-5 { animation-delay: 0.5s; }
.sr-delay-6 { animation-delay: 0.6s; }
.sr-delay-7 { animation-delay: 0.7s; }
.sr-delay-8 { animation-delay: 0.8s; }
.sr-delay-9 { animation-delay: 0.9s; }


.zoom-in {
  opacity: 0;
  transform: scale(0.95);
  animation: zoomIn 0.6s ease-out forwards;
}

@keyframes zoomIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.slide-left {
  opacity: 0;
  transform: translateX(-40px);
  animation: slideLeft 0.6s ease-out forwards;
}

@keyframes slideLeft {
  from {
    opacity: 0;
    transform: translateX(-40px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

===== README.md =====
# MatthewRaynor.com

![CI](https://github.com/mattyray/matthew_raynor_website/actions/workflows/ci.yml/badge.svg)

A personal full-stack web platform for Matthew Raynor — a quadriplegic self-taught developer, artist, and motivational creator — featuring a blog, portfolio, online store, press hub, and AI chatbot.

## 🧠 Project Purpose

This website showcases:
- Inspirational blog posts and Substack content
- A portfolio of Django and React projects
- An online store for artwork and Matthew's book
- Press/media features
- A motivational AI-powered chatbot
- Accessible UX for users with disabilities

## ⚙️ Tech Stack

**Backend**: Django 5.1.6, PostgreSQL, Docker, Gunicorn  
**Frontend**: Bootstrap 5, SCSS, ScrollReveal  
**Features**: Google SSO, Stripe Checkout, Cloudinary image hosting, Whitenoise, reCAPTCHA  
**Deployment**: Heroku with Docker  
**CI/CD**: GitHub Actions

## 🚀 Installation (Dev)

```bash
# Clone the repo
git clone https://github.com/mattyray/matthew_raynor_website.git
cd matthew_raynor_website

# Copy and edit .env file
cp .env.example .env  # (You’ll need to manually add real keys)

# Run Docker
docker-compose up --build

App will be available at http://localhost:8001

# Enter web container
docker-compose exec web bash

# Run migrations
python manage.py migrate

# Create superuser
python manage.py createsuperuser

# Collect static files
python manage.py collectstatic --noinput

